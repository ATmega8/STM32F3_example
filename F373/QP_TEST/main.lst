
main.elf:     file format elf32-littlearm


Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	; (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4804      	ldr	r0, [pc, #16]	; (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b110      	cbz	r0, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2101      	movs	r1, #1
 8000198:	7021      	strb	r1, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	200000ac 	.word	0x200000ac
 80001a0:	00000000 	.word	0x00000000
 80001a4:	080023fc 	.word	0x080023fc

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b06      	ldr	r3, [pc, #24]	; (80001c4 <frame_dummy+0x1c>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4806      	ldr	r0, [pc, #24]	; (80001c8 <frame_dummy+0x20>)
 80001b0:	4906      	ldr	r1, [pc, #24]	; (80001cc <frame_dummy+0x24>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	4806      	ldr	r0, [pc, #24]	; (80001d0 <frame_dummy+0x28>)
 80001b8:	6801      	ldr	r1, [r0, #0]
 80001ba:	b111      	cbz	r1, 80001c2 <frame_dummy+0x1a>
 80001bc:	4a05      	ldr	r2, [pc, #20]	; (80001d4 <frame_dummy+0x2c>)
 80001be:	b102      	cbz	r2, 80001c2 <frame_dummy+0x1a>
 80001c0:	4790      	blx	r2
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	080023fc 	.word	0x080023fc
 80001cc:	200000b0 	.word	0x200000b0
 80001d0:	200000a8 	.word	0x200000a8
 80001d4:	00000000 	.word	0x00000000

080001d8 <_mainCRTStartup>:
 80001d8:	4b15      	ldr	r3, [pc, #84]	; (8000230 <_mainCRTStartup+0x58>)
 80001da:	2b00      	cmp	r3, #0
 80001dc:	bf08      	it	eq
 80001de:	4b13      	ldreq	r3, [pc, #76]	; (800022c <_mainCRTStartup+0x54>)
 80001e0:	469d      	mov	sp, r3
 80001e2:	f5a3 3a80 	sub.w	sl, r3, #65536	; 0x10000
 80001e6:	2100      	movs	r1, #0
 80001e8:	468b      	mov	fp, r1
 80001ea:	460f      	mov	r7, r1
 80001ec:	4813      	ldr	r0, [pc, #76]	; (800023c <_mainCRTStartup+0x64>)
 80001ee:	4a14      	ldr	r2, [pc, #80]	; (8000240 <_mainCRTStartup+0x68>)
 80001f0:	1a12      	subs	r2, r2, r0
 80001f2:	f001 ff97 	bl	8002124 <memset>
 80001f6:	4b0f      	ldr	r3, [pc, #60]	; (8000234 <_mainCRTStartup+0x5c>)
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	d000      	beq.n	80001fe <_mainCRTStartup+0x26>
 80001fc:	4798      	blx	r3
 80001fe:	4b0e      	ldr	r3, [pc, #56]	; (8000238 <_mainCRTStartup+0x60>)
 8000200:	2b00      	cmp	r3, #0
 8000202:	d000      	beq.n	8000206 <_mainCRTStartup+0x2e>
 8000204:	4798      	blx	r3
 8000206:	2000      	movs	r0, #0
 8000208:	2100      	movs	r1, #0
 800020a:	4604      	mov	r4, r0
 800020c:	460d      	mov	r5, r1
 800020e:	2000      	movs	r0, #0
 8000210:	490c      	ldr	r1, [pc, #48]	; (8000244 <_mainCRTStartup+0x6c>)
 8000212:	2200      	movs	r2, #0
 8000214:	2300      	movs	r3, #0
 8000216:	f001 ff29 	bl	800206c <__register_exitproc>
 800021a:	f001 ff5d 	bl	80020d8 <__libc_init_array>
 800021e:	4620      	mov	r0, r4
 8000220:	4629      	mov	r1, r5
 8000222:	f001 ff89 	bl	8002138 <main>
 8000226:	f001 ff2b 	bl	8002080 <exit>
 800022a:	bf00      	nop
 800022c:	00080000 	.word	0x00080000
	...
 800023c:	200000ac 	.word	0x200000ac
 8000240:	2000021c 	.word	0x2000021c
 8000244:	080020ad 	.word	0x080020ad

08000248 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000248:	4770      	bx	lr
 800024a:	bf00      	nop

0800024c <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800024c:	e7fe      	b.n	800024c <HardFault_Handler>
 800024e:	bf00      	nop

08000250 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000250:	e7fe      	b.n	8000250 <MemManage_Handler>
 8000252:	bf00      	nop

08000254 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000254:	e7fe      	b.n	8000254 <BusFault_Handler>
 8000256:	bf00      	nop

08000258 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000258:	e7fe      	b.n	8000258 <UsageFault_Handler>
 800025a:	bf00      	nop

0800025c <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800025c:	4770      	bx	lr
 800025e:	bf00      	nop

08000260 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
	QF_TICK_X(0U, (void *)0);
 8000260:	2000      	movs	r0, #0
 8000262:	f001 b9a5 	b.w	80015b0 <QF_tickX_>
 8000266:	bf00      	nop

08000268 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000268:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 800026c:	f2ce 0200 	movt	r2, #57344	; 0xe000
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000270:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000274:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000278:	f2c4 0302 	movt	r3, #16386	; 0x4002
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800027c:	f441 0070 	orr.w	r0, r1, #15728640	; 0xf00000
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000280:	b410      	push	{r4}
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000282:	f8c2 0088 	str.w	r0, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000286:	681c      	ldr	r4, [r3, #0]
 8000288:	f044 0201 	orr.w	r2, r4, #1
 800028c:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00C;
 800028e:	6859      	ldr	r1, [r3, #4]
 8000290:	f24c 000c 	movw	r0, #49164	; 0xc00c
 8000294:	f6cf 007f 	movt	r0, #63615	; 0xf87f
 8000298:	4008      	ands	r0, r1
 800029a:	6058      	str	r0, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800029c:	681c      	ldr	r4, [r3, #0]
 800029e:	f024 7284 	bic.w	r2, r4, #17301504	; 0x1080000
 80002a2:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 80002a6:	6019      	str	r1, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80002a8:	6818      	ldr	r0, [r3, #0]
 80002aa:	f420 2480 	bic.w	r4, r0, #262144	; 0x40000
 80002ae:	601c      	str	r4, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80002b0:	685a      	ldr	r2, [r3, #4]
 80002b2:	f422 01fe 	bic.w	r1, r2, #8323072	; 0x7f0000
 80002b6:	6059      	str	r1, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 80002b8:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80002ba:	f020 040f 	bic.w	r4, r0, #15
 80002be:	62dc      	str	r4, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 80002c0:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 80002c2:	f64f 42cc 	movw	r2, #64716	; 0xfccc
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
#if defined (PLL_SOURCE_HSI)
  /* At this stage the HSI is already enabled */

  /* Enable Prefetch Buffer and set Flash Latency */
  FLASH->ACR = FLASH_ACR_PRFTBE | FLASH_ACR_LATENCY_1;
 80002c6:	f44f 5000 	mov.w	r0, #8192	; 0x2000

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 80002ca:	f6cf 7200 	movt	r2, #65280	; 0xff00
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80002ce:	b083      	sub	sp, #12
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
#if defined (PLL_SOURCE_HSI)
  /* At this stage the HSI is already enabled */

  /* Enable Prefetch Buffer and set Flash Latency */
  FLASH->ACR = FLASH_ACR_PRFTBE | FLASH_ACR_LATENCY_1;
 80002d0:	f2c4 0002 	movt	r0, #16386	; 0x4002

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 80002d4:	4022      	ands	r2, r4
 80002d6:	631a      	str	r2, [r3, #48]	; 0x30
  
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80002d8:	2100      	movs	r1, #0
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
#if defined (PLL_SOURCE_HSI)
  /* At this stage the HSI is already enabled */

  /* Enable Prefetch Buffer and set Flash Latency */
  FLASH->ACR = FLASH_ACR_PRFTBE | FLASH_ACR_LATENCY_1;
 80002da:	2212      	movs	r2, #18

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
  
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80002dc:	6099      	str	r1, [r3, #8]
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80002de:	9100      	str	r1, [sp, #0]
 80002e0:	9101      	str	r1, [sp, #4]
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
#if defined (PLL_SOURCE_HSI)
  /* At this stage the HSI is already enabled */

  /* Enable Prefetch Buffer and set Flash Latency */
  FLASH->ACR = FLASH_ACR_PRFTBE | FLASH_ACR_LATENCY_1;
 80002e2:	6002      	str	r2, [r0, #0]
 
  /* HCLK = SYSCLK */
  RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80002e4:	6858      	ldr	r0, [r3, #4]
 80002e6:	6058      	str	r0, [r3, #4]
      
  /* PCLK = HCLK */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2 | (uint32_t)RCC_CFGR_PPRE2_DIV1;
 80002e8:	6859      	ldr	r1, [r3, #4]
 80002ea:	f441 6280 	orr.w	r2, r1, #1024	; 0x400
 80002ee:	605a      	str	r2, [r3, #4]

  /* PLL configuration */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 80002f0:	6858      	ldr	r0, [r3, #4]
 80002f2:	f420 117c 	bic.w	r1, r0, #4128768	; 0x3f0000
 80002f6:	6059      	str	r1, [r3, #4]
  RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSI_Div2 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL16);
 80002f8:	685a      	ldr	r2, [r3, #4]
 80002fa:	f442 1060 	orr.w	r0, r2, #3670016	; 0x380000
 80002fe:	6058      	str	r0, [r3, #4]
            
  /* Enable PLL */
  RCC->CR |= RCC_CR_PLLON;
 8000300:	6819      	ldr	r1, [r3, #0]
 8000302:	f041 7280 	orr.w	r2, r1, #16777216	; 0x1000000
 8000306:	601a      	str	r2, [r3, #0]

  /* Wait till PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000308:	6818      	ldr	r0, [r3, #0]
 800030a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800030e:	0181      	lsls	r1, r0, #6
 8000310:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000314:	d5f8      	bpl.n	8000308 <SystemInit+0xa0>
  {
  }

  /* Select PLL as system clock source */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000316:	6853      	ldr	r3, [r2, #4]
 8000318:	f023 0103 	bic.w	r1, r3, #3
 800031c:	6051      	str	r1, [r2, #4]
  RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 800031e:	6850      	ldr	r0, [r2, #4]
 8000320:	f040 0302 	orr.w	r3, r0, #2
 8000324:	6053      	str	r3, [r2, #4]

  /* Wait till PLL is used as system clock source */
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 8000326:	6851      	ldr	r1, [r2, #4]
 8000328:	f001 000c 	and.w	r0, r1, #12
 800032c:	2808      	cmp	r0, #8
 800032e:	d1fa      	bne.n	8000326 <SystemInit+0xbe>
  SetSysClock();
  
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000330:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8000334:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000338:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800033c:	609a      	str	r2, [r3, #8]
#endif  
}
 800033e:	b003      	add	sp, #12
 8000340:	bc10      	pop	{r4}
 8000342:	4770      	bx	lr

08000344 <SystemCoreClockUpdate>:
void SystemCoreClockUpdate (void)
{
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000344:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000348:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800034c:	685a      	ldr	r2, [r3, #4]
 800034e:	f002 000c 	and.w	r0, r2, #12
  
  switch (tmp)
 8000352:	2808      	cmp	r0, #8
 8000354:	d010      	beq.n	8000378 <SystemCoreClockUpdate+0x34>
 8000356:	f44f 5190 	mov.w	r1, #4608	; 0x1200
 800035a:	f2c0 017a 	movt	r1, #122	; 0x7a
      SystemCoreClock = HSI_VALUE;
      break;
  }
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800035e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000362:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000366:	4812      	ldr	r0, [pc, #72]	; (80003b0 <SystemCoreClockUpdate+0x6c>)
 8000368:	6853      	ldr	r3, [r2, #4]
 800036a:	f3c3 1203 	ubfx	r2, r3, #4, #4
 800036e:	5c83      	ldrb	r3, [r0, r2]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 8000370:	fa21 f103 	lsr.w	r1, r1, r3
 8000374:	6101      	str	r1, [r0, #16]
 8000376:	4770      	bx	lr
    case 0x04:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
      break;
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8000378:	685a      	ldr	r2, [r3, #4]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 800037a:	6858      	ldr	r0, [r3, #4]
      pllmull = ( pllmull >> 18) + 2;
 800037c:	f3c2 4183 	ubfx	r1, r2, #18, #4
 8000380:	1c8a      	adds	r2, r1, #2
      
      if (pllsource == 0x00)
 8000382:	03c0      	lsls	r0, r0, #15
 8000384:	d406      	bmi.n	8000394 <SystemCoreClockUpdate+0x50>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
 8000386:	f44f 6310 	mov.w	r3, #2304	; 0x900
 800038a:	f2c0 033d 	movt	r3, #61	; 0x3d
 800038e:	fb03 f102 	mul.w	r1, r3, r2
 8000392:	e7e4      	b.n	800035e <SystemCoreClockUpdate+0x1a>
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 8000394:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
 8000396:	f44f 5390 	mov.w	r3, #4608	; 0x1200
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 800039a:	f000 010f 	and.w	r1, r0, #15
 800039e:	1c48      	adds	r0, r1, #1
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
 80003a0:	f2c0 037a 	movt	r3, #122	; 0x7a
 80003a4:	fbb3 f1f0 	udiv	r1, r3, r0
 80003a8:	fb02 f101 	mul.w	r1, r2, r1
 80003ac:	e7d7      	b.n	800035e <SystemCoreClockUpdate+0x1a>
 80003ae:	bf00      	nop
 80003b0:	20000004 	.word	0x20000004

080003b4 <USART_initial>:
static QState USART_off(USART * const me, QEvt const * const e);

/* @(/1/0) .................................................................*/
/* @(/1/0/1) ...............................................................*/
/* @(/1/0/1/0) */
static QState USART_initial(USART * const me, QEvt const * const e) {
 80003b4:	b510      	push	{r4, lr}
 80003b6:	4604      	mov	r4, r0
    QTimeEvt_postEvery(
 80003b8:	2132      	movs	r1, #50	; 0x32
 80003ba:	f100 0020 	add.w	r0, r0, #32
 80003be:	62a4      	str	r4, [r4, #40]	; 0x28
 80003c0:	460a      	mov	r2, r1
 80003c2:	f001 fd69 	bl	8001e98 <QTimeEvt_armX>
        &me->TimeEvt,
        (QActive *)me,
        BSP_TICKS_PER_SEC/2);
    return Q_TRAN(&USART_on);
 80003c6:	f240 33d5 	movw	r3, #981	; 0x3d5
 80003ca:	f6c0 0300 	movt	r3, #2048	; 0x800
 80003ce:	60a3      	str	r3, [r4, #8]
}
 80003d0:	2004      	movs	r0, #4
 80003d2:	bd10      	pop	{r4, pc}

080003d4 <USART_on>:
/* @(/1/0/1/1) .............................................................*/
static QState USART_on(USART * const me, QEvt const * const e) {
 80003d4:	b510      	push	{r4, lr}
    QState status_;
    switch (e->sig) {
 80003d6:	880c      	ldrh	r4, [r1, #0]
 80003d8:	2c01      	cmp	r4, #1
 80003da:	d006      	beq.n	80003ea <USART_on+0x16>
 80003dc:	2c04      	cmp	r4, #4
 80003de:	d008      	beq.n	80003f2 <USART_on+0x1e>
        case TIMEOUT_SIG: {
            status_ = Q_TRAN(&USART_off);
            break;
        }
        default: {
            status_ = Q_SUPER(&QHsm_top);
 80003e0:	4b06      	ldr	r3, [pc, #24]	; (80003fc <USART_on+0x28>)
 80003e2:	2400      	movs	r4, #0
 80003e4:	6083      	str	r3, [r0, #8]
            break;
        }
    }
    return status_;
}
 80003e6:	4620      	mov	r0, r4
 80003e8:	bd10      	pop	{r4, pc}
static QState USART_on(USART * const me, QEvt const * const e) {
    QState status_;
    switch (e->sig) {
        /* @(/1/0/1/1) */
        case Q_ENTRY_SIG: {
            BSP_ledOn();
 80003ea:	f000 f8cd 	bl	8000588 <BSP_ledOn>
            status_ = Q_SUPER(&QHsm_top);
            break;
        }
    }
    return status_;
}
 80003ee:	4620      	mov	r0, r4
 80003f0:	bd10      	pop	{r4, pc}
            status_ = Q_HANDLED();
            break;
        }
        /* @(/1/0/1/1/0) */
        case TIMEOUT_SIG: {
            status_ = Q_TRAN(&USART_off);
 80003f2:	4903      	ldr	r1, [pc, #12]	; (8000400 <USART_on+0x2c>)
 80003f4:	6081      	str	r1, [r0, #8]
            status_ = Q_SUPER(&QHsm_top);
            break;
        }
    }
    return status_;
}
 80003f6:	4620      	mov	r0, r4
 80003f8:	bd10      	pop	{r4, pc}
 80003fa:	bf00      	nop
 80003fc:	08001efd 	.word	0x08001efd
 8000400:	08000405 	.word	0x08000405

08000404 <USART_off>:
/* @(/1/0/1/2) .............................................................*/
static QState USART_off(USART * const me, QEvt const * const e) {
 8000404:	b510      	push	{r4, lr}
    QState status_;
    switch (e->sig) {
 8000406:	880c      	ldrh	r4, [r1, #0]
 8000408:	2c01      	cmp	r4, #1
 800040a:	d006      	beq.n	800041a <USART_off+0x16>
 800040c:	2c04      	cmp	r4, #4
 800040e:	d008      	beq.n	8000422 <USART_off+0x1e>
        case TIMEOUT_SIG: {
            status_ = Q_TRAN(&USART_on);
            break;
        }
        default: {
            status_ = Q_SUPER(&QHsm_top);
 8000410:	4b06      	ldr	r3, [pc, #24]	; (800042c <USART_off+0x28>)
 8000412:	2400      	movs	r4, #0
 8000414:	6083      	str	r3, [r0, #8]
            break;
        }
    }
    return status_;
}
 8000416:	4620      	mov	r0, r4
 8000418:	bd10      	pop	{r4, pc}
static QState USART_off(USART * const me, QEvt const * const e) {
    QState status_;
    switch (e->sig) {
        /* @(/1/0/1/2) */
        case Q_ENTRY_SIG: {
            BSP_ledOff();
 800041a:	f000 f8ab 	bl	8000574 <BSP_ledOff>
            status_ = Q_SUPER(&QHsm_top);
            break;
        }
    }
    return status_;
}
 800041e:	4620      	mov	r0, r4
 8000420:	bd10      	pop	{r4, pc}
            status_ = Q_HANDLED();
            break;
        }
        /* @(/1/0/1/2/0) */
        case TIMEOUT_SIG: {
            status_ = Q_TRAN(&USART_on);
 8000422:	4903      	ldr	r1, [pc, #12]	; (8000430 <USART_off+0x2c>)
 8000424:	6081      	str	r1, [r0, #8]
            status_ = Q_SUPER(&QHsm_top);
            break;
        }
    }
    return status_;
}
 8000426:	4620      	mov	r0, r4
 8000428:	bd10      	pop	{r4, pc}
 800042a:	bf00      	nop
 800042c:	08001efd 	.word	0x08001efd
 8000430:	080003d5 	.word	0x080003d5

08000434 <Q_onAssert>:
/* @(/2/0) .................................................................*/
#include "main.h"

#define BSP_TICKS_PER_SEC 100

void Q_onAssert(char const Q_ROM * const Q_ROM_VAR file, int line) {
 8000434:	4770      	bx	lr
 8000436:	bf00      	nop

08000438 <QF_onStartup>:
}
void QF_onStartup(void) 
{
	BSP_clockInit();
 8000438:	f000 b8b0 	b.w	800059c <BSP_clockInit>

0800043c <QK_onIdle>:
}
void QK_onIdle(void){}
 800043c:	4770      	bx	lr
 800043e:	bf00      	nop

08000440 <QF_onCleanup>:
void QF_onCleanup(void) {}
 8000440:	4770      	bx	lr
 8000442:	bf00      	nop

08000444 <QF_onClockTick>:
void QF_onClockTick(void) {
    QF_TICK((void *)0);
 8000444:	2000      	movs	r0, #0
 8000446:	f001 b8b3 	b.w	80015b0 <QF_tickX_>
 800044a:	bf00      	nop

0800044c <BSP_init>:
#include "main.h"

BSP_init(void)
{
 800044c:	b570      	push	{r4, r5, r6, lr}
	GPIO_InitTypeDef GPIO_InitStructure;
	USART_InitTypeDef USART_InitStructure;

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE); 
 800044e:	2101      	movs	r1, #1
#include "main.h"

BSP_init(void)
{
 8000450:	b088      	sub	sp, #32
	GPIO_InitTypeDef GPIO_InitStructure;
	USART_InitTypeDef USART_InitStructure;

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE); 
 8000452:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000456:	f000 fb39 	bl	8000acc <RCC_APB1PeriphClockCmd>
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 800045a:	2101      	movs	r1, #1
 800045c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000460:	f000 fb18 	bl	8000a94 <RCC_AHBPeriphClockCmd>

  	GPIO_PinAFConfig(GPIOA, GPIO_PinSource2, GPIO_AF_7);    
 8000464:	2102      	movs	r1, #2
 8000466:	2207      	movs	r2, #7
 8000468:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800046c:	f000 ff64 	bl	8001338 <GPIO_PinAFConfig>
	USART_InitStructure.USART_StopBits   = USART_StopBits_1;
	USART_InitStructure.USART_Parity	 = USART_Parity_No;
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
	USART_InitStructure.USART_Mode       = USART_Mode_Rx | USART_Mode_Tx;

	USART_Init(USART2, &USART_InitStructure);
 8000470:	f44f 4588 	mov.w	r5, #17408	; 0x4400

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE); 
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);

  	GPIO_PinAFConfig(GPIOA, GPIO_PinSource2, GPIO_AF_7);    
    GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_7);
 8000474:	2207      	movs	r2, #7
 8000476:	2103      	movs	r1, #3
 8000478:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800047c:	f000 ff5c 	bl	8001338 <GPIO_PinAFConfig>

	GPIO_InitStructure.GPIO_Pin  	= GPIO_Pin_2 | GPIO_Pin_3;
	GPIO_InitStructure.GPIO_Mode 	= GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_OType   = GPIO_OType_PP;
 8000480:	2400      	movs	r4, #0

  	GPIO_PinAFConfig(GPIOA, GPIO_PinSource2, GPIO_AF_7);    
    GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_7);

	GPIO_InitStructure.GPIO_Pin  	= GPIO_Pin_2 | GPIO_Pin_3;
	GPIO_InitStructure.GPIO_Mode 	= GPIO_Mode_AF;
 8000482:	2302      	movs	r3, #2
	GPIO_InitStructure.GPIO_OType   = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd    = GPIO_PuPd_NOPULL;
	GPIO_InitStructure.GPIO_Speed 	= GPIO_Speed_50MHz;
 8000484:	2203      	movs	r2, #3
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);

  	GPIO_PinAFConfig(GPIOA, GPIO_PinSource2, GPIO_AF_7);    
    GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_7);

	GPIO_InitStructure.GPIO_Pin  	= GPIO_Pin_2 | GPIO_Pin_3;
 8000486:	260c      	movs	r6, #12
	GPIO_InitStructure.GPIO_Mode 	= GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_OType   = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd    = GPIO_PuPd_NOPULL;
	GPIO_InitStructure.GPIO_Speed 	= GPIO_Speed_50MHz;
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000488:	4669      	mov	r1, sp
	USART_InitStructure.USART_StopBits   = USART_StopBits_1;
	USART_InitStructure.USART_Parity	 = USART_Parity_No;
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
	USART_InitStructure.USART_Mode       = USART_Mode_Rx | USART_Mode_Tx;

	USART_Init(USART2, &USART_InitStructure);
 800048a:	f2c4 0500 	movt	r5, #16384	; 0x4000
	GPIO_InitStructure.GPIO_Pin  	= GPIO_Pin_2 | GPIO_Pin_3;
	GPIO_InitStructure.GPIO_Mode 	= GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_OType   = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd    = GPIO_PuPd_NOPULL;
	GPIO_InitStructure.GPIO_Speed 	= GPIO_Speed_50MHz;
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 800048e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000

  	GPIO_PinAFConfig(GPIOA, GPIO_PinSource2, GPIO_AF_7);    
    GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_7);

	GPIO_InitStructure.GPIO_Pin  	= GPIO_Pin_2 | GPIO_Pin_3;
	GPIO_InitStructure.GPIO_Mode 	= GPIO_Mode_AF;
 8000492:	f88d 3004 	strb.w	r3, [sp, #4]
	GPIO_InitStructure.GPIO_OType   = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd    = GPIO_PuPd_NOPULL;
	GPIO_InitStructure.GPIO_Speed 	= GPIO_Speed_50MHz;
 8000496:	f88d 2005 	strb.w	r2, [sp, #5]
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);

  	GPIO_PinAFConfig(GPIOA, GPIO_PinSource2, GPIO_AF_7);    
    GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_7);

	GPIO_InitStructure.GPIO_Pin  	= GPIO_Pin_2 | GPIO_Pin_3;
 800049a:	9600      	str	r6, [sp, #0]
	GPIO_InitStructure.GPIO_Mode 	= GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_OType   = GPIO_OType_PP;
 800049c:	f88d 4006 	strb.w	r4, [sp, #6]
	GPIO_InitStructure.GPIO_PuPd    = GPIO_PuPd_NOPULL;
 80004a0:	f88d 4007 	strb.w	r4, [sp, #7]
	GPIO_InitStructure.GPIO_Speed 	= GPIO_Speed_50MHz;
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 80004a4:	f000 fe54 	bl	8001150 <GPIO_Init>
	USART_InitStructure.USART_StopBits   = USART_StopBits_1;
	USART_InitStructure.USART_Parity	 = USART_Parity_No;
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
	USART_InitStructure.USART_Mode       = USART_Mode_Rx | USART_Mode_Tx;

	USART_Init(USART2, &USART_InitStructure);
 80004a8:	a902      	add	r1, sp, #8
 80004aa:	4628      	mov	r0, r5
	GPIO_InitStructure.GPIO_OType   = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd    = GPIO_PuPd_NOPULL;
	GPIO_InitStructure.GPIO_Speed 	= GPIO_Speed_50MHz;
	GPIO_Init(GPIOA, &GPIO_InitStructure);

	USART_InitStructure.USART_BaudRate   = 115200;
 80004ac:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80004b0:	9302      	str	r3, [sp, #8]
	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 80004b2:	9403      	str	r4, [sp, #12]
	USART_InitStructure.USART_StopBits   = USART_StopBits_1;
 80004b4:	9404      	str	r4, [sp, #16]
	USART_InitStructure.USART_Parity	 = USART_Parity_No;
 80004b6:	9405      	str	r4, [sp, #20]
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 80004b8:	9407      	str	r4, [sp, #28]
	USART_InitStructure.USART_Mode       = USART_Mode_Rx | USART_Mode_Tx;
 80004ba:	9606      	str	r6, [sp, #24]

	USART_Init(USART2, &USART_InitStructure);
 80004bc:	f000 fbb6 	bl	8000c2c <USART_Init>
	USART_Cmd(USART2, ENABLE);
 80004c0:	4628      	mov	r0, r5
 80004c2:	2101      	movs	r1, #1
 80004c4:	f000 fc28 	bl	8000d18 <USART_Cmd>
}
 80004c8:	b008      	add	sp, #32
 80004ca:	bd70      	pop	{r4, r5, r6, pc}

080004cc <USART_printf>:

	return string;
}

USART_printf(USART_TypeDef* USARTx, uint8_t *Data, ...)
{
 80004cc:	b40e      	push	{r1, r2, r3}
 80004ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004d0:	b086      	sub	sp, #24
 80004d2:	ab0b      	add	r3, sp, #44	; 0x2c
 80004d4:	4604      	mov	r4, r0
 80004d6:	f853 5b04 	ldr.w	r5, [r3], #4
	int d;
	char buf[16];
	va_list ap;
	va_start(ap, Data);

	while(*Data != 0)
 80004da:	7829      	ldrb	r1, [r5, #0]
{
	const char *s;
	int d;
	char buf[16];
	va_list ap;
	va_start(ap, Data);
 80004dc:	9301      	str	r3, [sp, #4]
	int 	flag = 0;
	char	*ptr = string;  

	if(radix != 0)
	{
		*ptr = 0;
 80004de:	2700      	movs	r7, #0
	int d;
	char buf[16];
	va_list ap;
	va_start(ap, Data);

	while(*Data != 0)
 80004e0:	b191      	cbz	r1, 8000508 <USART_printf+0x3c>
	{
		if( *Data == 0x5c)
 80004e2:	295c      	cmp	r1, #92	; 0x5c
 80004e4:	d02f      	beq.n	8000546 <USART_printf+0x7a>
				default:
					Data++;
					break;
			}
		}
		else if( *Data == '%')
 80004e6:	2925      	cmp	r1, #37	; 0x25
 80004e8:	d128      	bne.n	800053c <USART_printf+0x70>
		{
			switch( *++Data)
 80004ea:	7868      	ldrb	r0, [r5, #1]
 80004ec:	2864      	cmp	r0, #100	; 0x64
 80004ee:	d035      	beq.n	800055c <USART_printf+0x90>
 80004f0:	2873      	cmp	r0, #115	; 0x73
 80004f2:	d00e      	beq.n	8000512 <USART_printf+0x46>
					for(s = buf; *s; s++)
					{
						USART_SendData(USARTx, *s);
						while(USART_GetFlagStatus(USARTx, USART_FLAG_TC) == RESET);
					}
					Data++;
 80004f4:	3502      	adds	r5, #2
					break;
			}
		}

		else USART_SendData(USARTx, *Data++);
		while(USART_GetFlagStatus(USARTx, USART_FLAG_TC) == RESET);
 80004f6:	4620      	mov	r0, r4
 80004f8:	2140      	movs	r1, #64	; 0x40
 80004fa:	f000 fd8f 	bl	800101c <USART_GetFlagStatus>
 80004fe:	2800      	cmp	r0, #0
 8000500:	d0f9      	beq.n	80004f6 <USART_printf+0x2a>
	int d;
	char buf[16];
	va_list ap;
	va_start(ap, Data);

	while(*Data != 0)
 8000502:	7829      	ldrb	r1, [r5, #0]
 8000504:	2900      	cmp	r1, #0
 8000506:	d1ec      	bne.n	80004e2 <USART_printf+0x16>
		}

		else USART_SendData(USARTx, *Data++);
		while(USART_GetFlagStatus(USARTx, USART_FLAG_TC) == RESET);
	}
}
 8000508:	b006      	add	sp, #24
 800050a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800050e:	b003      	add	sp, #12
 8000510:	4770      	bx	lr
		else if( *Data == '%')
		{
			switch( *++Data)
			{
				case 's':
					s = va_arg(ap, const char *);
 8000512:	9a01      	ldr	r2, [sp, #4]
 8000514:	6816      	ldr	r6, [r2, #0]
				
					for(; *s; s++)
 8000516:	7831      	ldrb	r1, [r6, #0]
		else if( *Data == '%')
		{
			switch( *++Data)
			{
				case 's':
					s = va_arg(ap, const char *);
 8000518:	1d13      	adds	r3, r2, #4
 800051a:	9301      	str	r3, [sp, #4]
				
					for(; *s; s++)
 800051c:	2900      	cmp	r1, #0
 800051e:	d0e9      	beq.n	80004f4 <USART_printf+0x28>
					{
						USART_SendData(USARTx, *s);
 8000520:	4620      	mov	r0, r4
 8000522:	f000 fc89 	bl	8000e38 <USART_SendData>
						while(USART_GetFlagStatus(USARTx, USART_FLAG_TC) == RESET);
 8000526:	4620      	mov	r0, r4
 8000528:	2140      	movs	r1, #64	; 0x40
 800052a:	f000 fd77 	bl	800101c <USART_GetFlagStatus>
 800052e:	2800      	cmp	r0, #0
 8000530:	d0f9      	beq.n	8000526 <USART_printf+0x5a>
			switch( *++Data)
			{
				case 's':
					s = va_arg(ap, const char *);
				
					for(; *s; s++)
 8000532:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000536:	2900      	cmp	r1, #0
 8000538:	d1f2      	bne.n	8000520 <USART_printf+0x54>
 800053a:	e7db      	b.n	80004f4 <USART_printf+0x28>
					Data++;
					break;
			}
		}

		else USART_SendData(USARTx, *Data++);
 800053c:	4620      	mov	r0, r4
 800053e:	3501      	adds	r5, #1
 8000540:	f000 fc7a 	bl	8000e38 <USART_SendData>
 8000544:	e7d7      	b.n	80004f6 <USART_printf+0x2a>

	while(*Data != 0)
	{
		if( *Data == 0x5c)
		{
			switch( *++Data)
 8000546:	786a      	ldrb	r2, [r5, #1]
 8000548:	2a6e      	cmp	r2, #110	; 0x6e
 800054a:	d00d      	beq.n	8000568 <USART_printf+0x9c>
 800054c:	2a72      	cmp	r2, #114	; 0x72
 800054e:	d1d1      	bne.n	80004f4 <USART_printf+0x28>
			{
				case 'r':
					USART_SendData(USARTx, 0x0d);
 8000550:	4620      	mov	r0, r4
 8000552:	210d      	movs	r1, #13
 8000554:	f000 fc70 	bl	8000e38 <USART_SendData>
					Data++;
 8000558:	3502      	adds	r5, #2
					break;
 800055a:	e7cc      	b.n	80004f6 <USART_printf+0x2a>
					}
					Data++;
					break;

				case 'd':
					d = va_arg(ap, int);
 800055c:	9901      	ldr	r1, [sp, #4]
	int 	flag = 0;
	char	*ptr = string;  

	if(radix != 0)
	{
		*ptr = 0;
 800055e:	f88d 7008 	strb.w	r7, [sp, #8]
					}
					Data++;
					break;

				case 'd':
					d = va_arg(ap, int);
 8000562:	1d08      	adds	r0, r1, #4
 8000564:	9001      	str	r0, [sp, #4]
 8000566:	e7c5      	b.n	80004f4 <USART_printf+0x28>
					USART_SendData(USARTx, 0x0d);
					Data++;
					break;

				case 'n':
					USART_SendData(USARTx, 0x0a);
 8000568:	4620      	mov	r0, r4
 800056a:	210a      	movs	r1, #10
 800056c:	f000 fc64 	bl	8000e38 <USART_SendData>
					Data++;
 8000570:	3502      	adds	r5, #2
					break;
 8000572:	e7c0      	b.n	80004f6 <USART_printf+0x2a>

08000574 <BSP_ledOff>:
	}
}

void BSP_ledOff(void)
{
	USART_printf(USART2, "\r\nled_off\n\r");
 8000574:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 8000578:	f242 31cc 	movw	r1, #9164	; 0x23cc
 800057c:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000580:	f6c0 0100 	movt	r1, #2048	; 0x800
 8000584:	f7ff bfa2 	b.w	80004cc <USART_printf>

08000588 <BSP_ledOn>:
}

void BSP_ledOn(void)
{
	USART_printf(USART2, "\r\nled_on\n\r");
 8000588:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 800058c:	f242 31d8 	movw	r1, #9176	; 0x23d8
 8000590:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000594:	f6c0 0100 	movt	r1, #2048	; 0x800
 8000598:	f7ff bf98 	b.w	80004cc <USART_printf>

0800059c <BSP_clockInit>:
}	

void BSP_clockInit(void)
{
 800059c:	b500      	push	{lr}
 800059e:	b083      	sub	sp, #12
	NVIC_InitTypeDef NVIC_InitStructure;

	NVIC_InitStructure.NVIC_IRQChannel = SysTick_IRQn;
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 80005a0:	2300      	movs	r3, #0

void BSP_clockInit(void)
{
	NVIC_InitTypeDef NVIC_InitStructure;

	NVIC_InitStructure.NVIC_IRQChannel = SysTick_IRQn;
 80005a2:	22ff      	movs	r2, #255	; 0xff
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80005a4:	2101      	movs	r1, #1
	NVIC_Init(&NVIC_InitStructure);
 80005a6:	a801      	add	r0, sp, #4

void BSP_clockInit(void)
{
	NVIC_InitTypeDef NVIC_InitStructure;

	NVIC_InitStructure.NVIC_IRQChannel = SysTick_IRQn;
 80005a8:	f88d 2004 	strb.w	r2, [sp, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 80005ac:	f88d 3005 	strb.w	r3, [sp, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 80005b0:	f88d 3006 	strb.w	r3, [sp, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80005b4:	f88d 1007 	strb.w	r1, [sp, #7]
	NVIC_Init(&NVIC_InitStructure);
 80005b8:	f000 fee0 	bl	800137c <NVIC_Init>

	SysTick_CLKSourceConfig(SysTick_CLKSource_HCLK);
 80005bc:	2004      	movs	r0, #4
 80005be:	f000 ff35 	bl	800142c <SysTick_CLKSourceConfig>
	SysTick->LOAD = 640000;
 80005c2:	f24e 0010 	movw	r0, #57360	; 0xe010
 80005c6:	f2ce 0000 	movt	r0, #57344	; 0xe000
 80005ca:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 80005ce:	f2c0 0309 	movt	r3, #9
 80005d2:	6043      	str	r3, [r0, #4]
	SysTick->CTRL |= 0x03;
 80005d4:	6802      	ldr	r2, [r0, #0]
 80005d6:	f042 0103 	orr.w	r1, r2, #3
 80005da:	6001      	str	r1, [r0, #0]
}
 80005dc:	b003      	add	sp, #12
 80005de:	bd00      	pop	{pc}
 80005e0:	08002410 	.word	0x08002410
 80005e4:	20000000 	.word	0x20000000
 80005e8:	200000a8 	.word	0x200000a8
 80005ec:	200000ac 	.word	0x200000ac
 80005f0:	2000021c 	.word	0x2000021c

080005f4 <RCC_DeInit>:
 80005f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005f8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80005fc:	681a      	ldr	r2, [r3, #0]
 80005fe:	f042 0001 	orr.w	r0, r2, #1
 8000602:	6018      	str	r0, [r3, #0]
 8000604:	6859      	ldr	r1, [r3, #4]
 8000606:	f401 027f 	and.w	r2, r1, #16711680	; 0xff0000
 800060a:	605a      	str	r2, [r3, #4]
 800060c:	6818      	ldr	r0, [r3, #0]
 800060e:	f020 7184 	bic.w	r1, r0, #17301504	; 0x1080000
 8000612:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8000616:	601a      	str	r2, [r3, #0]
 8000618:	6818      	ldr	r0, [r3, #0]
 800061a:	f420 2180 	bic.w	r1, r0, #262144	; 0x40000
 800061e:	6019      	str	r1, [r3, #0]
 8000620:	685a      	ldr	r2, [r3, #4]
 8000622:	f422 00fe 	bic.w	r0, r2, #8323072	; 0x7f0000
 8000626:	6058      	str	r0, [r3, #4]
 8000628:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800062a:	f021 020f 	bic.w	r2, r1, #15
 800062e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000630:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000632:	f020 21f0 	bic.w	r1, r0, #4026593280	; 0xf000f000
 8000636:	f021 0273 	bic.w	r2, r1, #115	; 0x73
 800063a:	2000      	movs	r0, #0
 800063c:	631a      	str	r2, [r3, #48]	; 0x30
 800063e:	6098      	str	r0, [r3, #8]
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop

08000644 <RCC_HSEConfig>:
 8000644:	f241 0302 	movw	r3, #4098	; 0x1002
 8000648:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800064c:	2200      	movs	r2, #0
 800064e:	701a      	strb	r2, [r3, #0]
 8000650:	7018      	strb	r0, [r3, #0]
 8000652:	4770      	bx	lr

08000654 <RCC_WaitForHSEStartUp>:
 8000654:	b082      	sub	sp, #8
 8000656:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800065a:	2300      	movs	r3, #0
 800065c:	9301      	str	r3, [sp, #4]
 800065e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000662:	6810      	ldr	r0, [r2, #0]
 8000664:	0383      	lsls	r3, r0, #14
 8000666:	d50c      	bpl.n	8000682 <RCC_WaitForHSEStartUp+0x2e>
 8000668:	9a01      	ldr	r2, [sp, #4]
 800066a:	1c51      	adds	r1, r2, #1
 800066c:	9101      	str	r1, [sp, #4]
 800066e:	9b01      	ldr	r3, [sp, #4]
 8000670:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000674:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000678:	6818      	ldr	r0, [r3, #0]
 800067a:	f3c0 4040 	ubfx	r0, r0, #17, #1
 800067e:	b002      	add	sp, #8
 8000680:	4770      	bx	lr
 8000682:	9901      	ldr	r1, [sp, #4]
 8000684:	1c4b      	adds	r3, r1, #1
 8000686:	9301      	str	r3, [sp, #4]
 8000688:	9801      	ldr	r0, [sp, #4]
 800068a:	f5b0 6fa0 	cmp.w	r0, #1280	; 0x500
 800068e:	d1e8      	bne.n	8000662 <RCC_WaitForHSEStartUp+0xe>
 8000690:	e7ee      	b.n	8000670 <RCC_WaitForHSEStartUp+0x1c>
 8000692:	bf00      	nop

08000694 <RCC_AdjustHSICalibrationValue>:
 8000694:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000698:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800069c:	681a      	ldr	r2, [r3, #0]
 800069e:	f022 01f8 	bic.w	r1, r2, #248	; 0xf8
 80006a2:	ea41 00c0 	orr.w	r0, r1, r0, lsl #3
 80006a6:	6018      	str	r0, [r3, #0]
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <RCC_HSICmd>:
 80006ac:	2300      	movs	r3, #0
 80006ae:	f2c4 2342 	movt	r3, #16962	; 0x4242
 80006b2:	6018      	str	r0, [r3, #0]
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop

080006b8 <RCC_LSEConfig>:
 80006b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006bc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80006c0:	6a1a      	ldr	r2, [r3, #32]
 80006c2:	f022 0101 	bic.w	r1, r2, #1
 80006c6:	6219      	str	r1, [r3, #32]
 80006c8:	6a1a      	ldr	r2, [r3, #32]
 80006ca:	f022 0104 	bic.w	r1, r2, #4
 80006ce:	6219      	str	r1, [r3, #32]
 80006d0:	6a1a      	ldr	r2, [r3, #32]
 80006d2:	4310      	orrs	r0, r2
 80006d4:	6218      	str	r0, [r3, #32]
 80006d6:	4770      	bx	lr

080006d8 <RCC_LSEDriveConfig>:
 80006d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006dc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80006e0:	6a1a      	ldr	r2, [r3, #32]
 80006e2:	f022 0118 	bic.w	r1, r2, #24
 80006e6:	6219      	str	r1, [r3, #32]
 80006e8:	6a1a      	ldr	r2, [r3, #32]
 80006ea:	4310      	orrs	r0, r2
 80006ec:	6218      	str	r0, [r3, #32]
 80006ee:	4770      	bx	lr

080006f0 <RCC_LSICmd>:
 80006f0:	f44f 6390 	mov.w	r3, #1152	; 0x480
 80006f4:	f2c4 2342 	movt	r3, #16962	; 0x4242
 80006f8:	6018      	str	r0, [r3, #0]
 80006fa:	4770      	bx	lr

080006fc <RCC_PLLConfig>:
 80006fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000700:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000704:	685a      	ldr	r2, [r3, #4]
 8000706:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 800070a:	605a      	str	r2, [r3, #4]
 800070c:	685a      	ldr	r2, [r3, #4]
 800070e:	4310      	orrs	r0, r2
 8000710:	4301      	orrs	r1, r0
 8000712:	6059      	str	r1, [r3, #4]
 8000714:	4770      	bx	lr
 8000716:	bf00      	nop

08000718 <RCC_PLLCmd>:
 8000718:	2360      	movs	r3, #96	; 0x60
 800071a:	f2c4 2342 	movt	r3, #16962	; 0x4242
 800071e:	6018      	str	r0, [r3, #0]
 8000720:	4770      	bx	lr
 8000722:	bf00      	nop

08000724 <RCC_PREDIV1Config>:
 8000724:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000728:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800072c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800072e:	f022 010f 	bic.w	r1, r2, #15
 8000732:	4308      	orrs	r0, r1
 8000734:	62d8      	str	r0, [r3, #44]	; 0x2c
 8000736:	4770      	bx	lr

08000738 <RCC_ClockSecuritySystemCmd>:
 8000738:	234c      	movs	r3, #76	; 0x4c
 800073a:	f2c4 2342 	movt	r3, #16962	; 0x4242
 800073e:	6018      	str	r0, [r3, #0]
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop

08000744 <RCC_MCOConfig>:
 8000744:	f241 0307 	movw	r3, #4103	; 0x1007
 8000748:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800074c:	7018      	strb	r0, [r3, #0]
 800074e:	4770      	bx	lr

08000750 <RCC_SYSCLKConfig>:
 8000750:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000754:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000758:	685a      	ldr	r2, [r3, #4]
 800075a:	f022 0103 	bic.w	r1, r2, #3
 800075e:	4308      	orrs	r0, r1
 8000760:	6058      	str	r0, [r3, #4]
 8000762:	4770      	bx	lr

08000764 <RCC_GetSYSCLKSource>:
 8000764:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000768:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800076c:	6858      	ldr	r0, [r3, #4]
 800076e:	f000 000c 	and.w	r0, r0, #12
 8000772:	4770      	bx	lr

08000774 <RCC_HCLKConfig>:
 8000774:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000778:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800077c:	685a      	ldr	r2, [r3, #4]
 800077e:	f022 01f0 	bic.w	r1, r2, #240	; 0xf0
 8000782:	4308      	orrs	r0, r1
 8000784:	6058      	str	r0, [r3, #4]
 8000786:	4770      	bx	lr

08000788 <RCC_PCLK1Config>:
 8000788:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800078c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000790:	685a      	ldr	r2, [r3, #4]
 8000792:	f422 61e0 	bic.w	r1, r2, #1792	; 0x700
 8000796:	4308      	orrs	r0, r1
 8000798:	6058      	str	r0, [r3, #4]
 800079a:	4770      	bx	lr

0800079c <RCC_PCLK2Config>:
 800079c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007a0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80007a4:	685a      	ldr	r2, [r3, #4]
 80007a6:	f422 5160 	bic.w	r1, r2, #14336	; 0x3800
 80007aa:	ea41 00c0 	orr.w	r0, r1, r0, lsl #3
 80007ae:	6058      	str	r0, [r3, #4]
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop

080007b4 <RCC_ADCCLKConfig>:
 80007b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007b8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80007bc:	685a      	ldr	r2, [r3, #4]
 80007be:	f422 4140 	bic.w	r1, r2, #49152	; 0xc000
 80007c2:	6059      	str	r1, [r3, #4]
 80007c4:	685a      	ldr	r2, [r3, #4]
 80007c6:	4310      	orrs	r0, r2
 80007c8:	6058      	str	r0, [r3, #4]
 80007ca:	4770      	bx	lr

080007cc <RCC_SDADCCLKConfig>:
 80007cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007d0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80007d4:	685a      	ldr	r2, [r3, #4]
 80007d6:	f022 4178 	bic.w	r1, r2, #4160749568	; 0xf8000000
 80007da:	6059      	str	r1, [r3, #4]
 80007dc:	685a      	ldr	r2, [r3, #4]
 80007de:	4310      	orrs	r0, r2
 80007e0:	6058      	str	r0, [r3, #4]
 80007e2:	4770      	bx	lr

080007e4 <RCC_CECCLKConfig>:
 80007e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007e8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80007ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007ee:	f022 0140 	bic.w	r1, r2, #64	; 0x40
 80007f2:	6319      	str	r1, [r3, #48]	; 0x30
 80007f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007f6:	4310      	orrs	r0, r2
 80007f8:	6318      	str	r0, [r3, #48]	; 0x30
 80007fa:	4770      	bx	lr

080007fc <RCC_I2CCLKConfig>:
 80007fc:	0f03      	lsrs	r3, r0, #28
 80007fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000802:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000806:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800080a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800080c:	f2c4 0102 	movt	r1, #16386	; 0x4002
 8000810:	bf0c      	ite	eq
 8000812:	f022 0210 	biceq.w	r2, r2, #16
 8000816:	f022 0220 	bicne.w	r2, r2, #32
 800081a:	631a      	str	r2, [r3, #48]	; 0x30
 800081c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 800081e:	4318      	orrs	r0, r3
 8000820:	6308      	str	r0, [r1, #48]	; 0x30
 8000822:	4770      	bx	lr

08000824 <RCC_USARTCLKConfig>:
 8000824:	0f03      	lsrs	r3, r0, #28
 8000826:	2b02      	cmp	r3, #2
 8000828:	d01d      	beq.n	8000866 <RCC_USARTCLKConfig+0x42>
 800082a:	2b03      	cmp	r3, #3
 800082c:	d012      	beq.n	8000854 <RCC_USARTCLKConfig+0x30>
 800082e:	2b01      	cmp	r3, #1
 8000830:	d007      	beq.n	8000842 <RCC_USARTCLKConfig+0x1e>
 8000832:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000836:	f2c4 0102 	movt	r1, #16386	; 0x4002
 800083a:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800083c:	4310      	orrs	r0, r2
 800083e:	6308      	str	r0, [r1, #48]	; 0x30
 8000840:	4770      	bx	lr
 8000842:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000846:	f2c4 0102 	movt	r1, #16386	; 0x4002
 800084a:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800084c:	f022 0303 	bic.w	r3, r2, #3
 8000850:	630b      	str	r3, [r1, #48]	; 0x30
 8000852:	e7ee      	b.n	8000832 <RCC_USARTCLKConfig+0xe>
 8000854:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000858:	f2c4 0102 	movt	r1, #16386	; 0x4002
 800085c:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800085e:	f422 2340 	bic.w	r3, r2, #786432	; 0xc0000
 8000862:	630b      	str	r3, [r1, #48]	; 0x30
 8000864:	e7e5      	b.n	8000832 <RCC_USARTCLKConfig+0xe>
 8000866:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800086a:	f2c4 0102 	movt	r1, #16386	; 0x4002
 800086e:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8000870:	f422 3340 	bic.w	r3, r2, #196608	; 0x30000
 8000874:	630b      	str	r3, [r1, #48]	; 0x30
 8000876:	e7dc      	b.n	8000832 <RCC_USARTCLKConfig+0xe>

08000878 <RCC_USBCLKConfig>:
 8000878:	23d8      	movs	r3, #216	; 0xd8
 800087a:	f2c4 2342 	movt	r3, #16962	; 0x4242
 800087e:	6018      	str	r0, [r3, #0]
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop

08000884 <RCC_GetClocksFreq>:
 8000884:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000888:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800088c:	b470      	push	{r4, r5, r6}
 800088e:	685a      	ldr	r2, [r3, #4]
 8000890:	f002 010c 	and.w	r1, r2, #12
 8000894:	2904      	cmp	r1, #4
 8000896:	d002      	beq.n	800089e <RCC_GetClocksFreq+0x1a>
 8000898:	2908      	cmp	r1, #8
 800089a:	f000 80b5 	beq.w	8000a08 <RCC_GetClocksFreq+0x184>
 800089e:	f44f 5190 	mov.w	r1, #4608	; 0x1200
 80008a2:	f2c0 017a 	movt	r1, #122	; 0x7a
 80008a6:	6001      	str	r1, [r0, #0]
 80008a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008ac:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80008b0:	4a6d      	ldr	r2, [pc, #436]	; (8000a68 <RCC_GetClocksFreq+0x1e4>)
 80008b2:	685d      	ldr	r5, [r3, #4]
 80008b4:	f3c5 1403 	ubfx	r4, r5, #4, #4
 80008b8:	5d16      	ldrb	r6, [r2, r4]
 80008ba:	fa21 f406 	lsr.w	r4, r1, r6
 80008be:	6044      	str	r4, [r0, #4]
 80008c0:	685d      	ldr	r5, [r3, #4]
 80008c2:	f3c5 2602 	ubfx	r6, r5, #8, #3
 80008c6:	5d95      	ldrb	r5, [r2, r6]
 80008c8:	fa24 f505 	lsr.w	r5, r4, r5
 80008cc:	6085      	str	r5, [r0, #8]
 80008ce:	685e      	ldr	r6, [r3, #4]
 80008d0:	f3c6 26c2 	ubfx	r6, r6, #11, #3
 80008d4:	5d96      	ldrb	r6, [r2, r6]
 80008d6:	fa24 f406 	lsr.w	r4, r4, r6
 80008da:	60c4      	str	r4, [r0, #12]
 80008dc:	685e      	ldr	r6, [r3, #4]
 80008de:	f3c6 3681 	ubfx	r6, r6, #14, #2
 80008e2:	1996      	adds	r6, r2, r6
 80008e4:	7c36      	ldrb	r6, [r6, #16]
 80008e6:	fbb4 f6f6 	udiv	r6, r4, r6
 80008ea:	6106      	str	r6, [r0, #16]
 80008ec:	685e      	ldr	r6, [r3, #4]
 80008ee:	f3c6 66c3 	ubfx	r6, r6, #27, #4
 80008f2:	1992      	adds	r2, r2, r6
 80008f4:	7d12      	ldrb	r2, [r2, #20]
 80008f6:	fbb1 f2f2 	udiv	r2, r1, r2
 80008fa:	6142      	str	r2, [r0, #20]
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	065a      	lsls	r2, r3, #25
 8000900:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000904:	bf54      	ite	pl
 8000906:	f248 0212 	movwpl	r2, #32786	; 0x8012
 800090a:	f44f 4200 	movmi.w	r2, #32768	; 0x8000
 800090e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000912:	6182      	str	r2, [r0, #24]
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	06da      	lsls	r2, r3, #27
 8000918:	bf58      	it	pl
 800091a:	f44f 5390 	movpl.w	r3, #4608	; 0x1200
 800091e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000922:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000926:	bf5a      	itte	pl
 8000928:	f2c0 037a 	movtpl	r3, #122	; 0x7a
 800092c:	61c3      	strpl	r3, [r0, #28]
 800092e:	61c1      	strmi	r1, [r0, #28]
 8000930:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000932:	069a      	lsls	r2, r3, #26
 8000934:	bf58      	it	pl
 8000936:	f44f 5290 	movpl.w	r2, #4608	; 0x1200
 800093a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800093e:	bf58      	it	pl
 8000940:	f2c0 027a 	movtpl	r2, #122	; 0x7a
 8000944:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000948:	bf54      	ite	pl
 800094a:	6202      	strpl	r2, [r0, #32]
 800094c:	6201      	strmi	r1, [r0, #32]
 800094e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000950:	0792      	lsls	r2, r2, #30
 8000952:	d12a      	bne.n	80009aa <RCC_GetClocksFreq+0x126>
 8000954:	6244      	str	r4, [r0, #36]	; 0x24
 8000956:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800095a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800095e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000960:	f412 3f40 	tst.w	r2, #196608	; 0x30000
 8000964:	d136      	bne.n	80009d4 <RCC_GetClocksFreq+0x150>
 8000966:	6285      	str	r5, [r0, #40]	; 0x28
 8000968:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800096c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000970:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000972:	f412 2f40 	tst.w	r2, #786432	; 0xc0000
 8000976:	d045      	beq.n	8000a04 <RCC_GetClocksFreq+0x180>
 8000978:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800097a:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 800097e:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 8000982:	d062      	beq.n	8000a4a <RCC_GetClocksFreq+0x1c6>
 8000984:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000986:	f401 2240 	and.w	r2, r1, #786432	; 0xc0000
 800098a:	f5b2 2f00 	cmp.w	r2, #524288	; 0x80000
 800098e:	d066      	beq.n	8000a5e <RCC_GetClocksFreq+0x1da>
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	f403 2140 	and.w	r1, r3, #786432	; 0xc0000
 8000996:	f5b1 2f40 	cmp.w	r1, #786432	; 0xc0000
 800099a:	d104      	bne.n	80009a6 <RCC_GetClocksFreq+0x122>
 800099c:	f44f 5290 	mov.w	r2, #4608	; 0x1200
 80009a0:	f2c0 027a 	movt	r2, #122	; 0x7a
 80009a4:	62c2      	str	r2, [r0, #44]	; 0x2c
 80009a6:	bc70      	pop	{r4, r5, r6}
 80009a8:	4770      	bx	lr
 80009aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80009ac:	f002 0203 	and.w	r2, r2, #3
 80009b0:	2a01      	cmp	r2, #1
 80009b2:	d03a      	beq.n	8000a2a <RCC_GetClocksFreq+0x1a6>
 80009b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80009b6:	f002 0203 	and.w	r2, r2, #3
 80009ba:	2a02      	cmp	r2, #2
 80009bc:	d047      	beq.n	8000a4e <RCC_GetClocksFreq+0x1ca>
 80009be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c0:	f003 0203 	and.w	r2, r3, #3
 80009c4:	2a03      	cmp	r2, #3
 80009c6:	d1c6      	bne.n	8000956 <RCC_GetClocksFreq+0xd2>
 80009c8:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 80009cc:	f2c0 037a 	movt	r3, #122	; 0x7a
 80009d0:	6243      	str	r3, [r0, #36]	; 0x24
 80009d2:	e7c0      	b.n	8000956 <RCC_GetClocksFreq+0xd2>
 80009d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80009d6:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 80009da:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80009de:	d022      	beq.n	8000a26 <RCC_GetClocksFreq+0x1a2>
 80009e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80009e2:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 80009e6:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 80009ea:	d034      	beq.n	8000a56 <RCC_GetClocksFreq+0x1d2>
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80009f2:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
 80009f6:	d1b7      	bne.n	8000968 <RCC_GetClocksFreq+0xe4>
 80009f8:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 80009fc:	f2c0 037a 	movt	r3, #122	; 0x7a
 8000a00:	6283      	str	r3, [r0, #40]	; 0x28
 8000a02:	e7b1      	b.n	8000968 <RCC_GetClocksFreq+0xe4>
 8000a04:	62c5      	str	r5, [r0, #44]	; 0x2c
 8000a06:	e7ce      	b.n	80009a6 <RCC_GetClocksFreq+0x122>
 8000a08:	685d      	ldr	r5, [r3, #4]
 8000a0a:	685c      	ldr	r4, [r3, #4]
 8000a0c:	f3c5 4683 	ubfx	r6, r5, #18, #4
 8000a10:	1cb2      	adds	r2, r6, #2
 8000a12:	03e1      	lsls	r1, r4, #15
 8000a14:	d40b      	bmi.n	8000a2e <RCC_GetClocksFreq+0x1aa>
 8000a16:	f44f 6610 	mov.w	r6, #2304	; 0x900
 8000a1a:	f2c0 063d 	movt	r6, #61	; 0x3d
 8000a1e:	fb06 f102 	mul.w	r1, r6, r2
 8000a22:	6001      	str	r1, [r0, #0]
 8000a24:	e740      	b.n	80008a8 <RCC_GetClocksFreq+0x24>
 8000a26:	6281      	str	r1, [r0, #40]	; 0x28
 8000a28:	e79e      	b.n	8000968 <RCC_GetClocksFreq+0xe4>
 8000a2a:	6241      	str	r1, [r0, #36]	; 0x24
 8000a2c:	e793      	b.n	8000956 <RCC_GetClocksFreq+0xd2>
 8000a2e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000a30:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8000a34:	f001 050f 	and.w	r5, r1, #15
 8000a38:	1c6c      	adds	r4, r5, #1
 8000a3a:	f2c0 037a 	movt	r3, #122	; 0x7a
 8000a3e:	fbb3 f1f4 	udiv	r1, r3, r4
 8000a42:	fb02 f101 	mul.w	r1, r2, r1
 8000a46:	6001      	str	r1, [r0, #0]
 8000a48:	e72e      	b.n	80008a8 <RCC_GetClocksFreq+0x24>
 8000a4a:	62c1      	str	r1, [r0, #44]	; 0x2c
 8000a4c:	e7ab      	b.n	80009a6 <RCC_GetClocksFreq+0x122>
 8000a4e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000a52:	6242      	str	r2, [r0, #36]	; 0x24
 8000a54:	e77f      	b.n	8000956 <RCC_GetClocksFreq+0xd2>
 8000a56:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000a5a:	6282      	str	r2, [r0, #40]	; 0x28
 8000a5c:	e784      	b.n	8000968 <RCC_GetClocksFreq+0xe4>
 8000a5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a62:	62c3      	str	r3, [r0, #44]	; 0x2c
 8000a64:	e79f      	b.n	80009a6 <RCC_GetClocksFreq+0x122>
 8000a66:	bf00      	nop
 8000a68:	2000001c 	.word	0x2000001c

08000a6c <RCC_RTCCLKConfig>:
 8000a6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a70:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000a74:	6a1a      	ldr	r2, [r3, #32]
 8000a76:	4310      	orrs	r0, r2
 8000a78:	6218      	str	r0, [r3, #32]
 8000a7a:	4770      	bx	lr

08000a7c <RCC_RTCCLKCmd>:
 8000a7c:	f240 433c 	movw	r3, #1084	; 0x43c
 8000a80:	f2c4 2342 	movt	r3, #16962	; 0x4242
 8000a84:	6018      	str	r0, [r3, #0]
 8000a86:	4770      	bx	lr

08000a88 <RCC_BackupResetCmd>:
 8000a88:	f44f 6388 	mov.w	r3, #1088	; 0x440
 8000a8c:	f2c4 2342 	movt	r3, #16962	; 0x4242
 8000a90:	6018      	str	r0, [r3, #0]
 8000a92:	4770      	bx	lr

08000a94 <RCC_AHBPeriphClockCmd>:
 8000a94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a98:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000a9c:	695a      	ldr	r2, [r3, #20]
 8000a9e:	b919      	cbnz	r1, 8000aa8 <RCC_AHBPeriphClockCmd+0x14>
 8000aa0:	ea22 0000 	bic.w	r0, r2, r0
 8000aa4:	6158      	str	r0, [r3, #20]
 8000aa6:	4770      	bx	lr
 8000aa8:	4310      	orrs	r0, r2
 8000aaa:	6158      	str	r0, [r3, #20]
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop

08000ab0 <RCC_APB2PeriphClockCmd>:
 8000ab0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ab4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000ab8:	699a      	ldr	r2, [r3, #24]
 8000aba:	b919      	cbnz	r1, 8000ac4 <RCC_APB2PeriphClockCmd+0x14>
 8000abc:	ea22 0000 	bic.w	r0, r2, r0
 8000ac0:	6198      	str	r0, [r3, #24]
 8000ac2:	4770      	bx	lr
 8000ac4:	4310      	orrs	r0, r2
 8000ac6:	6198      	str	r0, [r3, #24]
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <RCC_APB1PeriphClockCmd>:
 8000acc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ad0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000ad4:	69da      	ldr	r2, [r3, #28]
 8000ad6:	b919      	cbnz	r1, 8000ae0 <RCC_APB1PeriphClockCmd+0x14>
 8000ad8:	ea22 0000 	bic.w	r0, r2, r0
 8000adc:	61d8      	str	r0, [r3, #28]
 8000ade:	4770      	bx	lr
 8000ae0:	4310      	orrs	r0, r2
 8000ae2:	61d8      	str	r0, [r3, #28]
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <RCC_AHBPeriphResetCmd>:
 8000ae8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aec:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000af0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000af2:	b919      	cbnz	r1, 8000afc <RCC_AHBPeriphResetCmd+0x14>
 8000af4:	ea22 0000 	bic.w	r0, r2, r0
 8000af8:	6298      	str	r0, [r3, #40]	; 0x28
 8000afa:	4770      	bx	lr
 8000afc:	4310      	orrs	r0, r2
 8000afe:	6298      	str	r0, [r3, #40]	; 0x28
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop

08000b04 <RCC_APB2PeriphResetCmd>:
 8000b04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b08:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000b0c:	68da      	ldr	r2, [r3, #12]
 8000b0e:	b919      	cbnz	r1, 8000b18 <RCC_APB2PeriphResetCmd+0x14>
 8000b10:	ea22 0000 	bic.w	r0, r2, r0
 8000b14:	60d8      	str	r0, [r3, #12]
 8000b16:	4770      	bx	lr
 8000b18:	4310      	orrs	r0, r2
 8000b1a:	60d8      	str	r0, [r3, #12]
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop

08000b20 <RCC_APB1PeriphResetCmd>:
 8000b20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b24:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000b28:	691a      	ldr	r2, [r3, #16]
 8000b2a:	b919      	cbnz	r1, 8000b34 <RCC_APB1PeriphResetCmd+0x14>
 8000b2c:	ea22 0000 	bic.w	r0, r2, r0
 8000b30:	6118      	str	r0, [r3, #16]
 8000b32:	4770      	bx	lr
 8000b34:	4310      	orrs	r0, r2
 8000b36:	6118      	str	r0, [r3, #16]
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop

08000b3c <RCC_ITConfig>:
 8000b3c:	f241 0309 	movw	r3, #4105	; 0x1009
 8000b40:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000b44:	781a      	ldrb	r2, [r3, #0]
 8000b46:	b919      	cbnz	r1, 8000b50 <RCC_ITConfig+0x14>
 8000b48:	ea22 0000 	bic.w	r0, r2, r0
 8000b4c:	7018      	strb	r0, [r3, #0]
 8000b4e:	4770      	bx	lr
 8000b50:	4310      	orrs	r0, r2
 8000b52:	7018      	strb	r0, [r3, #0]
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <RCC_GetFlagStatus>:
 8000b58:	0943      	lsrs	r3, r0, #5
 8000b5a:	d10b      	bne.n	8000b74 <RCC_GetFlagStatus+0x1c>
 8000b5c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b60:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000b64:	6811      	ldr	r1, [r2, #0]
 8000b66:	f000 001f 	and.w	r0, r0, #31
 8000b6a:	fa21 f300 	lsr.w	r3, r1, r0
 8000b6e:	f003 0001 	and.w	r0, r3, #1
 8000b72:	4770      	bx	lr
 8000b74:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b78:	f2c4 0102 	movt	r1, #16386	; 0x4002
 8000b7c:	2b01      	cmp	r3, #1
 8000b7e:	bf0c      	ite	eq
 8000b80:	6a09      	ldreq	r1, [r1, #32]
 8000b82:	6a49      	ldrne	r1, [r1, #36]	; 0x24
 8000b84:	e7ef      	b.n	8000b66 <RCC_GetFlagStatus+0xe>
 8000b86:	bf00      	nop

08000b88 <RCC_ClearFlag>:
 8000b88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b8c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000b90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000b92:	f042 7080 	orr.w	r0, r2, #16777216	; 0x1000000
 8000b96:	6258      	str	r0, [r3, #36]	; 0x24
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop

08000b9c <RCC_GetITStatus>:
 8000b9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ba0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000ba4:	6899      	ldr	r1, [r3, #8]
 8000ba6:	4208      	tst	r0, r1
 8000ba8:	bf0c      	ite	eq
 8000baa:	2000      	moveq	r0, #0
 8000bac:	2001      	movne	r0, #1
 8000bae:	4770      	bx	lr

08000bb0 <RCC_ClearITPendingBit>:
 8000bb0:	f241 030a 	movw	r3, #4106	; 0x100a
 8000bb4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000bb8:	7018      	strb	r0, [r3, #0]
 8000bba:	4770      	bx	lr

08000bbc <USART_DeInit>:
 8000bbc:	b508      	push	{r3, lr}
 8000bbe:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000bc2:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000bc6:	4298      	cmp	r0, r3
 8000bc8:	d018      	beq.n	8000bfc <USART_DeInit+0x40>
 8000bca:	f44f 4188 	mov.w	r1, #17408	; 0x4400
 8000bce:	f2c4 0100 	movt	r1, #16384	; 0x4000
 8000bd2:	4288      	cmp	r0, r1
 8000bd4:	d01e      	beq.n	8000c14 <USART_DeInit+0x58>
 8000bd6:	f44f 4290 	mov.w	r2, #18432	; 0x4800
 8000bda:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8000bde:	4290      	cmp	r0, r2
 8000be0:	d000      	beq.n	8000be4 <USART_DeInit+0x28>
 8000be2:	bd08      	pop	{r3, pc}
 8000be4:	2101      	movs	r1, #1
 8000be6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000bea:	f7ff ff99 	bl	8000b20 <RCC_APB1PeriphResetCmd>
 8000bee:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000bf8:	f7ff bf92 	b.w	8000b20 <RCC_APB1PeriphResetCmd>
 8000bfc:	2101      	movs	r1, #1
 8000bfe:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000c02:	f7ff ff7f 	bl	8000b04 <RCC_APB2PeriphResetCmd>
 8000c06:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000c10:	f7ff bf78 	b.w	8000b04 <RCC_APB2PeriphResetCmd>
 8000c14:	2101      	movs	r1, #1
 8000c16:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000c1a:	f7ff ff81 	bl	8000b20 <RCC_APB1PeriphResetCmd>
 8000c1e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000c22:	2100      	movs	r1, #0
 8000c24:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000c28:	f7ff bf7a 	b.w	8000b20 <RCC_APB1PeriphResetCmd>

08000c2c <USART_Init>:
 8000c2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c2e:	6807      	ldr	r7, [r0, #0]
 8000c30:	688e      	ldr	r6, [r1, #8]
 8000c32:	4604      	mov	r4, r0
 8000c34:	460d      	mov	r5, r1
 8000c36:	f027 0701 	bic.w	r7, r7, #1
 8000c3a:	68c8      	ldr	r0, [r1, #12]
 8000c3c:	692a      	ldr	r2, [r5, #16]
 8000c3e:	6849      	ldr	r1, [r1, #4]
 8000c40:	696b      	ldr	r3, [r5, #20]
 8000c42:	6027      	str	r7, [r4, #0]
 8000c44:	6867      	ldr	r7, [r4, #4]
 8000c46:	f427 5740 	bic.w	r7, r7, #12288	; 0x3000
 8000c4a:	433e      	orrs	r6, r7
 8000c4c:	6066      	str	r6, [r4, #4]
 8000c4e:	6826      	ldr	r6, [r4, #0]
 8000c50:	4308      	orrs	r0, r1
 8000c52:	f426 51b0 	bic.w	r1, r6, #5632	; 0x1600
 8000c56:	f021 060c 	bic.w	r6, r1, #12
 8000c5a:	4302      	orrs	r2, r0
 8000c5c:	4332      	orrs	r2, r6
 8000c5e:	6022      	str	r2, [r4, #0]
 8000c60:	68a0      	ldr	r0, [r4, #8]
 8000c62:	f420 7140 	bic.w	r1, r0, #768	; 0x300
 8000c66:	b08d      	sub	sp, #52	; 0x34
 8000c68:	430b      	orrs	r3, r1
 8000c6a:	60a3      	str	r3, [r4, #8]
 8000c6c:	4668      	mov	r0, sp
 8000c6e:	f7ff fe09 	bl	8000884 <RCC_GetClocksFreq>
 8000c72:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000c76:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8000c7a:	4294      	cmp	r4, r2
 8000c7c:	d027      	beq.n	8000cce <USART_Init+0xa2>
 8000c7e:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 8000c82:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000c86:	4284      	cmp	r4, r0
 8000c88:	bf0c      	ite	eq
 8000c8a:	990a      	ldreq	r1, [sp, #40]	; 0x28
 8000c8c:	990b      	ldrne	r1, [sp, #44]	; 0x2c
 8000c8e:	6823      	ldr	r3, [r4, #0]
 8000c90:	682a      	ldr	r2, [r5, #0]
 8000c92:	0418      	lsls	r0, r3, #16
 8000c94:	d516      	bpl.n	8000cc4 <USART_Init+0x98>
 8000c96:	0048      	lsls	r0, r1, #1
 8000c98:	fbb0 f3f2 	udiv	r3, r0, r2
 8000c9c:	fb02 0113 	mls	r1, r2, r3, r0
 8000ca0:	ebb1 0f52 	cmp.w	r1, r2, lsr #1
 8000ca4:	6822      	ldr	r2, [r4, #0]
 8000ca6:	bf28      	it	cs
 8000ca8:	3301      	addcs	r3, #1
 8000caa:	0412      	lsls	r2, r2, #16
 8000cac:	d506      	bpl.n	8000cbc <USART_Init+0x90>
 8000cae:	f64f 70f0 	movw	r0, #65520	; 0xfff0
 8000cb2:	f3c3 0142 	ubfx	r1, r3, #1, #3
 8000cb6:	4018      	ands	r0, r3
 8000cb8:	ea41 0300 	orr.w	r3, r1, r0
 8000cbc:	b29a      	uxth	r2, r3
 8000cbe:	81a2      	strh	r2, [r4, #12]
 8000cc0:	b00d      	add	sp, #52	; 0x34
 8000cc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cc4:	fbb1 f3f2 	udiv	r3, r1, r2
 8000cc8:	fb02 1113 	mls	r1, r2, r3, r1
 8000ccc:	e7e8      	b.n	8000ca0 <USART_Init+0x74>
 8000cce:	9909      	ldr	r1, [sp, #36]	; 0x24
 8000cd0:	e7dd      	b.n	8000c8e <USART_Init+0x62>
 8000cd2:	bf00      	nop

08000cd4 <USART_StructInit>:
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000cda:	e880 000c 	stmia.w	r0, {r2, r3}
 8000cde:	220c      	movs	r2, #12
 8000ce0:	6083      	str	r3, [r0, #8]
 8000ce2:	60c3      	str	r3, [r0, #12]
 8000ce4:	6102      	str	r2, [r0, #16]
 8000ce6:	6143      	str	r3, [r0, #20]
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop

08000cec <USART_ClockInit>:
 8000cec:	b430      	push	{r4, r5}
 8000cee:	e891 0028 	ldmia.w	r1, {r3, r5}
 8000cf2:	688c      	ldr	r4, [r1, #8]
 8000cf4:	6842      	ldr	r2, [r0, #4]
 8000cf6:	68c9      	ldr	r1, [r1, #12]
 8000cf8:	432b      	orrs	r3, r5
 8000cfa:	4323      	orrs	r3, r4
 8000cfc:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8000d00:	430b      	orrs	r3, r1
 8000d02:	4313      	orrs	r3, r2
 8000d04:	6043      	str	r3, [r0, #4]
 8000d06:	bc30      	pop	{r4, r5}
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop

08000d0c <USART_ClockStructInit>:
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	6003      	str	r3, [r0, #0]
 8000d10:	6043      	str	r3, [r0, #4]
 8000d12:	6083      	str	r3, [r0, #8]
 8000d14:	60c3      	str	r3, [r0, #12]
 8000d16:	4770      	bx	lr

08000d18 <USART_Cmd>:
 8000d18:	6803      	ldr	r3, [r0, #0]
 8000d1a:	b919      	cbnz	r1, 8000d24 <USART_Cmd+0xc>
 8000d1c:	f023 0101 	bic.w	r1, r3, #1
 8000d20:	6001      	str	r1, [r0, #0]
 8000d22:	4770      	bx	lr
 8000d24:	f043 0201 	orr.w	r2, r3, #1
 8000d28:	6002      	str	r2, [r0, #0]
 8000d2a:	4770      	bx	lr

08000d2c <USART_DirectionModeCmd>:
 8000d2c:	6803      	ldr	r3, [r0, #0]
 8000d2e:	b91a      	cbnz	r2, 8000d38 <USART_DirectionModeCmd+0xc>
 8000d30:	ea23 0101 	bic.w	r1, r3, r1
 8000d34:	6001      	str	r1, [r0, #0]
 8000d36:	4770      	bx	lr
 8000d38:	4319      	orrs	r1, r3
 8000d3a:	6001      	str	r1, [r0, #0]
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop

08000d40 <USART_OverSampling8Cmd>:
 8000d40:	6803      	ldr	r3, [r0, #0]
 8000d42:	b919      	cbnz	r1, 8000d4c <USART_OverSampling8Cmd+0xc>
 8000d44:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8000d48:	6001      	str	r1, [r0, #0]
 8000d4a:	4770      	bx	lr
 8000d4c:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8000d50:	6002      	str	r2, [r0, #0]
 8000d52:	4770      	bx	lr

08000d54 <USART_OneBitMethodCmd>:
 8000d54:	6883      	ldr	r3, [r0, #8]
 8000d56:	b919      	cbnz	r1, 8000d60 <USART_OneBitMethodCmd+0xc>
 8000d58:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 8000d5c:	6081      	str	r1, [r0, #8]
 8000d5e:	4770      	bx	lr
 8000d60:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8000d64:	6082      	str	r2, [r0, #8]
 8000d66:	4770      	bx	lr

08000d68 <USART_MSBFirstCmd>:
 8000d68:	6843      	ldr	r3, [r0, #4]
 8000d6a:	b919      	cbnz	r1, 8000d74 <USART_MSBFirstCmd+0xc>
 8000d6c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8000d70:	6041      	str	r1, [r0, #4]
 8000d72:	4770      	bx	lr
 8000d74:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000d78:	6042      	str	r2, [r0, #4]
 8000d7a:	4770      	bx	lr

08000d7c <USART_DataInvCmd>:
 8000d7c:	6843      	ldr	r3, [r0, #4]
 8000d7e:	b919      	cbnz	r1, 8000d88 <USART_DataInvCmd+0xc>
 8000d80:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8000d84:	6041      	str	r1, [r0, #4]
 8000d86:	4770      	bx	lr
 8000d88:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000d8c:	6042      	str	r2, [r0, #4]
 8000d8e:	4770      	bx	lr

08000d90 <USART_InvPinCmd>:
 8000d90:	6843      	ldr	r3, [r0, #4]
 8000d92:	b91a      	cbnz	r2, 8000d9c <USART_InvPinCmd+0xc>
 8000d94:	ea23 0101 	bic.w	r1, r3, r1
 8000d98:	6041      	str	r1, [r0, #4]
 8000d9a:	4770      	bx	lr
 8000d9c:	4319      	orrs	r1, r3
 8000d9e:	6041      	str	r1, [r0, #4]
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop

08000da4 <USART_SWAPPinCmd>:
 8000da4:	6843      	ldr	r3, [r0, #4]
 8000da6:	b919      	cbnz	r1, 8000db0 <USART_SWAPPinCmd+0xc>
 8000da8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8000dac:	6041      	str	r1, [r0, #4]
 8000dae:	4770      	bx	lr
 8000db0:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8000db4:	6042      	str	r2, [r0, #4]
 8000db6:	4770      	bx	lr

08000db8 <USART_ReceiverTimeOutCmd>:
 8000db8:	6843      	ldr	r3, [r0, #4]
 8000dba:	b919      	cbnz	r1, 8000dc4 <USART_ReceiverTimeOutCmd+0xc>
 8000dbc:	f423 0100 	bic.w	r1, r3, #8388608	; 0x800000
 8000dc0:	6041      	str	r1, [r0, #4]
 8000dc2:	4770      	bx	lr
 8000dc4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000dc8:	6042      	str	r2, [r0, #4]
 8000dca:	4770      	bx	lr

08000dcc <USART_SetReceiverTimeOut>:
 8000dcc:	6943      	ldr	r3, [r0, #20]
 8000dce:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8000dd2:	6142      	str	r2, [r0, #20]
 8000dd4:	6943      	ldr	r3, [r0, #20]
 8000dd6:	4319      	orrs	r1, r3
 8000dd8:	6141      	str	r1, [r0, #20]
 8000dda:	4770      	bx	lr

08000ddc <USART_SetPrescaler>:
 8000ddc:	8a03      	ldrh	r3, [r0, #16]
 8000dde:	f403 427f 	and.w	r2, r3, #65280	; 0xff00
 8000de2:	8202      	strh	r2, [r0, #16]
 8000de4:	8a03      	ldrh	r3, [r0, #16]
 8000de6:	b29a      	uxth	r2, r3
 8000de8:	4311      	orrs	r1, r2
 8000dea:	8201      	strh	r1, [r0, #16]
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop

08000df0 <USART_STOPModeCmd>:
 8000df0:	6803      	ldr	r3, [r0, #0]
 8000df2:	b919      	cbnz	r1, 8000dfc <USART_STOPModeCmd+0xc>
 8000df4:	f023 0102 	bic.w	r1, r3, #2
 8000df8:	6001      	str	r1, [r0, #0]
 8000dfa:	4770      	bx	lr
 8000dfc:	f043 0202 	orr.w	r2, r3, #2
 8000e00:	6002      	str	r2, [r0, #0]
 8000e02:	4770      	bx	lr

08000e04 <USART_StopModeWakeUpSourceConfig>:
 8000e04:	6883      	ldr	r3, [r0, #8]
 8000e06:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8000e0a:	6082      	str	r2, [r0, #8]
 8000e0c:	6883      	ldr	r3, [r0, #8]
 8000e0e:	4319      	orrs	r1, r3
 8000e10:	6081      	str	r1, [r0, #8]
 8000e12:	4770      	bx	lr

08000e14 <USART_AutoBaudRateCmd>:
 8000e14:	6843      	ldr	r3, [r0, #4]
 8000e16:	b919      	cbnz	r1, 8000e20 <USART_AutoBaudRateCmd+0xc>
 8000e18:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8000e1c:	6041      	str	r1, [r0, #4]
 8000e1e:	4770      	bx	lr
 8000e20:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000e24:	6042      	str	r2, [r0, #4]
 8000e26:	4770      	bx	lr

08000e28 <USART_AutoBaudRateConfig>:
 8000e28:	6843      	ldr	r3, [r0, #4]
 8000e2a:	f423 02c0 	bic.w	r2, r3, #6291456	; 0x600000
 8000e2e:	6042      	str	r2, [r0, #4]
 8000e30:	6843      	ldr	r3, [r0, #4]
 8000e32:	4319      	orrs	r1, r3
 8000e34:	6041      	str	r1, [r0, #4]
 8000e36:	4770      	bx	lr

08000e38 <USART_SendData>:
 8000e38:	05c9      	lsls	r1, r1, #23
 8000e3a:	0dca      	lsrs	r2, r1, #23
 8000e3c:	8502      	strh	r2, [r0, #40]	; 0x28
 8000e3e:	4770      	bx	lr

08000e40 <USART_ReceiveData>:
 8000e40:	8c80      	ldrh	r0, [r0, #36]	; 0x24
 8000e42:	05c1      	lsls	r1, r0, #23
 8000e44:	0dc8      	lsrs	r0, r1, #23
 8000e46:	4770      	bx	lr

08000e48 <USART_SetAddress>:
 8000e48:	6843      	ldr	r3, [r0, #4]
 8000e4a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8000e4e:	6042      	str	r2, [r0, #4]
 8000e50:	6843      	ldr	r3, [r0, #4]
 8000e52:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
 8000e56:	6041      	str	r1, [r0, #4]
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop

08000e5c <USART_MuteModeCmd>:
 8000e5c:	6803      	ldr	r3, [r0, #0]
 8000e5e:	b919      	cbnz	r1, 8000e68 <USART_MuteModeCmd+0xc>
 8000e60:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8000e64:	6001      	str	r1, [r0, #0]
 8000e66:	4770      	bx	lr
 8000e68:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000e6c:	6002      	str	r2, [r0, #0]
 8000e6e:	4770      	bx	lr

08000e70 <USART_MuteModeWakeUpConfig>:
 8000e70:	6803      	ldr	r3, [r0, #0]
 8000e72:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8000e76:	6002      	str	r2, [r0, #0]
 8000e78:	6803      	ldr	r3, [r0, #0]
 8000e7a:	4319      	orrs	r1, r3
 8000e7c:	6001      	str	r1, [r0, #0]
 8000e7e:	4770      	bx	lr

08000e80 <USART_AddressDetectionConfig>:
 8000e80:	6843      	ldr	r3, [r0, #4]
 8000e82:	f023 0210 	bic.w	r2, r3, #16
 8000e86:	6042      	str	r2, [r0, #4]
 8000e88:	6843      	ldr	r3, [r0, #4]
 8000e8a:	4319      	orrs	r1, r3
 8000e8c:	6041      	str	r1, [r0, #4]
 8000e8e:	4770      	bx	lr

08000e90 <USART_LINBreakDetectLengthConfig>:
 8000e90:	6843      	ldr	r3, [r0, #4]
 8000e92:	f023 0220 	bic.w	r2, r3, #32
 8000e96:	6042      	str	r2, [r0, #4]
 8000e98:	6843      	ldr	r3, [r0, #4]
 8000e9a:	4319      	orrs	r1, r3
 8000e9c:	6041      	str	r1, [r0, #4]
 8000e9e:	4770      	bx	lr

08000ea0 <USART_LINCmd>:
 8000ea0:	6843      	ldr	r3, [r0, #4]
 8000ea2:	b919      	cbnz	r1, 8000eac <USART_LINCmd+0xc>
 8000ea4:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8000ea8:	6041      	str	r1, [r0, #4]
 8000eaa:	4770      	bx	lr
 8000eac:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8000eb0:	6042      	str	r2, [r0, #4]
 8000eb2:	4770      	bx	lr

08000eb4 <USART_HalfDuplexCmd>:
 8000eb4:	6883      	ldr	r3, [r0, #8]
 8000eb6:	b919      	cbnz	r1, 8000ec0 <USART_HalfDuplexCmd+0xc>
 8000eb8:	f023 0108 	bic.w	r1, r3, #8
 8000ebc:	6081      	str	r1, [r0, #8]
 8000ebe:	4770      	bx	lr
 8000ec0:	f043 0208 	orr.w	r2, r3, #8
 8000ec4:	6082      	str	r2, [r0, #8]
 8000ec6:	4770      	bx	lr

08000ec8 <USART_SetGuardTime>:
 8000ec8:	8a03      	ldrh	r3, [r0, #16]
 8000eca:	b2da      	uxtb	r2, r3
 8000ecc:	8202      	strh	r2, [r0, #16]
 8000ece:	8a03      	ldrh	r3, [r0, #16]
 8000ed0:	b29a      	uxth	r2, r3
 8000ed2:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
 8000ed6:	8201      	strh	r1, [r0, #16]
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop

08000edc <USART_SmartCardCmd>:
 8000edc:	6883      	ldr	r3, [r0, #8]
 8000ede:	b919      	cbnz	r1, 8000ee8 <USART_SmartCardCmd+0xc>
 8000ee0:	f023 0120 	bic.w	r1, r3, #32
 8000ee4:	6081      	str	r1, [r0, #8]
 8000ee6:	4770      	bx	lr
 8000ee8:	f043 0220 	orr.w	r2, r3, #32
 8000eec:	6082      	str	r2, [r0, #8]
 8000eee:	4770      	bx	lr

08000ef0 <USART_SmartCardNACKCmd>:
 8000ef0:	6883      	ldr	r3, [r0, #8]
 8000ef2:	b919      	cbnz	r1, 8000efc <USART_SmartCardNACKCmd+0xc>
 8000ef4:	f023 0110 	bic.w	r1, r3, #16
 8000ef8:	6081      	str	r1, [r0, #8]
 8000efa:	4770      	bx	lr
 8000efc:	f043 0210 	orr.w	r2, r3, #16
 8000f00:	6082      	str	r2, [r0, #8]
 8000f02:	4770      	bx	lr

08000f04 <USART_SetAutoRetryCount>:
 8000f04:	6883      	ldr	r3, [r0, #8]
 8000f06:	f423 2260 	bic.w	r2, r3, #917504	; 0xe0000
 8000f0a:	6082      	str	r2, [r0, #8]
 8000f0c:	6883      	ldr	r3, [r0, #8]
 8000f0e:	ea43 4141 	orr.w	r1, r3, r1, lsl #17
 8000f12:	6081      	str	r1, [r0, #8]
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop

08000f18 <USART_SetBlockLength>:
 8000f18:	6943      	ldr	r3, [r0, #20]
 8000f1a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8000f1e:	6142      	str	r2, [r0, #20]
 8000f20:	6943      	ldr	r3, [r0, #20]
 8000f22:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
 8000f26:	6141      	str	r1, [r0, #20]
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop

08000f2c <USART_IrDAConfig>:
 8000f2c:	6883      	ldr	r3, [r0, #8]
 8000f2e:	f023 0204 	bic.w	r2, r3, #4
 8000f32:	6082      	str	r2, [r0, #8]
 8000f34:	6883      	ldr	r3, [r0, #8]
 8000f36:	4319      	orrs	r1, r3
 8000f38:	6081      	str	r1, [r0, #8]
 8000f3a:	4770      	bx	lr

08000f3c <USART_IrDACmd>:
 8000f3c:	6883      	ldr	r3, [r0, #8]
 8000f3e:	b919      	cbnz	r1, 8000f48 <USART_IrDACmd+0xc>
 8000f40:	f023 0102 	bic.w	r1, r3, #2
 8000f44:	6081      	str	r1, [r0, #8]
 8000f46:	4770      	bx	lr
 8000f48:	f043 0202 	orr.w	r2, r3, #2
 8000f4c:	6082      	str	r2, [r0, #8]
 8000f4e:	4770      	bx	lr

08000f50 <USART_DECmd>:
 8000f50:	6883      	ldr	r3, [r0, #8]
 8000f52:	b919      	cbnz	r1, 8000f5c <USART_DECmd+0xc>
 8000f54:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8000f58:	6081      	str	r1, [r0, #8]
 8000f5a:	4770      	bx	lr
 8000f5c:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8000f60:	6082      	str	r2, [r0, #8]
 8000f62:	4770      	bx	lr

08000f64 <USART_DEPolarityConfig>:
 8000f64:	6883      	ldr	r3, [r0, #8]
 8000f66:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000f6a:	6082      	str	r2, [r0, #8]
 8000f6c:	6883      	ldr	r3, [r0, #8]
 8000f6e:	4319      	orrs	r1, r3
 8000f70:	6081      	str	r1, [r0, #8]
 8000f72:	4770      	bx	lr

08000f74 <USART_SetDEAssertionTime>:
 8000f74:	6803      	ldr	r3, [r0, #0]
 8000f76:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8000f7a:	6002      	str	r2, [r0, #0]
 8000f7c:	6803      	ldr	r3, [r0, #0]
 8000f7e:	ea43 5141 	orr.w	r1, r3, r1, lsl #21
 8000f82:	6001      	str	r1, [r0, #0]
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <USART_SetDEDeassertionTime>:
 8000f88:	6803      	ldr	r3, [r0, #0]
 8000f8a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8000f8e:	6002      	str	r2, [r0, #0]
 8000f90:	6803      	ldr	r3, [r0, #0]
 8000f92:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f96:	6001      	str	r1, [r0, #0]
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop

08000f9c <USART_DMACmd>:
 8000f9c:	6883      	ldr	r3, [r0, #8]
 8000f9e:	b91a      	cbnz	r2, 8000fa8 <USART_DMACmd+0xc>
 8000fa0:	ea23 0101 	bic.w	r1, r3, r1
 8000fa4:	6081      	str	r1, [r0, #8]
 8000fa6:	4770      	bx	lr
 8000fa8:	4319      	orrs	r1, r3
 8000faa:	6081      	str	r1, [r0, #8]
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop

08000fb0 <USART_DMAReceptionErrorConfig>:
 8000fb0:	6883      	ldr	r3, [r0, #8]
 8000fb2:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8000fb6:	6082      	str	r2, [r0, #8]
 8000fb8:	6883      	ldr	r3, [r0, #8]
 8000fba:	4319      	orrs	r1, r3
 8000fbc:	6081      	str	r1, [r0, #8]
 8000fbe:	4770      	bx	lr

08000fc0 <USART_ITConfig>:
 8000fc0:	b2cb      	uxtb	r3, r1
 8000fc2:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8000fc6:	b410      	push	{r4}
 8000fc8:	2401      	movs	r4, #1
 8000fca:	2902      	cmp	r1, #2
 8000fcc:	fa04 f303 	lsl.w	r3, r4, r3
 8000fd0:	d00d      	beq.n	8000fee <USART_ITConfig+0x2e>
 8000fd2:	2903      	cmp	r1, #3
 8000fd4:	bf08      	it	eq
 8000fd6:	3008      	addeq	r0, #8
 8000fd8:	b92a      	cbnz	r2, 8000fe6 <USART_ITConfig+0x26>
 8000fda:	6802      	ldr	r2, [r0, #0]
 8000fdc:	ea22 0103 	bic.w	r1, r2, r3
 8000fe0:	6001      	str	r1, [r0, #0]
 8000fe2:	bc10      	pop	{r4}
 8000fe4:	4770      	bx	lr
 8000fe6:	6802      	ldr	r2, [r0, #0]
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	6003      	str	r3, [r0, #0]
 8000fec:	e7f9      	b.n	8000fe2 <USART_ITConfig+0x22>
 8000fee:	3004      	adds	r0, #4
 8000ff0:	e7f2      	b.n	8000fd8 <USART_ITConfig+0x18>
 8000ff2:	bf00      	nop

08000ff4 <USART_RequestCmd>:
 8000ff4:	8b03      	ldrh	r3, [r0, #24]
 8000ff6:	b922      	cbnz	r2, 8001002 <USART_RequestCmd+0xe>
 8000ff8:	b29a      	uxth	r2, r3
 8000ffa:	ea22 0101 	bic.w	r1, r2, r1
 8000ffe:	8301      	strh	r1, [r0, #24]
 8001000:	4770      	bx	lr
 8001002:	4319      	orrs	r1, r3
 8001004:	b28b      	uxth	r3, r1
 8001006:	8303      	strh	r3, [r0, #24]
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop

0800100c <USART_OverrunDetectionConfig>:
 800100c:	6883      	ldr	r3, [r0, #8]
 800100e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001012:	6082      	str	r2, [r0, #8]
 8001014:	6883      	ldr	r3, [r0, #8]
 8001016:	4319      	orrs	r1, r3
 8001018:	6081      	str	r1, [r0, #8]
 800101a:	4770      	bx	lr

0800101c <USART_GetFlagStatus>:
 800101c:	69c3      	ldr	r3, [r0, #28]
 800101e:	4219      	tst	r1, r3
 8001020:	bf0c      	ite	eq
 8001022:	2000      	moveq	r0, #0
 8001024:	2001      	movne	r0, #1
 8001026:	4770      	bx	lr

08001028 <USART_ClearFlag>:
 8001028:	6201      	str	r1, [r0, #32]
 800102a:	4770      	bx	lr

0800102c <USART_GetITStatus>:
 800102c:	b410      	push	{r4}
 800102e:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8001032:	2401      	movs	r4, #1
 8001034:	b2ca      	uxtb	r2, r1
 8001036:	42a3      	cmp	r3, r4
 8001038:	fa04 f202 	lsl.w	r2, r4, r2
 800103c:	d012      	beq.n	8001064 <USART_GetITStatus+0x38>
 800103e:	2b02      	cmp	r3, #2
 8001040:	bf0c      	ite	eq
 8001042:	6843      	ldreq	r3, [r0, #4]
 8001044:	6883      	ldrne	r3, [r0, #8]
 8001046:	4013      	ands	r3, r2
 8001048:	69c0      	ldr	r0, [r0, #28]
 800104a:	b14b      	cbz	r3, 8001060 <USART_GetITStatus+0x34>
 800104c:	0c09      	lsrs	r1, r1, #16
 800104e:	2301      	movs	r3, #1
 8001050:	fa03 f201 	lsl.w	r2, r3, r1
 8001054:	4202      	tst	r2, r0
 8001056:	bf0c      	ite	eq
 8001058:	2000      	moveq	r0, #0
 800105a:	2001      	movne	r0, #1
 800105c:	bc10      	pop	{r4}
 800105e:	4770      	bx	lr
 8001060:	4618      	mov	r0, r3
 8001062:	e7fb      	b.n	800105c <USART_GetITStatus+0x30>
 8001064:	6803      	ldr	r3, [r0, #0]
 8001066:	4013      	ands	r3, r2
 8001068:	e7ee      	b.n	8001048 <USART_GetITStatus+0x1c>
 800106a:	bf00      	nop

0800106c <USART_ClearITPendingBit>:
 800106c:	0c09      	lsrs	r1, r1, #16
 800106e:	2301      	movs	r3, #1
 8001070:	fa03 f201 	lsl.w	r2, r3, r1
 8001074:	6202      	str	r2, [r0, #32]
 8001076:	4770      	bx	lr

08001078 <GPIO_DeInit>:
 8001078:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 800107c:	b508      	push	{r3, lr}
 800107e:	d02a      	beq.n	80010d6 <GPIO_DeInit+0x5e>
 8001080:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001084:	f6c4 0300 	movt	r3, #18432	; 0x4800
 8001088:	4298      	cmp	r0, r3
 800108a:	d030      	beq.n	80010ee <GPIO_DeInit+0x76>
 800108c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001090:	f6c4 0100 	movt	r1, #18432	; 0x4800
 8001094:	4288      	cmp	r0, r1
 8001096:	d036      	beq.n	8001106 <GPIO_DeInit+0x8e>
 8001098:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 800109c:	f6c4 0200 	movt	r2, #18432	; 0x4800
 80010a0:	4290      	cmp	r0, r2
 80010a2:	d03c      	beq.n	800111e <GPIO_DeInit+0xa6>
 80010a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010a8:	f6c4 0300 	movt	r3, #18432	; 0x4800
 80010ac:	4298      	cmp	r0, r3
 80010ae:	d042      	beq.n	8001136 <GPIO_DeInit+0xbe>
 80010b0:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
 80010b4:	f6c4 0100 	movt	r1, #18432	; 0x4800
 80010b8:	4288      	cmp	r0, r1
 80010ba:	d000      	beq.n	80010be <GPIO_DeInit+0x46>
 80010bc:	bd08      	pop	{r3, pc}
 80010be:	2101      	movs	r1, #1
 80010c0:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80010c4:	f7ff fd10 	bl	8000ae8 <RCC_AHBPeriphResetCmd>
 80010c8:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80010cc:	2100      	movs	r1, #0
 80010ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80010d2:	f7ff bd09 	b.w	8000ae8 <RCC_AHBPeriphResetCmd>
 80010d6:	2101      	movs	r1, #1
 80010d8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80010dc:	f7ff fd04 	bl	8000ae8 <RCC_AHBPeriphResetCmd>
 80010e0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80010e4:	2100      	movs	r1, #0
 80010e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80010ea:	f7ff bcfd 	b.w	8000ae8 <RCC_AHBPeriphResetCmd>
 80010ee:	2101      	movs	r1, #1
 80010f0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80010f4:	f7ff fcf8 	bl	8000ae8 <RCC_AHBPeriphResetCmd>
 80010f8:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80010fc:	2100      	movs	r1, #0
 80010fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8001102:	f7ff bcf1 	b.w	8000ae8 <RCC_AHBPeriphResetCmd>
 8001106:	2101      	movs	r1, #1
 8001108:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800110c:	f7ff fcec 	bl	8000ae8 <RCC_AHBPeriphResetCmd>
 8001110:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001114:	2100      	movs	r1, #0
 8001116:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800111a:	f7ff bce5 	b.w	8000ae8 <RCC_AHBPeriphResetCmd>
 800111e:	2101      	movs	r1, #1
 8001120:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001124:	f7ff fce0 	bl	8000ae8 <RCC_AHBPeriphResetCmd>
 8001128:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800112c:	2100      	movs	r1, #0
 800112e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8001132:	f7ff bcd9 	b.w	8000ae8 <RCC_AHBPeriphResetCmd>
 8001136:	2101      	movs	r1, #1
 8001138:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800113c:	f7ff fcd4 	bl	8000ae8 <RCC_AHBPeriphResetCmd>
 8001140:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001144:	2100      	movs	r1, #0
 8001146:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800114a:	f7ff bccd 	b.w	8000ae8 <RCC_AHBPeriphResetCmd>
 800114e:	bf00      	nop

08001150 <GPIO_Init>:
 8001150:	2200      	movs	r2, #0
 8001152:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001156:	4613      	mov	r3, r2
 8001158:	680d      	ldr	r5, [r1, #0]
 800115a:	2601      	movs	r6, #1
 800115c:	f04f 0c03 	mov.w	ip, #3
 8001160:	e00b      	b.n	800117a <GPIO_Init+0x2a>
 8001162:	3301      	adds	r3, #1
 8001164:	fa06 f403 	lsl.w	r4, r6, r3
 8001168:	ea04 0705 	and.w	r7, r4, r5
 800116c:	3202      	adds	r2, #2
 800116e:	42a7      	cmp	r7, r4
 8001170:	d031      	beq.n	80011d6 <GPIO_Init+0x86>
 8001172:	3301      	adds	r3, #1
 8001174:	3202      	adds	r2, #2
 8001176:	2b10      	cmp	r3, #16
 8001178:	d051      	beq.n	800121e <GPIO_Init+0xce>
 800117a:	fa06 f403 	lsl.w	r4, r6, r3
 800117e:	ea04 0705 	and.w	r7, r4, r5
 8001182:	42a7      	cmp	r7, r4
 8001184:	d1ed      	bne.n	8001162 <GPIO_Init+0x12>
 8001186:	790c      	ldrb	r4, [r1, #4]
 8001188:	f104 38ff 	add.w	r8, r4, #4294967295
 800118c:	f1b8 0f01 	cmp.w	r8, #1
 8001190:	d948      	bls.n	8001224 <GPIO_Init+0xd4>
 8001192:	fa0c f702 	lsl.w	r7, ip, r2
 8001196:	ea6f 0807 	mvn.w	r8, r7
 800119a:	6807      	ldr	r7, [r0, #0]
 800119c:	f891 9007 	ldrb.w	r9, [r1, #7]
 80011a0:	ea08 0707 	and.w	r7, r8, r7
 80011a4:	6007      	str	r7, [r0, #0]
 80011a6:	6807      	ldr	r7, [r0, #0]
 80011a8:	fa04 f402 	lsl.w	r4, r4, r2
 80011ac:	433c      	orrs	r4, r7
 80011ae:	6004      	str	r4, [r0, #0]
 80011b0:	68c4      	ldr	r4, [r0, #12]
 80011b2:	fa0c f702 	lsl.w	r7, ip, r2
 80011b6:	ea24 0407 	bic.w	r4, r4, r7
 80011ba:	60c4      	str	r4, [r0, #12]
 80011bc:	68c7      	ldr	r7, [r0, #12]
 80011be:	fa09 f402 	lsl.w	r4, r9, r2
 80011c2:	433c      	orrs	r4, r7
 80011c4:	3301      	adds	r3, #1
 80011c6:	60c4      	str	r4, [r0, #12]
 80011c8:	fa06 f403 	lsl.w	r4, r6, r3
 80011cc:	ea04 0705 	and.w	r7, r4, r5
 80011d0:	3202      	adds	r2, #2
 80011d2:	42a7      	cmp	r7, r4
 80011d4:	d1cd      	bne.n	8001172 <GPIO_Init+0x22>
 80011d6:	790c      	ldrb	r4, [r1, #4]
 80011d8:	f104 38ff 	add.w	r8, r4, #4294967295
 80011dc:	f1b8 0f01 	cmp.w	r8, #1
 80011e0:	d946      	bls.n	8001270 <GPIO_Init+0x120>
 80011e2:	fa0c f702 	lsl.w	r7, ip, r2
 80011e6:	ea6f 0807 	mvn.w	r8, r7
 80011ea:	6807      	ldr	r7, [r0, #0]
 80011ec:	f891 9007 	ldrb.w	r9, [r1, #7]
 80011f0:	ea08 0707 	and.w	r7, r8, r7
 80011f4:	6007      	str	r7, [r0, #0]
 80011f6:	6807      	ldr	r7, [r0, #0]
 80011f8:	fa04 f402 	lsl.w	r4, r4, r2
 80011fc:	433c      	orrs	r4, r7
 80011fe:	6004      	str	r4, [r0, #0]
 8001200:	68c4      	ldr	r4, [r0, #12]
 8001202:	fa0c f702 	lsl.w	r7, ip, r2
 8001206:	ea24 0407 	bic.w	r4, r4, r7
 800120a:	60c4      	str	r4, [r0, #12]
 800120c:	68c7      	ldr	r7, [r0, #12]
 800120e:	fa09 f402 	lsl.w	r4, r9, r2
 8001212:	3301      	adds	r3, #1
 8001214:	433c      	orrs	r4, r7
 8001216:	3202      	adds	r2, #2
 8001218:	2b10      	cmp	r3, #16
 800121a:	60c4      	str	r4, [r0, #12]
 800121c:	d1ad      	bne.n	800117a <GPIO_Init+0x2a>
 800121e:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001222:	4770      	bx	lr
 8001224:	f8d0 b008 	ldr.w	fp, [r0, #8]
 8001228:	f891 9005 	ldrb.w	r9, [r1, #5]
 800122c:	f891 a006 	ldrb.w	sl, [r1, #6]
 8001230:	fa0c f802 	lsl.w	r8, ip, r2
 8001234:	ea6f 0808 	mvn.w	r8, r8
 8001238:	ea08 0b0b 	and.w	fp, r8, fp
 800123c:	f8c0 b008 	str.w	fp, [r0, #8]
 8001240:	f8d0 b008 	ldr.w	fp, [r0, #8]
 8001244:	fa09 f902 	lsl.w	r9, r9, r2
 8001248:	ea49 090b 	orr.w	r9, r9, fp
 800124c:	f8c0 9008 	str.w	r9, [r0, #8]
 8001250:	f8b0 9004 	ldrh.w	r9, [r0, #4]
 8001254:	fa1f f989 	uxth.w	r9, r9
 8001258:	ea29 0707 	bic.w	r7, r9, r7
 800125c:	8087      	strh	r7, [r0, #4]
 800125e:	f8b0 9004 	ldrh.w	r9, [r0, #4]
 8001262:	fa0a f703 	lsl.w	r7, sl, r3
 8001266:	ea47 0709 	orr.w	r7, r7, r9
 800126a:	b2bf      	uxth	r7, r7
 800126c:	8087      	strh	r7, [r0, #4]
 800126e:	e794      	b.n	800119a <GPIO_Init+0x4a>
 8001270:	f8d0 b008 	ldr.w	fp, [r0, #8]
 8001274:	f891 9005 	ldrb.w	r9, [r1, #5]
 8001278:	f891 a006 	ldrb.w	sl, [r1, #6]
 800127c:	fa0c f802 	lsl.w	r8, ip, r2
 8001280:	ea6f 0808 	mvn.w	r8, r8
 8001284:	ea08 0b0b 	and.w	fp, r8, fp
 8001288:	f8c0 b008 	str.w	fp, [r0, #8]
 800128c:	f8d0 b008 	ldr.w	fp, [r0, #8]
 8001290:	fa09 f902 	lsl.w	r9, r9, r2
 8001294:	ea49 090b 	orr.w	r9, r9, fp
 8001298:	f8c0 9008 	str.w	r9, [r0, #8]
 800129c:	f8b0 9004 	ldrh.w	r9, [r0, #4]
 80012a0:	fa1f f989 	uxth.w	r9, r9
 80012a4:	ea29 0707 	bic.w	r7, r9, r7
 80012a8:	8087      	strh	r7, [r0, #4]
 80012aa:	f8b0 9004 	ldrh.w	r9, [r0, #4]
 80012ae:	fa0a f703 	lsl.w	r7, sl, r3
 80012b2:	ea47 0709 	orr.w	r7, r7, r9
 80012b6:	b2bf      	uxth	r7, r7
 80012b8:	8087      	strh	r7, [r0, #4]
 80012ba:	e796      	b.n	80011ea <GPIO_Init+0x9a>

080012bc <GPIO_StructInit>:
 80012bc:	2300      	movs	r3, #0
 80012be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012c2:	2102      	movs	r1, #2
 80012c4:	6002      	str	r2, [r0, #0]
 80012c6:	7103      	strb	r3, [r0, #4]
 80012c8:	7141      	strb	r1, [r0, #5]
 80012ca:	7183      	strb	r3, [r0, #6]
 80012cc:	71c3      	strb	r3, [r0, #7]
 80012ce:	4770      	bx	lr

080012d0 <GPIO_PinLockConfig>:
 80012d0:	b082      	sub	sp, #8
 80012d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012d6:	9301      	str	r3, [sp, #4]
 80012d8:	9a01      	ldr	r2, [sp, #4]
 80012da:	ea41 0302 	orr.w	r3, r1, r2
 80012de:	9301      	str	r3, [sp, #4]
 80012e0:	9a01      	ldr	r2, [sp, #4]
 80012e2:	61c2      	str	r2, [r0, #28]
 80012e4:	61c1      	str	r1, [r0, #28]
 80012e6:	9901      	ldr	r1, [sp, #4]
 80012e8:	61c1      	str	r1, [r0, #28]
 80012ea:	69c3      	ldr	r3, [r0, #28]
 80012ec:	9301      	str	r3, [sp, #4]
 80012ee:	69c0      	ldr	r0, [r0, #28]
 80012f0:	9001      	str	r0, [sp, #4]
 80012f2:	b002      	add	sp, #8
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop

080012f8 <GPIO_ReadInputDataBit>:
 80012f8:	8a03      	ldrh	r3, [r0, #16]
 80012fa:	4219      	tst	r1, r3
 80012fc:	bf0c      	ite	eq
 80012fe:	2000      	moveq	r0, #0
 8001300:	2001      	movne	r0, #1
 8001302:	4770      	bx	lr

08001304 <GPIO_ReadInputData>:
 8001304:	8a00      	ldrh	r0, [r0, #16]
 8001306:	b280      	uxth	r0, r0
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop

0800130c <GPIO_ReadOutputDataBit>:
 800130c:	8a83      	ldrh	r3, [r0, #20]
 800130e:	4219      	tst	r1, r3
 8001310:	bf0c      	ite	eq
 8001312:	2000      	moveq	r0, #0
 8001314:	2001      	movne	r0, #1
 8001316:	4770      	bx	lr

08001318 <GPIO_ReadOutputData>:
 8001318:	8a80      	ldrh	r0, [r0, #20]
 800131a:	b280      	uxth	r0, r0
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop

08001320 <GPIO_SetBits>:
 8001320:	6181      	str	r1, [r0, #24]
 8001322:	4770      	bx	lr

08001324 <GPIO_ResetBits>:
 8001324:	8501      	strh	r1, [r0, #40]	; 0x28
 8001326:	4770      	bx	lr

08001328 <GPIO_WriteBit>:
 8001328:	b90a      	cbnz	r2, 800132e <GPIO_WriteBit+0x6>
 800132a:	8501      	strh	r1, [r0, #40]	; 0x28
 800132c:	4770      	bx	lr
 800132e:	6181      	str	r1, [r0, #24]
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop

08001334 <GPIO_Write>:
 8001334:	8281      	strh	r1, [r0, #20]
 8001336:	4770      	bx	lr

08001338 <GPIO_PinAFConfig>:
 8001338:	08cb      	lsrs	r3, r1, #3
 800133a:	3308      	adds	r3, #8
 800133c:	f001 0107 	and.w	r1, r1, #7
 8001340:	b430      	push	{r4, r5}
 8001342:	0089      	lsls	r1, r1, #2
 8001344:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
 8001348:	240f      	movs	r4, #15
 800134a:	fa04 f401 	lsl.w	r4, r4, r1
 800134e:	ea25 0404 	bic.w	r4, r5, r4
 8001352:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
 8001356:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 800135a:	fa02 f201 	lsl.w	r2, r2, r1
 800135e:	4314      	orrs	r4, r2
 8001360:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
 8001364:	bc30      	pop	{r4, r5}
 8001366:	4770      	bx	lr

08001368 <NVIC_PriorityGroupConfig>:
 8001368:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 800136c:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8001370:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8001374:	f440 3100 	orr.w	r1, r0, #131072	; 0x20000
 8001378:	60d9      	str	r1, [r3, #12]
 800137a:	4770      	bx	lr

0800137c <NVIC_Init>:
 800137c:	78c3      	ldrb	r3, [r0, #3]
 800137e:	b470      	push	{r4, r5, r6}
 8001380:	b97b      	cbnz	r3, 80013a2 <NVIC_Init+0x26>
 8001382:	7802      	ldrb	r2, [r0, #0]
 8001384:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8001388:	0951      	lsrs	r1, r2, #5
 800138a:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800138e:	f002 021f 	and.w	r2, r2, #31
 8001392:	3120      	adds	r1, #32
 8001394:	2001      	movs	r0, #1
 8001396:	fa00 f202 	lsl.w	r2, r0, r2
 800139a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800139e:	bc70      	pop	{r4, r5, r6}
 80013a0:	4770      	bx	lr
 80013a2:	f44f 446d 	mov.w	r4, #60672	; 0xed00
 80013a6:	f2ce 0400 	movt	r4, #57344	; 0xe000
 80013aa:	7845      	ldrb	r5, [r0, #1]
 80013ac:	68e6      	ldr	r6, [r4, #12]
 80013ae:	7884      	ldrb	r4, [r0, #2]
 80013b0:	7803      	ldrb	r3, [r0, #0]
 80013b2:	43f1      	mvns	r1, r6
 80013b4:	f3c1 2202 	ubfx	r2, r1, #8, #3
 80013b8:	260f      	movs	r6, #15
 80013ba:	f1c2 0104 	rsb	r1, r2, #4
 80013be:	fa26 f202 	lsr.w	r2, r6, r2
 80013c2:	fa05 f101 	lsl.w	r1, r5, r1
 80013c6:	4022      	ands	r2, r4
 80013c8:	430a      	orrs	r2, r1
 80013ca:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80013ce:	f503 4161 	add.w	r1, r3, #57600	; 0xe100
 80013d2:	0112      	lsls	r2, r2, #4
 80013d4:	b2d3      	uxtb	r3, r2
 80013d6:	f881 3300 	strb.w	r3, [r1, #768]	; 0x300
 80013da:	7800      	ldrb	r0, [r0, #0]
 80013dc:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 80013e0:	0941      	lsrs	r1, r0, #5
 80013e2:	f000 021f 	and.w	r2, r0, #31
 80013e6:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80013ea:	2001      	movs	r0, #1
 80013ec:	fa00 f202 	lsl.w	r2, r0, r2
 80013f0:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 80013f4:	e7d3      	b.n	800139e <NVIC_Init+0x22>
 80013f6:	bf00      	nop

080013f8 <NVIC_SetVectorTable>:
 80013f8:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
 80013fc:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8001400:	f021 027f 	bic.w	r2, r1, #127	; 0x7f
 8001404:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8001408:	4310      	orrs	r0, r2
 800140a:	6098      	str	r0, [r3, #8]
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop

08001410 <NVIC_SystemLPConfig>:
 8001410:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8001414:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8001418:	691a      	ldr	r2, [r3, #16]
 800141a:	b919      	cbnz	r1, 8001424 <NVIC_SystemLPConfig+0x14>
 800141c:	ea22 0000 	bic.w	r0, r2, r0
 8001420:	6118      	str	r0, [r3, #16]
 8001422:	4770      	bx	lr
 8001424:	4310      	orrs	r0, r2
 8001426:	6118      	str	r0, [r3, #16]
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop

0800142c <SysTick_CLKSourceConfig>:
 800142c:	f24e 0310 	movw	r3, #57360	; 0xe010
 8001430:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8001434:	2804      	cmp	r0, #4
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	bf0c      	ite	eq
 800143a:	f042 0204 	orreq.w	r2, r2, #4
 800143e:	f022 0204 	bicne.w	r2, r2, #4
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop

08001448 <QActive_ctor>:
 8001448:	b510      	push	{r4, lr}
 800144a:	4604      	mov	r4, r0
 800144c:	f000 fca4 	bl	8001d98 <QHsm_ctor>
 8001450:	f242 2350 	movw	r3, #8784	; 0x2250
 8001454:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001458:	6023      	str	r3, [r4, #0]
 800145a:	bd10      	pop	{r4, pc}

0800145c <QF_init>:
 800145c:	b570      	push	{r4, r5, r6, lr}
 800145e:	f240 1570 	movw	r5, #368	; 0x170
 8001462:	f2c2 0500 	movt	r5, #8192	; 0x2000
 8001466:	f240 162c 	movw	r6, #300	; 0x12c
 800146a:	f240 1430 	movw	r4, #304	; 0x130
 800146e:	f240 2318 	movw	r3, #536	; 0x218
 8001472:	2200      	movs	r2, #0
 8001474:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001478:	f2c2 0600 	movt	r6, #8192	; 0x2000
 800147c:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8001480:	f240 1020 	movw	r0, #288	; 0x120
 8001484:	602a      	str	r2, [r5, #0]
 8001486:	2109      	movs	r1, #9
 8001488:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800148c:	2521      	movs	r5, #33	; 0x21
 800148e:	6032      	str	r2, [r6, #0]
 8001490:	7025      	strb	r5, [r4, #0]
 8001492:	701a      	strb	r2, [r3, #0]
 8001494:	f000 f9e6 	bl	8001864 <QF_bzero>
 8001498:	f240 1074 	movw	r0, #372	; 0x174
 800149c:	2120      	movs	r1, #32
 800149e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80014a2:	f000 f9df 	bl	8001864 <QF_bzero>
 80014a6:	f240 1094 	movw	r0, #404	; 0x194
 80014aa:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80014ae:	2184      	movs	r1, #132	; 0x84
 80014b0:	f000 f9d8 	bl	8001864 <QF_bzero>
 80014b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80014b8:	f000 be94 	b.w	80021e4 <QK_init>

080014bc <QF_stop>:
 80014bc:	f7fe bfc0 	b.w	8000440 <QF_onCleanup>

080014c0 <QF_run>:
 80014c0:	b508      	push	{r3, lr}
 80014c2:	203f      	movs	r0, #63	; 0x3f
 80014c4:	f380 8811 	msr	BASEPRI, r0
 80014c8:	4b08      	ldr	r3, [pc, #32]	; (80014ec <QF_run+0x2c>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	701a      	strb	r2, [r3, #0]
 80014ce:	f000 fc6f 	bl	8001db0 <QK_schedPrio_>
 80014d2:	b938      	cbnz	r0, 80014e4 <QF_run+0x24>
 80014d4:	f7fe ffb0 	bl	8000438 <QF_onStartup>
 80014d8:	2000      	movs	r0, #0
 80014da:	f380 8811 	msr	BASEPRI, r0
 80014de:	f7fe ffad 	bl	800043c <QK_onIdle>
 80014e2:	e7fc      	b.n	80014de <QF_run+0x1e>
 80014e4:	f000 fc8c 	bl	8001e00 <QK_sched_>
 80014e8:	e7f4      	b.n	80014d4 <QF_run+0x14>
 80014ea:	bf00      	nop
 80014ec:	20000130 	.word	0x20000130

080014f0 <QActive_start_>:
 80014f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014f2:	460d      	mov	r5, r1
 80014f4:	3901      	subs	r1, #1
 80014f6:	291f      	cmp	r1, #31
 80014f8:	4604      	mov	r4, r0
 80014fa:	4616      	mov	r6, r2
 80014fc:	461f      	mov	r7, r3
 80014fe:	d819      	bhi.n	8001534 <QActive_start_+0x44>
 8001500:	f104 000c 	add.w	r0, r4, #12
 8001504:	4631      	mov	r1, r6
 8001506:	463a      	mov	r2, r7
 8001508:	f000 fd12 	bl	8001f30 <QEQueue_init>
 800150c:	7725      	strb	r5, [r4, #28]
 800150e:	4620      	mov	r0, r4
 8001510:	f000 f970 	bl	80017f4 <QF_add_>
 8001514:	9b06      	ldr	r3, [sp, #24]
 8001516:	b14b      	cbz	r3, 800152c <QActive_start_+0x3c>
 8001518:	4809      	ldr	r0, [pc, #36]	; (8001540 <QActive_start_+0x50>)
 800151a:	217c      	movs	r1, #124	; 0x7c
 800151c:	f7fe ff8a 	bl	8000434 <Q_onAssert>
 8001520:	6822      	ldr	r2, [r4, #0]
 8001522:	9908      	ldr	r1, [sp, #32]
 8001524:	6813      	ldr	r3, [r2, #0]
 8001526:	4620      	mov	r0, r4
 8001528:	4798      	blx	r3
 800152a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800152c:	9807      	ldr	r0, [sp, #28]
 800152e:	2800      	cmp	r0, #0
 8001530:	d1f2      	bne.n	8001518 <QActive_start_+0x28>
 8001532:	e7f5      	b.n	8001520 <QActive_start_+0x30>
 8001534:	4802      	ldr	r0, [pc, #8]	; (8001540 <QActive_start_+0x50>)
 8001536:	2172      	movs	r1, #114	; 0x72
 8001538:	f7fe ff7c 	bl	8000434 <Q_onAssert>
 800153c:	e7e0      	b.n	8001500 <QActive_start_+0x10>
 800153e:	bf00      	nop
 8001540:	08002264 	.word	0x08002264

08001544 <QActive_stop>:
 8001544:	f000 b972 	b.w	800182c <QF_remove_>

08001548 <QF_poolInit>:
 8001548:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800154c:	4d15      	ldr	r5, [pc, #84]	; (80015a4 <QF_poolInit+0x5c>)
 800154e:	682c      	ldr	r4, [r5, #0]
 8001550:	2c02      	cmp	r4, #2
 8001552:	4681      	mov	r9, r0
 8001554:	4688      	mov	r8, r1
 8001556:	4616      	mov	r6, r2
 8001558:	d81d      	bhi.n	8001596 <QF_poolInit+0x4e>
 800155a:	4f13      	ldr	r7, [pc, #76]	; (80015a8 <QF_poolInit+0x60>)
 800155c:	b13c      	cbz	r4, 800156e <QF_poolInit+0x26>
 800155e:	1e63      	subs	r3, r4, #1
 8001560:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8001564:	eb07 0180 	add.w	r1, r7, r0, lsl #2
 8001568:	898a      	ldrh	r2, [r1, #12]
 800156a:	42b2      	cmp	r2, r6
 800156c:	d20d      	bcs.n	800158a <QF_poolInit+0x42>
 800156e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8001572:	eb07 0083 	add.w	r0, r7, r3, lsl #2
 8001576:	4649      	mov	r1, r9
 8001578:	4642      	mov	r2, r8
 800157a:	4633      	mov	r3, r6
 800157c:	f000 f87e 	bl	800167c <QMPool_init>
 8001580:	6828      	ldr	r0, [r5, #0]
 8001582:	1c41      	adds	r1, r0, #1
 8001584:	6029      	str	r1, [r5, #0]
 8001586:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800158a:	4808      	ldr	r0, [pc, #32]	; (80015ac <QF_poolInit+0x64>)
 800158c:	213b      	movs	r1, #59	; 0x3b
 800158e:	f7fe ff51 	bl	8000434 <Q_onAssert>
 8001592:	682c      	ldr	r4, [r5, #0]
 8001594:	e7eb      	b.n	800156e <QF_poolInit+0x26>
 8001596:	4805      	ldr	r0, [pc, #20]	; (80015ac <QF_poolInit+0x64>)
 8001598:	2137      	movs	r1, #55	; 0x37
 800159a:	f7fe ff4b 	bl	8000434 <Q_onAssert>
 800159e:	682c      	ldr	r4, [r5, #0]
 80015a0:	e7db      	b.n	800155a <QF_poolInit+0x12>
 80015a2:	bf00      	nop
 80015a4:	20000170 	.word	0x20000170
 80015a8:	20000134 	.word	0x20000134
 80015ac:	08002268 	.word	0x08002268

080015b0 <QF_tickX_>:
 80015b0:	b538      	push	{r3, r4, r5, lr}
 80015b2:	4c24      	ldr	r4, [pc, #144]	; (8001644 <QF_tickX_+0x94>)
 80015b4:	eb04 1400 	add.w	r4, r4, r0, lsl #4
 80015b8:	203f      	movs	r0, #63	; 0x3f
 80015ba:	f380 8811 	msr	BASEPRI, r0
 80015be:	4625      	mov	r5, r4
 80015c0:	e00c      	b.n	80015dc <QF_tickX_+0x2c>
 80015c2:	6848      	ldr	r0, [r1, #4]
 80015c4:	6060      	str	r0, [r4, #4]
 80015c6:	78ca      	ldrb	r2, [r1, #3]
 80015c8:	f002 037f 	and.w	r3, r2, #127	; 0x7f
 80015cc:	70cb      	strb	r3, [r1, #3]
 80015ce:	2000      	movs	r0, #0
 80015d0:	f380 8811 	msr	BASEPRI, r0
 80015d4:	bf00      	nop
 80015d6:	203f      	movs	r0, #63	; 0x3f
 80015d8:	f380 8811 	msr	BASEPRI, r0
 80015dc:	6861      	ldr	r1, [r4, #4]
 80015de:	b1f1      	cbz	r1, 800161e <QF_tickX_+0x6e>
 80015e0:	898a      	ldrh	r2, [r1, #12]
 80015e2:	b293      	uxth	r3, r2
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d0ec      	beq.n	80015c2 <QF_tickX_+0x12>
 80015e8:	8988      	ldrh	r0, [r1, #12]
 80015ea:	1e42      	subs	r2, r0, #1
 80015ec:	b293      	uxth	r3, r2
 80015ee:	818b      	strh	r3, [r1, #12]
 80015f0:	8988      	ldrh	r0, [r1, #12]
 80015f2:	b282      	uxth	r2, r0
 80015f4:	b96a      	cbnz	r2, 8001612 <QF_tickX_+0x62>
 80015f6:	89c8      	ldrh	r0, [r1, #14]
 80015f8:	688b      	ldr	r3, [r1, #8]
 80015fa:	b1b8      	cbz	r0, 800162c <QF_tickX_+0x7c>
 80015fc:	8188      	strh	r0, [r1, #12]
 80015fe:	460c      	mov	r4, r1
 8001600:	2000      	movs	r0, #0
 8001602:	f380 8811 	msr	BASEPRI, r0
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	4618      	mov	r0, r3
 800160a:	68d3      	ldr	r3, [r2, #12]
 800160c:	2200      	movs	r2, #0
 800160e:	4798      	blx	r3
 8001610:	e7e1      	b.n	80015d6 <QF_tickX_+0x26>
 8001612:	2000      	movs	r0, #0
 8001614:	f380 8811 	msr	BASEPRI, r0
 8001618:	bf00      	nop
 800161a:	460c      	mov	r4, r1
 800161c:	e7db      	b.n	80015d6 <QF_tickX_+0x26>
 800161e:	68ab      	ldr	r3, [r5, #8]
 8001620:	b15b      	cbz	r3, 800163a <QF_tickX_+0x8a>
 8001622:	68a8      	ldr	r0, [r5, #8]
 8001624:	6060      	str	r0, [r4, #4]
 8001626:	60a9      	str	r1, [r5, #8]
 8001628:	6861      	ldr	r1, [r4, #4]
 800162a:	e7d9      	b.n	80015e0 <QF_tickX_+0x30>
 800162c:	684a      	ldr	r2, [r1, #4]
 800162e:	6062      	str	r2, [r4, #4]
 8001630:	78c8      	ldrb	r0, [r1, #3]
 8001632:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 8001636:	70ca      	strb	r2, [r1, #3]
 8001638:	e7e2      	b.n	8001600 <QF_tickX_+0x50>
 800163a:	2000      	movs	r0, #0
 800163c:	f380 8811 	msr	BASEPRI, r0
 8001640:	bd38      	pop	{r3, r4, r5, pc}
 8001642:	bf00      	nop
 8001644:	20000174 	.word	0x20000174

08001648 <QF_noTimeEvtsActiveX>:
 8001648:	2801      	cmp	r0, #1
 800164a:	b510      	push	{r4, lr}
 800164c:	4604      	mov	r4, r0
 800164e:	d903      	bls.n	8001658 <QF_noTimeEvtsActiveX+0x10>
 8001650:	4808      	ldr	r0, [pc, #32]	; (8001674 <QF_noTimeEvtsActiveX+0x2c>)
 8001652:	2187      	movs	r1, #135	; 0x87
 8001654:	f7fe feee 	bl	8000434 <Q_onAssert>
 8001658:	4b07      	ldr	r3, [pc, #28]	; (8001678 <QF_noTimeEvtsActiveX+0x30>)
 800165a:	eb03 1404 	add.w	r4, r3, r4, lsl #4
 800165e:	6860      	ldr	r0, [r4, #4]
 8001660:	b108      	cbz	r0, 8001666 <QF_noTimeEvtsActiveX+0x1e>
 8001662:	2000      	movs	r0, #0
 8001664:	bd10      	pop	{r4, pc}
 8001666:	68a1      	ldr	r1, [r4, #8]
 8001668:	f1d1 0001 	rsbs	r0, r1, #1
 800166c:	bf38      	it	cc
 800166e:	2000      	movcc	r0, #0
 8001670:	bd10      	pop	{r4, pc}
 8001672:	bf00      	nop
 8001674:	08002270 	.word	0x08002270
 8001678:	20000174 	.word	0x20000174

0800167c <QMPool_init>:
 800167c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001680:	4688      	mov	r8, r1
 8001682:	4607      	mov	r7, r0
 8001684:	4691      	mov	r9, r2
 8001686:	461d      	mov	r5, r3
 8001688:	b109      	cbz	r1, 800168e <QMPool_init+0x12>
 800168a:	2a03      	cmp	r2, #3
 800168c:	d83b      	bhi.n	8001706 <QMPool_init+0x8a>
 800168e:	4823      	ldr	r0, [pc, #140]	; (800171c <QMPool_init+0xa0>)
 8001690:	213d      	movs	r1, #61	; 0x3d
 8001692:	f7fe fecf 	bl	8000434 <Q_onAssert>
 8001696:	2404      	movs	r4, #4
 8001698:	b2a8      	uxth	r0, r5
 800169a:	42a0      	cmp	r0, r4
 800169c:	f8c7 8000 	str.w	r8, [r7]
 80016a0:	81bc      	strh	r4, [r7, #12]
 80016a2:	d939      	bls.n	8001718 <QMPool_init+0x9c>
 80016a4:	2408      	movs	r4, #8
 80016a6:	1f42      	subs	r2, r0, #5
 80016a8:	2602      	movs	r6, #2
 80016aa:	4284      	cmp	r4, r0
 80016ac:	f3c2 0180 	ubfx	r1, r2, #2, #1
 80016b0:	d209      	bcs.n	80016c6 <QMPool_init+0x4a>
 80016b2:	b119      	cbz	r1, 80016bc <QMPool_init+0x40>
 80016b4:	240c      	movs	r4, #12
 80016b6:	2603      	movs	r6, #3
 80016b8:	4284      	cmp	r4, r0
 80016ba:	d204      	bcs.n	80016c6 <QMPool_init+0x4a>
 80016bc:	3408      	adds	r4, #8
 80016be:	b2a4      	uxth	r4, r4
 80016c0:	3602      	adds	r6, #2
 80016c2:	4284      	cmp	r4, r0
 80016c4:	d3fa      	bcc.n	80016bc <QMPool_init+0x40>
 80016c6:	81bc      	strh	r4, [r7, #12]
 80016c8:	454c      	cmp	r4, r9
 80016ca:	d820      	bhi.n	800170e <QMPool_init+0x92>
 80016cc:	ebc4 0209 	rsb	r2, r4, r9
 80016d0:	2501      	movs	r5, #1
 80016d2:	4294      	cmp	r4, r2
 80016d4:	81fd      	strh	r5, [r7, #14]
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	d80c      	bhi.n	80016f4 <QMPool_init+0x78>
 80016da:	00b1      	lsls	r1, r6, #2
 80016dc:	2502      	movs	r5, #2
 80016de:	e000      	b.n	80016e2 <QMPool_init+0x66>
 80016e0:	4635      	mov	r5, r6
 80016e2:	185e      	adds	r6, r3, r1
 80016e4:	1b12      	subs	r2, r2, r4
 80016e6:	601e      	str	r6, [r3, #0]
 80016e8:	1c68      	adds	r0, r5, #1
 80016ea:	4294      	cmp	r4, r2
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	b286      	uxth	r6, r0
 80016f0:	d9f6      	bls.n	80016e0 <QMPool_init+0x64>
 80016f2:	81fd      	strh	r5, [r7, #14]
 80016f4:	2100      	movs	r1, #0
 80016f6:	6019      	str	r1, [r3, #0]
 80016f8:	823d      	strh	r5, [r7, #16]
 80016fa:	827d      	strh	r5, [r7, #18]
 80016fc:	f8c7 8004 	str.w	r8, [r7, #4]
 8001700:	60bb      	str	r3, [r7, #8]
 8001702:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001706:	3304      	adds	r3, #4
 8001708:	429d      	cmp	r5, r3
 800170a:	d3c4      	bcc.n	8001696 <QMPool_init+0x1a>
 800170c:	e7bf      	b.n	800168e <QMPool_init+0x12>
 800170e:	4803      	ldr	r0, [pc, #12]	; (800171c <QMPool_init+0xa0>)
 8001710:	214b      	movs	r1, #75	; 0x4b
 8001712:	f7fe fe8f 	bl	8000434 <Q_onAssert>
 8001716:	e7d9      	b.n	80016cc <QMPool_init+0x50>
 8001718:	2601      	movs	r6, #1
 800171a:	e7d5      	b.n	80016c8 <QMPool_init+0x4c>
 800171c:	08002278 	.word	0x08002278

08001720 <QActive_post_>:
 8001720:	b570      	push	{r4, r5, r6, lr}
 8001722:	460d      	mov	r5, r1
 8001724:	b082      	sub	sp, #8
 8001726:	4604      	mov	r4, r0
 8001728:	2900      	cmp	r1, #0
 800172a:	d049      	beq.n	80017c0 <QActive_post_+0xa0>
 800172c:	203f      	movs	r0, #63	; 0x3f
 800172e:	f380 8811 	msr	BASEPRI, r0
 8001732:	7de3      	ldrb	r3, [r4, #23]
 8001734:	b2d1      	uxtb	r1, r2
 8001736:	428b      	cmp	r3, r1
 8001738:	d91c      	bls.n	8001774 <QActive_post_+0x54>
 800173a:	78a8      	ldrb	r0, [r5, #2]
 800173c:	b118      	cbz	r0, 8001746 <QActive_post_+0x26>
 800173e:	78e9      	ldrb	r1, [r5, #3]
 8001740:	1c4a      	adds	r2, r1, #1
 8001742:	b2d0      	uxtb	r0, r2
 8001744:	70e8      	strb	r0, [r5, #3]
 8001746:	3b01      	subs	r3, #1
 8001748:	b2da      	uxtb	r2, r3
 800174a:	7e21      	ldrb	r1, [r4, #24]
 800174c:	75e2      	strb	r2, [r4, #23]
 800174e:	68e0      	ldr	r0, [r4, #12]
 8001750:	4291      	cmp	r1, r2
 8001752:	bf88      	it	hi
 8001754:	7622      	strbhi	r2, [r4, #24]
 8001756:	b1e8      	cbz	r0, 8001794 <QActive_post_+0x74>
 8001758:	7d61      	ldrb	r1, [r4, #21]
 800175a:	6923      	ldr	r3, [r4, #16]
 800175c:	f843 5021 	str.w	r5, [r3, r1, lsl #2]
 8001760:	7d62      	ldrb	r2, [r4, #21]
 8001762:	b90a      	cbnz	r2, 8001768 <QActive_post_+0x48>
 8001764:	7d20      	ldrb	r0, [r4, #20]
 8001766:	7560      	strb	r0, [r4, #21]
 8001768:	7d61      	ldrb	r1, [r4, #21]
 800176a:	1e4b      	subs	r3, r1, #1
 800176c:	b2da      	uxtb	r2, r3
 800176e:	7562      	strb	r2, [r4, #21]
 8001770:	2201      	movs	r2, #1
 8001772:	e004      	b.n	800177e <QActive_post_+0x5e>
 8001774:	b14a      	cbz	r2, 800178a <QActive_post_+0x6a>
 8001776:	4628      	mov	r0, r5
 8001778:	f000 fa1c 	bl	8001bb4 <QF_gc>
 800177c:	2200      	movs	r2, #0
 800177e:	2000      	movs	r0, #0
 8001780:	f380 8811 	msr	BASEPRI, r0
 8001784:	4610      	mov	r0, r2
 8001786:	b002      	add	sp, #8
 8001788:	bd70      	pop	{r4, r5, r6, pc}
 800178a:	4815      	ldr	r0, [pc, #84]	; (80017e0 <QActive_post_+0xc0>)
 800178c:	2167      	movs	r1, #103	; 0x67
 800178e:	f7fe fe51 	bl	8000434 <Q_onAssert>
 8001792:	e7f0      	b.n	8001776 <QActive_post_+0x56>
 8001794:	7f26      	ldrb	r6, [r4, #28]
 8001796:	4813      	ldr	r0, [pc, #76]	; (80017e4 <QActive_post_+0xc4>)
 8001798:	4b13      	ldr	r3, [pc, #76]	; (80017e8 <QActive_post_+0xc8>)
 800179a:	5d81      	ldrb	r1, [r0, r6]
 800179c:	4813      	ldr	r0, [pc, #76]	; (80017ec <QActive_post_+0xcc>)
 800179e:	60e5      	str	r5, [r4, #12]
 80017a0:	185a      	adds	r2, r3, r1
 80017a2:	5d84      	ldrb	r4, [r0, r6]
 80017a4:	7855      	ldrb	r5, [r2, #1]
 80017a6:	1841      	adds	r1, r0, r1
 80017a8:	432c      	orrs	r4, r5
 80017aa:	7054      	strb	r4, [r2, #1]
 80017ac:	781c      	ldrb	r4, [r3, #0]
 80017ae:	7848      	ldrb	r0, [r1, #1]
 80017b0:	ea44 0200 	orr.w	r2, r4, r0
 80017b4:	701a      	strb	r2, [r3, #0]
 80017b6:	4b0e      	ldr	r3, [pc, #56]	; (80017f0 <QActive_post_+0xd0>)
 80017b8:	6819      	ldr	r1, [r3, #0]
 80017ba:	b141      	cbz	r1, 80017ce <QActive_post_+0xae>
 80017bc:	2201      	movs	r2, #1
 80017be:	e7de      	b.n	800177e <QActive_post_+0x5e>
 80017c0:	4807      	ldr	r0, [pc, #28]	; (80017e0 <QActive_post_+0xc0>)
 80017c2:	9201      	str	r2, [sp, #4]
 80017c4:	213e      	movs	r1, #62	; 0x3e
 80017c6:	f7fe fe35 	bl	8000434 <Q_onAssert>
 80017ca:	9a01      	ldr	r2, [sp, #4]
 80017cc:	e7ae      	b.n	800172c <QActive_post_+0xc>
 80017ce:	f000 faef 	bl	8001db0 <QK_schedPrio_>
 80017d2:	2800      	cmp	r0, #0
 80017d4:	d0f2      	beq.n	80017bc <QActive_post_+0x9c>
 80017d6:	f000 fb13 	bl	8001e00 <QK_sched_>
 80017da:	2201      	movs	r2, #1
 80017dc:	e7cf      	b.n	800177e <QActive_post_+0x5e>
 80017de:	bf00      	nop
 80017e0:	08002284 	.word	0x08002284
 80017e4:	080022b0 	.word	0x080022b0
 80017e8:	20000120 	.word	0x20000120
 80017ec:	08002338 	.word	0x08002338
 80017f0:	2000012c 	.word	0x2000012c

080017f4 <QF_add_>:
 80017f4:	b570      	push	{r4, r5, r6, lr}
 80017f6:	7f04      	ldrb	r4, [r0, #28]
 80017f8:	4e0a      	ldr	r6, [pc, #40]	; (8001824 <QF_add_+0x30>)
 80017fa:	1e63      	subs	r3, r4, #1
 80017fc:	2b1f      	cmp	r3, #31
 80017fe:	4605      	mov	r5, r0
 8001800:	d802      	bhi.n	8001808 <QF_add_+0x14>
 8001802:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8001806:	b118      	cbz	r0, 8001810 <QF_add_+0x1c>
 8001808:	4807      	ldr	r0, [pc, #28]	; (8001828 <QF_add_+0x34>)
 800180a:	2137      	movs	r1, #55	; 0x37
 800180c:	f7fe fe12 	bl	8000434 <Q_onAssert>
 8001810:	203f      	movs	r0, #63	; 0x3f
 8001812:	f380 8811 	msr	BASEPRI, r0
 8001816:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
 800181a:	2000      	movs	r0, #0
 800181c:	f380 8811 	msr	BASEPRI, r0
 8001820:	bd70      	pop	{r4, r5, r6, pc}
 8001822:	bf00      	nop
 8001824:	20000194 	.word	0x20000194
 8001828:	0800228c 	.word	0x0800228c

0800182c <QF_remove_>:
 800182c:	b538      	push	{r3, r4, r5, lr}
 800182e:	7f04      	ldrb	r4, [r0, #28]
 8001830:	4d0a      	ldr	r5, [pc, #40]	; (800185c <QF_remove_+0x30>)
 8001832:	1e63      	subs	r3, r4, #1
 8001834:	2b1f      	cmp	r3, #31
 8001836:	d803      	bhi.n	8001840 <QF_remove_+0x14>
 8001838:	f855 1024 	ldr.w	r1, [r5, r4, lsl #2]
 800183c:	4281      	cmp	r1, r0
 800183e:	d003      	beq.n	8001848 <QF_remove_+0x1c>
 8001840:	4807      	ldr	r0, [pc, #28]	; (8001860 <QF_remove_+0x34>)
 8001842:	214b      	movs	r1, #75	; 0x4b
 8001844:	f7fe fdf6 	bl	8000434 <Q_onAssert>
 8001848:	203f      	movs	r0, #63	; 0x3f
 800184a:	f380 8811 	msr	BASEPRI, r0
 800184e:	2000      	movs	r0, #0
 8001850:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
 8001854:	2000      	movs	r0, #0
 8001856:	f380 8811 	msr	BASEPRI, r0
 800185a:	bd38      	pop	{r3, r4, r5, pc}
 800185c:	20000194 	.word	0x20000194
 8001860:	0800228c 	.word	0x0800228c

08001864 <QF_bzero>:
 8001864:	b410      	push	{r4}
 8001866:	b1b1      	cbz	r1, 8001896 <QF_bzero+0x32>
 8001868:	4603      	mov	r3, r0
 800186a:	2400      	movs	r4, #0
 800186c:	f803 4b01 	strb.w	r4, [r3], #1
 8001870:	1841      	adds	r1, r0, r1
 8001872:	43c0      	mvns	r0, r0
 8001874:	180a      	adds	r2, r1, r0
 8001876:	428b      	cmp	r3, r1
 8001878:	f002 0001 	and.w	r0, r2, #1
 800187c:	d00b      	beq.n	8001896 <QF_bzero+0x32>
 800187e:	b118      	cbz	r0, 8001888 <QF_bzero+0x24>
 8001880:	f803 4b01 	strb.w	r4, [r3], #1
 8001884:	428b      	cmp	r3, r1
 8001886:	d006      	beq.n	8001896 <QF_bzero+0x32>
 8001888:	461a      	mov	r2, r3
 800188a:	f802 4b01 	strb.w	r4, [r2], #1
 800188e:	705c      	strb	r4, [r3, #1]
 8001890:	1c53      	adds	r3, r2, #1
 8001892:	428b      	cmp	r3, r1
 8001894:	d1f8      	bne.n	8001888 <QF_bzero+0x24>
 8001896:	bc10      	pop	{r4}
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop

0800189c <QHsm_dispatch_>:
 800189c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80018a0:	6846      	ldr	r6, [r0, #4]
 80018a2:	6885      	ldr	r5, [r0, #8]
 80018a4:	42b5      	cmp	r5, r6
 80018a6:	b086      	sub	sp, #24
 80018a8:	4604      	mov	r4, r0
 80018aa:	460f      	mov	r7, r1
 80018ac:	d004      	beq.n	80018b8 <QHsm_dispatch_+0x1c>
 80018ae:	48a1      	ldr	r0, [pc, #644]	; (8001b34 <QHsm_dispatch_+0x298>)
 80018b0:	2139      	movs	r1, #57	; 0x39
 80018b2:	f7fe fdbf 	bl	8000434 <Q_onAssert>
 80018b6:	68a5      	ldr	r5, [r4, #8]
 80018b8:	4639      	mov	r1, r7
 80018ba:	4620      	mov	r0, r4
 80018bc:	47a8      	blx	r5
 80018be:	2802      	cmp	r0, #2
 80018c0:	d008      	beq.n	80018d4 <QHsm_dispatch_+0x38>
 80018c2:	2800      	cmp	r0, #0
 80018c4:	d0f7      	beq.n	80018b6 <QHsm_dispatch_+0x1a>
 80018c6:	2804      	cmp	r0, #4
 80018c8:	d00a      	beq.n	80018e0 <QHsm_dispatch_+0x44>
 80018ca:	6066      	str	r6, [r4, #4]
 80018cc:	60a6      	str	r6, [r4, #8]
 80018ce:	b006      	add	sp, #24
 80018d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80018d4:	4620      	mov	r0, r4
 80018d6:	4998      	ldr	r1, [pc, #608]	; (8001b38 <QHsm_dispatch_+0x29c>)
 80018d8:	47a8      	blx	r5
 80018da:	2800      	cmp	r0, #0
 80018dc:	d0eb      	beq.n	80018b6 <QHsm_dispatch_+0x1a>
 80018de:	e7f2      	b.n	80018c6 <QHsm_dispatch_+0x2a>
 80018e0:	68a3      	ldr	r3, [r4, #8]
 80018e2:	9502      	str	r5, [sp, #8]
 80018e4:	42ae      	cmp	r6, r5
 80018e6:	e88d 0048 	stmia.w	sp, {r3, r6}
 80018ea:	d103      	bne.n	80018f4 <QHsm_dispatch_+0x58>
 80018ec:	e00f      	b.n	800190e <QHsm_dispatch_+0x72>
 80018ee:	68a6      	ldr	r6, [r4, #8]
 80018f0:	42b5      	cmp	r5, r6
 80018f2:	d00a      	beq.n	800190a <QHsm_dispatch_+0x6e>
 80018f4:	4991      	ldr	r1, [pc, #580]	; (8001b3c <QHsm_dispatch_+0x2a0>)
 80018f6:	4620      	mov	r0, r4
 80018f8:	47b0      	blx	r6
 80018fa:	2801      	cmp	r0, #1
 80018fc:	d1f7      	bne.n	80018ee <QHsm_dispatch_+0x52>
 80018fe:	4620      	mov	r0, r4
 8001900:	498d      	ldr	r1, [pc, #564]	; (8001b38 <QHsm_dispatch_+0x29c>)
 8001902:	47b0      	blx	r6
 8001904:	68a6      	ldr	r6, [r4, #8]
 8001906:	42b5      	cmp	r5, r6
 8001908:	d1f4      	bne.n	80018f4 <QHsm_dispatch_+0x58>
 800190a:	9b00      	ldr	r3, [sp, #0]
 800190c:	9d02      	ldr	r5, [sp, #8]
 800190e:	429d      	cmp	r5, r3
 8001910:	4620      	mov	r0, r4
 8001912:	f000 80af 	beq.w	8001a74 <QHsm_dispatch_+0x1d8>
 8001916:	4988      	ldr	r1, [pc, #544]	; (8001b38 <QHsm_dispatch_+0x29c>)
 8001918:	4798      	blx	r3
 800191a:	68a7      	ldr	r7, [r4, #8]
 800191c:	42af      	cmp	r7, r5
 800191e:	f000 80ab 	beq.w	8001a78 <QHsm_dispatch_+0x1dc>
 8001922:	4620      	mov	r0, r4
 8001924:	4984      	ldr	r1, [pc, #528]	; (8001b38 <QHsm_dispatch_+0x29c>)
 8001926:	47a8      	blx	r5
 8001928:	68a6      	ldr	r6, [r4, #8]
 800192a:	42b7      	cmp	r7, r6
 800192c:	f000 80a1 	beq.w	8001a72 <QHsm_dispatch_+0x1d6>
 8001930:	9b00      	ldr	r3, [sp, #0]
 8001932:	429e      	cmp	r6, r3
 8001934:	f000 810c 	beq.w	8001b50 <QHsm_dispatch_+0x2b4>
 8001938:	9701      	str	r7, [sp, #4]
 800193a:	4620      	mov	r0, r4
 800193c:	497e      	ldr	r1, [pc, #504]	; (8001b38 <QHsm_dispatch_+0x29c>)
 800193e:	47b8      	blx	r7
 8001940:	2800      	cmp	r0, #0
 8001942:	f040 809e 	bne.w	8001a82 <QHsm_dispatch_+0x1e6>
 8001946:	f10d 0a04 	add.w	sl, sp, #4
 800194a:	f04f 0801 	mov.w	r8, #1
 800194e:	68a2      	ldr	r2, [r4, #8]
 8001950:	4979      	ldr	r1, [pc, #484]	; (8001b38 <QHsm_dispatch_+0x29c>)
 8001952:	f84a 2f04 	str.w	r2, [sl, #4]!
 8001956:	f108 0901 	add.w	r9, r8, #1
 800195a:	42aa      	cmp	r2, r5
 800195c:	4620      	mov	r0, r4
 800195e:	464f      	mov	r7, r9
 8001960:	d00c      	beq.n	800197c <QHsm_dispatch_+0xe0>
 8001962:	4790      	blx	r2
 8001964:	46c8      	mov	r8, r9
 8001966:	2800      	cmp	r0, #0
 8001968:	d0f1      	beq.n	800194e <QHsm_dispatch_+0xb2>
 800196a:	f1b9 0f05 	cmp.w	r9, #5
 800196e:	f340 8089 	ble.w	8001a84 <QHsm_dispatch_+0x1e8>
 8001972:	4870      	ldr	r0, [pc, #448]	; (8001b34 <QHsm_dispatch_+0x298>)
 8001974:	21f1      	movs	r1, #241	; 0xf1
 8001976:	f7fe fd5d 	bl	8000434 <Q_onAssert>
 800197a:	e083      	b.n	8001a84 <QHsm_dispatch_+0x1e8>
 800197c:	f1b9 0f05 	cmp.w	r9, #5
 8001980:	dc71      	bgt.n	8001a66 <QHsm_dispatch_+0x1ca>
 8001982:	466d      	mov	r5, sp
 8001984:	eb05 0589 	add.w	r5, r5, r9, lsl #2
 8001988:	4620      	mov	r0, r4
 800198a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800198e:	496c      	ldr	r1, [pc, #432]	; (8001b40 <QHsm_dispatch_+0x2a4>)
 8001990:	f008 0601 	and.w	r6, r8, #1
 8001994:	4798      	blx	r3
 8001996:	f1b8 0801 	subs.w	r8, r8, #1
 800199a:	d418      	bmi.n	80019ce <QHsm_dispatch_+0x132>
 800199c:	b13e      	cbz	r6, 80019ae <QHsm_dispatch_+0x112>
 800199e:	f855 2d04 	ldr.w	r2, [r5, #-4]!
 80019a2:	4967      	ldr	r1, [pc, #412]	; (8001b40 <QHsm_dispatch_+0x2a4>)
 80019a4:	4620      	mov	r0, r4
 80019a6:	4790      	blx	r2
 80019a8:	f1b8 0801 	subs.w	r8, r8, #1
 80019ac:	d40f      	bmi.n	80019ce <QHsm_dispatch_+0x132>
 80019ae:	f855 3c04 	ldr.w	r3, [r5, #-4]
 80019b2:	4963      	ldr	r1, [pc, #396]	; (8001b40 <QHsm_dispatch_+0x2a4>)
 80019b4:	4620      	mov	r0, r4
 80019b6:	4798      	blx	r3
 80019b8:	f108 38ff 	add.w	r8, r8, #4294967295
 80019bc:	f855 6c08 	ldr.w	r6, [r5, #-8]
 80019c0:	495f      	ldr	r1, [pc, #380]	; (8001b40 <QHsm_dispatch_+0x2a4>)
 80019c2:	4620      	mov	r0, r4
 80019c4:	3d08      	subs	r5, #8
 80019c6:	47b0      	blx	r6
 80019c8:	f1b8 0801 	subs.w	r8, r8, #1
 80019cc:	d5ef      	bpl.n	80019ae <QHsm_dispatch_+0x112>
 80019ce:	9e00      	ldr	r6, [sp, #0]
 80019d0:	60a6      	str	r6, [r4, #8]
 80019d2:	4620      	mov	r0, r4
 80019d4:	495b      	ldr	r1, [pc, #364]	; (8001b44 <QHsm_dispatch_+0x2a8>)
 80019d6:	47b0      	blx	r6
 80019d8:	2804      	cmp	r0, #4
 80019da:	f47f af76 	bne.w	80018ca <QHsm_dispatch_+0x2e>
 80019de:	68a5      	ldr	r5, [r4, #8]
 80019e0:	4955      	ldr	r1, [pc, #340]	; (8001b38 <QHsm_dispatch_+0x29c>)
 80019e2:	9500      	str	r5, [sp, #0]
 80019e4:	4620      	mov	r0, r4
 80019e6:	47a8      	blx	r5
 80019e8:	68a2      	ldr	r2, [r4, #8]
 80019ea:	42b2      	cmp	r2, r6
 80019ec:	d033      	beq.n	8001a56 <QHsm_dispatch_+0x1ba>
 80019ee:	46e8      	mov	r8, sp
 80019f0:	466f      	mov	r7, sp
 80019f2:	2500      	movs	r5, #0
 80019f4:	f847 2f04 	str.w	r2, [r7, #4]!
 80019f8:	4620      	mov	r0, r4
 80019fa:	494f      	ldr	r1, [pc, #316]	; (8001b38 <QHsm_dispatch_+0x29c>)
 80019fc:	4790      	blx	r2
 80019fe:	68a2      	ldr	r2, [r4, #8]
 8001a00:	3501      	adds	r5, #1
 8001a02:	42b2      	cmp	r2, r6
 8001a04:	d1f6      	bne.n	80019f4 <QHsm_dispatch_+0x158>
 8001a06:	9900      	ldr	r1, [sp, #0]
 8001a08:	2d05      	cmp	r5, #5
 8001a0a:	60a1      	str	r1, [r4, #8]
 8001a0c:	dd03      	ble.n	8001a16 <QHsm_dispatch_+0x17a>
 8001a0e:	4849      	ldr	r0, [pc, #292]	; (8001b34 <QHsm_dispatch_+0x298>)
 8001a10:	2184      	movs	r1, #132	; 0x84
 8001a12:	f7fe fd0f 	bl	8000434 <Q_onAssert>
 8001a16:	ab06      	add	r3, sp, #24
 8001a18:	00a8      	lsls	r0, r5, #2
 8001a1a:	181e      	adds	r6, r3, r0
 8001a1c:	f856 3c18 	ldr.w	r3, [r6, #-24]
 8001a20:	07ea      	lsls	r2, r5, #31
 8001a22:	eb08 0600 	add.w	r6, r8, r0
 8001a26:	d50f      	bpl.n	8001a48 <QHsm_dispatch_+0x1ac>
 8001a28:	4620      	mov	r0, r4
 8001a2a:	4945      	ldr	r1, [pc, #276]	; (8001b40 <QHsm_dispatch_+0x2a4>)
 8001a2c:	4798      	blx	r3
 8001a2e:	3d01      	subs	r5, #1
 8001a30:	d40f      	bmi.n	8001a52 <QHsm_dispatch_+0x1b6>
 8001a32:	f856 3d04 	ldr.w	r3, [r6, #-4]!
 8001a36:	e007      	b.n	8001a48 <QHsm_dispatch_+0x1ac>
 8001a38:	f856 2d04 	ldr.w	r2, [r6, #-4]!
 8001a3c:	4940      	ldr	r1, [pc, #256]	; (8001b40 <QHsm_dispatch_+0x2a4>)
 8001a3e:	4620      	mov	r0, r4
 8001a40:	4790      	blx	r2
 8001a42:	f856 3d04 	ldr.w	r3, [r6, #-4]!
 8001a46:	3d01      	subs	r5, #1
 8001a48:	4620      	mov	r0, r4
 8001a4a:	493d      	ldr	r1, [pc, #244]	; (8001b40 <QHsm_dispatch_+0x2a4>)
 8001a4c:	4798      	blx	r3
 8001a4e:	3d01      	subs	r5, #1
 8001a50:	d5f2      	bpl.n	8001a38 <QHsm_dispatch_+0x19c>
 8001a52:	9e00      	ldr	r6, [sp, #0]
 8001a54:	e7bd      	b.n	80019d2 <QHsm_dispatch_+0x136>
 8001a56:	f10d 0818 	add.w	r8, sp, #24
 8001a5a:	2500      	movs	r5, #0
 8001a5c:	f858 3d18 	ldr.w	r3, [r8, #-24]!
 8001a60:	4628      	mov	r0, r5
 8001a62:	60a3      	str	r3, [r4, #8]
 8001a64:	e7dc      	b.n	8001a20 <QHsm_dispatch_+0x184>
 8001a66:	4833      	ldr	r0, [pc, #204]	; (8001b34 <QHsm_dispatch_+0x298>)
 8001a68:	21e6      	movs	r1, #230	; 0xe6
 8001a6a:	f7fe fce3 	bl	8000434 <Q_onAssert>
 8001a6e:	466d      	mov	r5, sp
 8001a70:	e788      	b.n	8001984 <QHsm_dispatch_+0xe8>
 8001a72:	4620      	mov	r0, r4
 8001a74:	4931      	ldr	r1, [pc, #196]	; (8001b3c <QHsm_dispatch_+0x2a0>)
 8001a76:	47a8      	blx	r5
 8001a78:	f04f 0800 	mov.w	r8, #0
 8001a7c:	f04f 0901 	mov.w	r9, #1
 8001a80:	e77f      	b.n	8001982 <QHsm_dispatch_+0xe6>
 8001a82:	2701      	movs	r7, #1
 8001a84:	f107 0901 	add.w	r9, r7, #1
 8001a88:	492c      	ldr	r1, [pc, #176]	; (8001b3c <QHsm_dispatch_+0x2a0>)
 8001a8a:	4620      	mov	r0, r4
 8001a8c:	eb0d 0989 	add.w	r9, sp, r9, lsl #2
 8001a90:	47a8      	blx	r5
 8001a92:	4648      	mov	r0, r9
 8001a94:	466d      	mov	r5, sp
 8001a96:	f850 1d04 	ldr.w	r1, [r0, #-4]!
 8001a9a:	428e      	cmp	r6, r1
 8001a9c:	46b8      	mov	r8, r7
 8001a9e:	f007 0301 	and.w	r3, r7, #1
 8001aa2:	d017      	beq.n	8001ad4 <QHsm_dispatch_+0x238>
 8001aa4:	f1b7 0801 	subs.w	r8, r7, #1
 8001aa8:	d41d      	bmi.n	8001ae6 <QHsm_dispatch_+0x24a>
 8001aaa:	b133      	cbz	r3, 8001aba <QHsm_dispatch_+0x21e>
 8001aac:	f850 2d04 	ldr.w	r2, [r0, #-4]!
 8001ab0:	4296      	cmp	r6, r2
 8001ab2:	d00f      	beq.n	8001ad4 <QHsm_dispatch_+0x238>
 8001ab4:	f1b8 0801 	subs.w	r8, r8, #1
 8001ab8:	d415      	bmi.n	8001ae6 <QHsm_dispatch_+0x24a>
 8001aba:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8001abe:	1f02      	subs	r2, r0, #4
 8001ac0:	429e      	cmp	r6, r3
 8001ac2:	f1a2 0004 	sub.w	r0, r2, #4
 8001ac6:	d005      	beq.n	8001ad4 <QHsm_dispatch_+0x238>
 8001ac8:	f852 1c04 	ldr.w	r1, [r2, #-4]
 8001acc:	428e      	cmp	r6, r1
 8001ace:	f108 38ff 	add.w	r8, r8, #4294967295
 8001ad2:	d1ef      	bne.n	8001ab4 <QHsm_dispatch_+0x218>
 8001ad4:	f108 38ff 	add.w	r8, r8, #4294967295
 8001ad8:	f1b8 0f00 	cmp.w	r8, #0
 8001adc:	f6ff af77 	blt.w	80019ce <QHsm_dispatch_+0x132>
 8001ae0:	f108 0901 	add.w	r9, r8, #1
 8001ae4:	e74e      	b.n	8001984 <QHsm_dispatch_+0xe8>
 8001ae6:	4620      	mov	r0, r4
 8001ae8:	4914      	ldr	r1, [pc, #80]	; (8001b3c <QHsm_dispatch_+0x2a0>)
 8001aea:	47b0      	blx	r6
 8001aec:	2801      	cmp	r0, #1
 8001aee:	d02b      	beq.n	8001b48 <QHsm_dispatch_+0x2ac>
 8001af0:	68a6      	ldr	r6, [r4, #8]
 8001af2:	f859 1c04 	ldr.w	r1, [r9, #-4]
 8001af6:	428e      	cmp	r6, r1
 8001af8:	463b      	mov	r3, r7
 8001afa:	f007 0001 	and.w	r0, r7, #1
 8001afe:	f1a9 0204 	sub.w	r2, r9, #4
 8001b02:	d014      	beq.n	8001b2e <QHsm_dispatch_+0x292>
 8001b04:	1e7b      	subs	r3, r7, #1
 8001b06:	d4ee      	bmi.n	8001ae6 <QHsm_dispatch_+0x24a>
 8001b08:	b128      	cbz	r0, 8001b16 <QHsm_dispatch_+0x27a>
 8001b0a:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8001b0e:	428e      	cmp	r6, r1
 8001b10:	d00d      	beq.n	8001b2e <QHsm_dispatch_+0x292>
 8001b12:	3b01      	subs	r3, #1
 8001b14:	d4e7      	bmi.n	8001ae6 <QHsm_dispatch_+0x24a>
 8001b16:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8001b1a:	1f11      	subs	r1, r2, #4
 8001b1c:	4286      	cmp	r6, r0
 8001b1e:	f1a1 0204 	sub.w	r2, r1, #4
 8001b22:	d004      	beq.n	8001b2e <QHsm_dispatch_+0x292>
 8001b24:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8001b28:	3b01      	subs	r3, #1
 8001b2a:	4286      	cmp	r6, r0
 8001b2c:	d1f1      	bne.n	8001b12 <QHsm_dispatch_+0x276>
 8001b2e:	f103 38ff 	add.w	r8, r3, #4294967295
 8001b32:	e7d1      	b.n	8001ad8 <QHsm_dispatch_+0x23c>
 8001b34:	08002294 	.word	0x08002294
 8001b38:	080023a4 	.word	0x080023a4
 8001b3c:	080023ac 	.word	0x080023ac
 8001b40:	080023a8 	.word	0x080023a8
 8001b44:	080023b0 	.word	0x080023b0
 8001b48:	4620      	mov	r0, r4
 8001b4a:	4903      	ldr	r1, [pc, #12]	; (8001b58 <QHsm_dispatch_+0x2bc>)
 8001b4c:	47b0      	blx	r6
 8001b4e:	e7cf      	b.n	8001af0 <QHsm_dispatch_+0x254>
 8001b50:	4620      	mov	r0, r4
 8001b52:	4902      	ldr	r1, [pc, #8]	; (8001b5c <QHsm_dispatch_+0x2c0>)
 8001b54:	47a8      	blx	r5
 8001b56:	e73a      	b.n	80019ce <QHsm_dispatch_+0x132>
 8001b58:	080023a4 	.word	0x080023a4
 8001b5c:	080023ac 	.word	0x080023ac

08001b60 <QK_mutexLock>:
 8001b60:	4602      	mov	r2, r0
 8001b62:	203f      	movs	r0, #63	; 0x3f
 8001b64:	f380 8811 	msr	BASEPRI, r0
 8001b68:	4b05      	ldr	r3, [pc, #20]	; (8001b80 <QK_mutexLock+0x20>)
 8001b6a:	7819      	ldrb	r1, [r3, #0]
 8001b6c:	7818      	ldrb	r0, [r3, #0]
 8001b6e:	4290      	cmp	r0, r2
 8001b70:	bf38      	it	cc
 8001b72:	701a      	strbcc	r2, [r3, #0]
 8001b74:	2000      	movs	r0, #0
 8001b76:	f380 8811 	msr	BASEPRI, r0
 8001b7a:	4608      	mov	r0, r1
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	20000218 	.word	0x20000218

08001b84 <QK_mutexUnlock>:
 8001b84:	b508      	push	{r3, lr}
 8001b86:	4603      	mov	r3, r0
 8001b88:	203f      	movs	r0, #63	; 0x3f
 8001b8a:	f380 8811 	msr	BASEPRI, r0
 8001b8e:	4a08      	ldr	r2, [pc, #32]	; (8001bb0 <QK_mutexUnlock+0x2c>)
 8001b90:	7811      	ldrb	r1, [r2, #0]
 8001b92:	4299      	cmp	r1, r3
 8001b94:	d803      	bhi.n	8001b9e <QK_mutexUnlock+0x1a>
 8001b96:	2000      	movs	r0, #0
 8001b98:	f380 8811 	msr	BASEPRI, r0
 8001b9c:	bd08      	pop	{r3, pc}
 8001b9e:	7013      	strb	r3, [r2, #0]
 8001ba0:	f000 f906 	bl	8001db0 <QK_schedPrio_>
 8001ba4:	2800      	cmp	r0, #0
 8001ba6:	d0f6      	beq.n	8001b96 <QK_mutexUnlock+0x12>
 8001ba8:	f000 f92a 	bl	8001e00 <QK_sched_>
 8001bac:	e7f3      	b.n	8001b96 <QK_mutexUnlock+0x12>
 8001bae:	bf00      	nop
 8001bb0:	20000218 	.word	0x20000218

08001bb4 <QF_gc>:
 8001bb4:	b538      	push	{r3, r4, r5, lr}
 8001bb6:	7883      	ldrb	r3, [r0, #2]
 8001bb8:	4604      	mov	r4, r0
 8001bba:	b16b      	cbz	r3, 8001bd8 <QF_gc+0x24>
 8001bbc:	203f      	movs	r0, #63	; 0x3f
 8001bbe:	f380 8811 	msr	BASEPRI, r0
 8001bc2:	78e2      	ldrb	r2, [r4, #3]
 8001bc4:	2a01      	cmp	r2, #1
 8001bc6:	d908      	bls.n	8001bda <QF_gc+0x26>
 8001bc8:	78e2      	ldrb	r2, [r4, #3]
 8001bca:	1e50      	subs	r0, r2, #1
 8001bcc:	b2c1      	uxtb	r1, r0
 8001bce:	70e1      	strb	r1, [r4, #3]
 8001bd0:	2000      	movs	r0, #0
 8001bd2:	f380 8811 	msr	BASEPRI, r0
 8001bd6:	bd38      	pop	{r3, r4, r5, pc}
 8001bd8:	bd38      	pop	{r3, r4, r5, pc}
 8001bda:	1e5d      	subs	r5, r3, #1
 8001bdc:	2000      	movs	r0, #0
 8001bde:	f380 8811 	msr	BASEPRI, r0
 8001be2:	4809      	ldr	r0, [pc, #36]	; (8001c08 <QF_gc+0x54>)
 8001be4:	6801      	ldr	r1, [r0, #0]
 8001be6:	428d      	cmp	r5, r1
 8001be8:	d209      	bcs.n	8001bfe <QF_gc+0x4a>
 8001bea:	4b08      	ldr	r3, [pc, #32]	; (8001c0c <QF_gc+0x58>)
 8001bec:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8001bf0:	eb03 0085 	add.w	r0, r3, r5, lsl #2
 8001bf4:	4621      	mov	r1, r4
 8001bf6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001bfa:	f000 b9a9 	b.w	8001f50 <QMPool_put>
 8001bfe:	4804      	ldr	r0, [pc, #16]	; (8001c10 <QF_gc+0x5c>)
 8001c00:	214b      	movs	r1, #75	; 0x4b
 8001c02:	f7fe fc17 	bl	8000434 <Q_onAssert>
 8001c06:	e7f0      	b.n	8001bea <QF_gc+0x36>
 8001c08:	20000170 	.word	0x20000170
 8001c0c:	20000134 	.word	0x20000134
 8001c10:	080022a0 	.word	0x080022a0

08001c14 <QActive_postLIFO_>:
 8001c14:	b570      	push	{r4, r5, r6, lr}
 8001c16:	4604      	mov	r4, r0
 8001c18:	460d      	mov	r5, r1
 8001c1a:	203f      	movs	r0, #63	; 0x3f
 8001c1c:	f380 8811 	msr	BASEPRI, r0
 8001c20:	7de6      	ldrb	r6, [r4, #23]
 8001c22:	b1fe      	cbz	r6, 8001c64 <QActive_postLIFO_+0x50>
 8001c24:	78ab      	ldrb	r3, [r5, #2]
 8001c26:	b11b      	cbz	r3, 8001c30 <QActive_postLIFO_+0x1c>
 8001c28:	78e8      	ldrb	r0, [r5, #3]
 8001c2a:	1c41      	adds	r1, r0, #1
 8001c2c:	b2ca      	uxtb	r2, r1
 8001c2e:	70ea      	strb	r2, [r5, #3]
 8001c30:	1e73      	subs	r3, r6, #1
 8001c32:	b2d9      	uxtb	r1, r3
 8001c34:	7e20      	ldrb	r0, [r4, #24]
 8001c36:	75e1      	strb	r1, [r4, #23]
 8001c38:	68e3      	ldr	r3, [r4, #12]
 8001c3a:	60e5      	str	r5, [r4, #12]
 8001c3c:	4288      	cmp	r0, r1
 8001c3e:	bf88      	it	hi
 8001c40:	7621      	strbhi	r1, [r4, #24]
 8001c42:	b1bb      	cbz	r3, 8001c74 <QActive_postLIFO_+0x60>
 8001c44:	7da2      	ldrb	r2, [r4, #22]
 8001c46:	7d20      	ldrb	r0, [r4, #20]
 8001c48:	1c51      	adds	r1, r2, #1
 8001c4a:	b2ca      	uxtb	r2, r1
 8001c4c:	75a2      	strb	r2, [r4, #22]
 8001c4e:	7da1      	ldrb	r1, [r4, #22]
 8001c50:	4288      	cmp	r0, r1
 8001c52:	d00c      	beq.n	8001c6e <QActive_postLIFO_+0x5a>
 8001c54:	7da1      	ldrb	r1, [r4, #22]
 8001c56:	6922      	ldr	r2, [r4, #16]
 8001c58:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8001c5c:	2000      	movs	r0, #0
 8001c5e:	f380 8811 	msr	BASEPRI, r0
 8001c62:	bd70      	pop	{r4, r5, r6, pc}
 8001c64:	4810      	ldr	r0, [pc, #64]	; (8001ca8 <QActive_postLIFO_+0x94>)
 8001c66:	213b      	movs	r1, #59	; 0x3b
 8001c68:	f7fe fbe4 	bl	8000434 <Q_onAssert>
 8001c6c:	e7da      	b.n	8001c24 <QActive_postLIFO_+0x10>
 8001c6e:	2000      	movs	r0, #0
 8001c70:	75a0      	strb	r0, [r4, #22]
 8001c72:	e7ef      	b.n	8001c54 <QActive_postLIFO_+0x40>
 8001c74:	7f24      	ldrb	r4, [r4, #28]
 8001c76:	480d      	ldr	r0, [pc, #52]	; (8001cac <QActive_postLIFO_+0x98>)
 8001c78:	4b0d      	ldr	r3, [pc, #52]	; (8001cb0 <QActive_postLIFO_+0x9c>)
 8001c7a:	5d01      	ldrb	r1, [r0, r4]
 8001c7c:	480d      	ldr	r0, [pc, #52]	; (8001cb4 <QActive_postLIFO_+0xa0>)
 8001c7e:	185a      	adds	r2, r3, r1
 8001c80:	5d04      	ldrb	r4, [r0, r4]
 8001c82:	1841      	adds	r1, r0, r1
 8001c84:	7850      	ldrb	r0, [r2, #1]
 8001c86:	7849      	ldrb	r1, [r1, #1]
 8001c88:	4320      	orrs	r0, r4
 8001c8a:	7050      	strb	r0, [r2, #1]
 8001c8c:	781a      	ldrb	r2, [r3, #0]
 8001c8e:	430a      	orrs	r2, r1
 8001c90:	701a      	strb	r2, [r3, #0]
 8001c92:	4b09      	ldr	r3, [pc, #36]	; (8001cb8 <QActive_postLIFO_+0xa4>)
 8001c94:	6818      	ldr	r0, [r3, #0]
 8001c96:	2800      	cmp	r0, #0
 8001c98:	d1e0      	bne.n	8001c5c <QActive_postLIFO_+0x48>
 8001c9a:	f000 f889 	bl	8001db0 <QK_schedPrio_>
 8001c9e:	2800      	cmp	r0, #0
 8001ca0:	d0dc      	beq.n	8001c5c <QActive_postLIFO_+0x48>
 8001ca2:	f000 f8ad 	bl	8001e00 <QK_sched_>
 8001ca6:	e7d9      	b.n	8001c5c <QActive_postLIFO_+0x48>
 8001ca8:	080022a8 	.word	0x080022a8
 8001cac:	080022b0 	.word	0x080022b0
 8001cb0:	20000120 	.word	0x20000120
 8001cb4:	08002338 	.word	0x08002338
 8001cb8:	2000012c 	.word	0x2000012c

08001cbc <QHsm_init_>:
 8001cbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001cc0:	e890 0108 	ldmia.w	r0, {r3, r8}
 8001cc4:	b087      	sub	sp, #28
 8001cc6:	4606      	mov	r6, r0
 8001cc8:	460c      	mov	r4, r1
 8001cca:	b123      	cbz	r3, 8001cd6 <QHsm_init_+0x1a>
 8001ccc:	6883      	ldr	r3, [r0, #8]
 8001cce:	b113      	cbz	r3, 8001cd6 <QHsm_init_+0x1a>
 8001cd0:	4a2c      	ldr	r2, [pc, #176]	; (8001d84 <QHsm_init_+0xc8>)
 8001cd2:	4590      	cmp	r8, r2
 8001cd4:	d004      	beq.n	8001ce0 <QHsm_init_+0x24>
 8001cd6:	482c      	ldr	r0, [pc, #176]	; (8001d88 <QHsm_init_+0xcc>)
 8001cd8:	2140      	movs	r1, #64	; 0x40
 8001cda:	f7fe fbab 	bl	8000434 <Q_onAssert>
 8001cde:	68b3      	ldr	r3, [r6, #8]
 8001ce0:	4630      	mov	r0, r6
 8001ce2:	4621      	mov	r1, r4
 8001ce4:	4798      	blx	r3
 8001ce6:	2804      	cmp	r0, #4
 8001ce8:	d003      	beq.n	8001cf2 <QHsm_init_+0x36>
 8001cea:	4827      	ldr	r0, [pc, #156]	; (8001d88 <QHsm_init_+0xcc>)
 8001cec:	2143      	movs	r1, #67	; 0x43
 8001cee:	f7fe fba1 	bl	8000434 <Q_onAssert>
 8001cf2:	46e9      	mov	r9, sp
 8001cf4:	68b7      	ldr	r7, [r6, #8]
 8001cf6:	4925      	ldr	r1, [pc, #148]	; (8001d8c <QHsm_init_+0xd0>)
 8001cf8:	9700      	str	r7, [sp, #0]
 8001cfa:	4630      	mov	r0, r6
 8001cfc:	47b8      	blx	r7
 8001cfe:	68b5      	ldr	r5, [r6, #8]
 8001d00:	4545      	cmp	r5, r8
 8001d02:	d03b      	beq.n	8001d7c <QHsm_init_+0xc0>
 8001d04:	466f      	mov	r7, sp
 8001d06:	2400      	movs	r4, #0
 8001d08:	e000      	b.n	8001d0c <QHsm_init_+0x50>
 8001d0a:	4605      	mov	r5, r0
 8001d0c:	f847 5f04 	str.w	r5, [r7, #4]!
 8001d10:	4630      	mov	r0, r6
 8001d12:	491e      	ldr	r1, [pc, #120]	; (8001d8c <QHsm_init_+0xd0>)
 8001d14:	47a8      	blx	r5
 8001d16:	68b0      	ldr	r0, [r6, #8]
 8001d18:	3401      	adds	r4, #1
 8001d1a:	4540      	cmp	r0, r8
 8001d1c:	d1f5      	bne.n	8001d0a <QHsm_init_+0x4e>
 8001d1e:	9900      	ldr	r1, [sp, #0]
 8001d20:	2c05      	cmp	r4, #5
 8001d22:	60b1      	str	r1, [r6, #8]
 8001d24:	dd03      	ble.n	8001d2e <QHsm_init_+0x72>
 8001d26:	4818      	ldr	r0, [pc, #96]	; (8001d88 <QHsm_init_+0xcc>)
 8001d28:	2158      	movs	r1, #88	; 0x58
 8001d2a:	f7fe fb83 	bl	8000434 <Q_onAssert>
 8001d2e:	07e3      	lsls	r3, r4, #31
 8001d30:	eb09 0784 	add.w	r7, r9, r4, lsl #2
 8001d34:	d50f      	bpl.n	8001d56 <QHsm_init_+0x9a>
 8001d36:	4630      	mov	r0, r6
 8001d38:	4915      	ldr	r1, [pc, #84]	; (8001d90 <QHsm_init_+0xd4>)
 8001d3a:	47a8      	blx	r5
 8001d3c:	3c01      	subs	r4, #1
 8001d3e:	d40f      	bmi.n	8001d60 <QHsm_init_+0xa4>
 8001d40:	f857 5d04 	ldr.w	r5, [r7, #-4]!
 8001d44:	e007      	b.n	8001d56 <QHsm_init_+0x9a>
 8001d46:	f857 5d04 	ldr.w	r5, [r7, #-4]!
 8001d4a:	4911      	ldr	r1, [pc, #68]	; (8001d90 <QHsm_init_+0xd4>)
 8001d4c:	4630      	mov	r0, r6
 8001d4e:	47a8      	blx	r5
 8001d50:	f857 5d04 	ldr.w	r5, [r7, #-4]!
 8001d54:	3c01      	subs	r4, #1
 8001d56:	4630      	mov	r0, r6
 8001d58:	490d      	ldr	r1, [pc, #52]	; (8001d90 <QHsm_init_+0xd4>)
 8001d5a:	47a8      	blx	r5
 8001d5c:	3c01      	subs	r4, #1
 8001d5e:	d5f2      	bpl.n	8001d46 <QHsm_init_+0x8a>
 8001d60:	f8dd 8000 	ldr.w	r8, [sp]
 8001d64:	490b      	ldr	r1, [pc, #44]	; (8001d94 <QHsm_init_+0xd8>)
 8001d66:	4630      	mov	r0, r6
 8001d68:	47c0      	blx	r8
 8001d6a:	2804      	cmp	r0, #4
 8001d6c:	d0c2      	beq.n	8001cf4 <QHsm_init_+0x38>
 8001d6e:	f8c6 8004 	str.w	r8, [r6, #4]
 8001d72:	f8c6 8008 	str.w	r8, [r6, #8]
 8001d76:	b007      	add	sp, #28
 8001d78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001d7c:	60b7      	str	r7, [r6, #8]
 8001d7e:	463d      	mov	r5, r7
 8001d80:	2400      	movs	r4, #0
 8001d82:	e7d4      	b.n	8001d2e <QHsm_init_+0x72>
 8001d84:	08001efd 	.word	0x08001efd
 8001d88:	0800237c 	.word	0x0800237c
 8001d8c:	080023a4 	.word	0x080023a4
 8001d90:	080023a8 	.word	0x080023a8
 8001d94:	080023b0 	.word	0x080023b0

08001d98 <QHsm_ctor>:
 8001d98:	6081      	str	r1, [r0, #8]
 8001d9a:	4b04      	ldr	r3, [pc, #16]	; (8001dac <QHsm_ctor+0x14>)
 8001d9c:	f641 61fd 	movw	r1, #7933	; 0x1efd
 8001da0:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001da4:	6003      	str	r3, [r0, #0]
 8001da6:	6041      	str	r1, [r0, #4]
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	08002388 	.word	0x08002388

08001db0 <QK_schedPrio_>:
 8001db0:	4b10      	ldr	r3, [pc, #64]	; (8001df4 <QK_schedPrio_+0x44>)
 8001db2:	7818      	ldrb	r0, [r3, #0]
 8001db4:	b1c8      	cbz	r0, 8001dea <QK_schedPrio_+0x3a>
 8001db6:	781a      	ldrb	r2, [r3, #0]
 8001db8:	fab2 f082 	clz	r0, r2
 8001dbc:	f1c0 011f 	rsb	r1, r0, #31
 8001dc0:	b2ca      	uxtb	r2, r1
 8001dc2:	189b      	adds	r3, r3, r2
 8001dc4:	490c      	ldr	r1, [pc, #48]	; (8001df8 <QK_schedPrio_+0x48>)
 8001dc6:	7858      	ldrb	r0, [r3, #1]
 8001dc8:	780b      	ldrb	r3, [r1, #0]
 8001dca:	fab0 f080 	clz	r0, r0
 8001dce:	f1c0 0120 	rsb	r1, r0, #32
 8001dd2:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8001dd6:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 8001dda:	4298      	cmp	r0, r3
 8001ddc:	d908      	bls.n	8001df0 <QK_schedPrio_+0x40>
 8001dde:	4b07      	ldr	r3, [pc, #28]	; (8001dfc <QK_schedPrio_+0x4c>)
 8001de0:	7819      	ldrb	r1, [r3, #0]
 8001de2:	4288      	cmp	r0, r1
 8001de4:	bf98      	it	ls
 8001de6:	2000      	movls	r0, #0
 8001de8:	4770      	bx	lr
 8001dea:	4903      	ldr	r1, [pc, #12]	; (8001df8 <QK_schedPrio_+0x48>)
 8001dec:	780b      	ldrb	r3, [r1, #0]
 8001dee:	4770      	bx	lr
 8001df0:	2000      	movs	r0, #0
 8001df2:	4770      	bx	lr
 8001df4:	20000120 	.word	0x20000120
 8001df8:	20000130 	.word	0x20000130
 8001dfc:	20000218 	.word	0x20000218

08001e00 <QK_sched_>:
 8001e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e04:	4d20      	ldr	r5, [pc, #128]	; (8001e88 <QK_sched_+0x88>)
 8001e06:	4e21      	ldr	r6, [pc, #132]	; (8001e8c <QK_sched_+0x8c>)
 8001e08:	f895 b000 	ldrb.w	fp, [r5]
 8001e0c:	f8df 8080 	ldr.w	r8, [pc, #128]	; 8001e90 <QK_sched_+0x90>
 8001e10:	f8df a080 	ldr.w	sl, [pc, #128]	; 8001e94 <QK_sched_+0x94>
 8001e14:	b083      	sub	sp, #12
 8001e16:	fa5f f98b 	uxtb.w	r9, fp
 8001e1a:	f88d b007 	strb.w	fp, [sp, #7]
 8001e1e:	4637      	mov	r7, r6
 8001e20:	f858 4020 	ldr.w	r4, [r8, r0, lsl #2]
 8001e24:	7028      	strb	r0, [r5, #0]
 8001e26:	2000      	movs	r0, #0
 8001e28:	f380 8811 	msr	BASEPRI, r0
 8001e2c:	4620      	mov	r0, r4
 8001e2e:	f000 f8b7 	bl	8001fa0 <QActive_get_>
 8001e32:	6822      	ldr	r2, [r4, #0]
 8001e34:	4601      	mov	r1, r0
 8001e36:	4683      	mov	fp, r0
 8001e38:	6853      	ldr	r3, [r2, #4]
 8001e3a:	4620      	mov	r0, r4
 8001e3c:	4798      	blx	r3
 8001e3e:	4658      	mov	r0, fp
 8001e40:	f7ff feb8 	bl	8001bb4 <QF_gc>
 8001e44:	203f      	movs	r0, #63	; 0x3f
 8001e46:	f380 8811 	msr	BASEPRI, r0
 8001e4a:	7830      	ldrb	r0, [r6, #0]
 8001e4c:	b928      	cbnz	r0, 8001e5a <QK_sched_+0x5a>
 8001e4e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001e52:	702b      	strb	r3, [r5, #0]
 8001e54:	b003      	add	sp, #12
 8001e56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001e5a:	7839      	ldrb	r1, [r7, #0]
 8001e5c:	fab1 f281 	clz	r2, r1
 8001e60:	f1c2 031f 	rsb	r3, r2, #31
 8001e64:	b2d9      	uxtb	r1, r3
 8001e66:	1878      	adds	r0, r7, r1
 8001e68:	7842      	ldrb	r2, [r0, #1]
 8001e6a:	fab2 f382 	clz	r3, r2
 8001e6e:	f1c3 0020 	rsb	r0, r3, #32
 8001e72:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8001e76:	f001 00ff 	and.w	r0, r1, #255	; 0xff
 8001e7a:	4581      	cmp	r9, r0
 8001e7c:	d2e7      	bcs.n	8001e4e <QK_sched_+0x4e>
 8001e7e:	f89a 2000 	ldrb.w	r2, [sl]
 8001e82:	4290      	cmp	r0, r2
 8001e84:	d8cc      	bhi.n	8001e20 <QK_sched_+0x20>
 8001e86:	e7e2      	b.n	8001e4e <QK_sched_+0x4e>
 8001e88:	20000130 	.word	0x20000130
 8001e8c:	20000120 	.word	0x20000120
 8001e90:	20000194 	.word	0x20000194
 8001e94:	20000218 	.word	0x20000218

08001e98 <QTimeEvt_armX>:
 8001e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e9a:	4604      	mov	r4, r0
 8001e9c:	78c6      	ldrb	r6, [r0, #3]
 8001e9e:	8980      	ldrh	r0, [r0, #12]
 8001ea0:	460d      	mov	r5, r1
 8001ea2:	68a1      	ldr	r1, [r4, #8]
 8001ea4:	4617      	mov	r7, r2
 8001ea6:	f006 067f 	and.w	r6, r6, #127	; 0x7f
 8001eaa:	b282      	uxth	r2, r0
 8001eac:	b101      	cbz	r1, 8001eb0 <QTimeEvt_armX+0x18>
 8001eae:	b1ca      	cbz	r2, 8001ee4 <QTimeEvt_armX+0x4c>
 8001eb0:	4810      	ldr	r0, [pc, #64]	; (8001ef4 <QTimeEvt_armX+0x5c>)
 8001eb2:	213b      	movs	r1, #59	; 0x3b
 8001eb4:	f7fe fabe 	bl	8000434 <Q_onAssert>
 8001eb8:	203f      	movs	r0, #63	; 0x3f
 8001eba:	f380 8811 	msr	BASEPRI, r0
 8001ebe:	81a5      	strh	r5, [r4, #12]
 8001ec0:	78e0      	ldrb	r0, [r4, #3]
 8001ec2:	81e7      	strh	r7, [r4, #14]
 8001ec4:	0603      	lsls	r3, r0, #24
 8001ec6:	d409      	bmi.n	8001edc <QTimeEvt_armX+0x44>
 8001ec8:	78e1      	ldrb	r1, [r4, #3]
 8001eca:	4b0b      	ldr	r3, [pc, #44]	; (8001ef8 <QTimeEvt_armX+0x60>)
 8001ecc:	f041 0280 	orr.w	r2, r1, #128	; 0x80
 8001ed0:	eb03 1006 	add.w	r0, r3, r6, lsl #4
 8001ed4:	70e2      	strb	r2, [r4, #3]
 8001ed6:	6881      	ldr	r1, [r0, #8]
 8001ed8:	6061      	str	r1, [r4, #4]
 8001eda:	6084      	str	r4, [r0, #8]
 8001edc:	2000      	movs	r0, #0
 8001ede:	f380 8811 	msr	BASEPRI, r0
 8001ee2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ee4:	2d00      	cmp	r5, #0
 8001ee6:	d0e3      	beq.n	8001eb0 <QTimeEvt_armX+0x18>
 8001ee8:	2e01      	cmp	r6, #1
 8001eea:	d8e1      	bhi.n	8001eb0 <QTimeEvt_armX+0x18>
 8001eec:	8823      	ldrh	r3, [r4, #0]
 8001eee:	2b03      	cmp	r3, #3
 8001ef0:	d8e2      	bhi.n	8001eb8 <QTimeEvt_armX+0x20>
 8001ef2:	e7dd      	b.n	8001eb0 <QTimeEvt_armX+0x18>
 8001ef4:	08002390 	.word	0x08002390
 8001ef8:	20000174 	.word	0x20000174

08001efc <QHsm_top>:
 8001efc:	2003      	movs	r0, #3
 8001efe:	4770      	bx	lr

08001f00 <QTimeEvt_ctorX>:
 8001f00:	2a03      	cmp	r2, #3
 8001f02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f04:	4615      	mov	r5, r2
 8001f06:	4604      	mov	r4, r0
 8001f08:	460f      	mov	r7, r1
 8001f0a:	461e      	mov	r6, r3
 8001f0c:	dd01      	ble.n	8001f12 <QTimeEvt_ctorX+0x12>
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d903      	bls.n	8001f1a <QTimeEvt_ctorX+0x1a>
 8001f12:	4806      	ldr	r0, [pc, #24]	; (8001f2c <QTimeEvt_ctorX+0x2c>)
 8001f14:	2133      	movs	r1, #51	; 0x33
 8001f16:	f7fe fa8d 	bl	8000434 <Q_onAssert>
 8001f1a:	2000      	movs	r0, #0
 8001f1c:	6060      	str	r0, [r4, #4]
 8001f1e:	81e0      	strh	r0, [r4, #14]
 8001f20:	81a0      	strh	r0, [r4, #12]
 8001f22:	8025      	strh	r5, [r4, #0]
 8001f24:	60a7      	str	r7, [r4, #8]
 8001f26:	70a0      	strb	r0, [r4, #2]
 8001f28:	70e6      	strb	r6, [r4, #3]
 8001f2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f2c:	08002398 	.word	0x08002398

08001f30 <QEQueue_init>:
 8001f30:	b2d2      	uxtb	r2, r2
 8001f32:	b410      	push	{r4}
 8001f34:	1c54      	adds	r4, r2, #1
 8001f36:	2300      	movs	r3, #0
 8001f38:	b2e4      	uxtb	r4, r4
 8001f3a:	6003      	str	r3, [r0, #0]
 8001f3c:	7243      	strb	r3, [r0, #9]
 8001f3e:	7283      	strb	r3, [r0, #10]
 8001f40:	72c4      	strb	r4, [r0, #11]
 8001f42:	7ac3      	ldrb	r3, [r0, #11]
 8001f44:	6041      	str	r1, [r0, #4]
 8001f46:	7202      	strb	r2, [r0, #8]
 8001f48:	7303      	strb	r3, [r0, #12]
 8001f4a:	bc10      	pop	{r4}
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop

08001f50 <QMPool_put>:
 8001f50:	b538      	push	{r3, r4, r5, lr}
 8001f52:	8a03      	ldrh	r3, [r0, #16]
 8001f54:	89c2      	ldrh	r2, [r0, #14]
 8001f56:	4604      	mov	r4, r0
 8001f58:	b298      	uxth	r0, r3
 8001f5a:	4282      	cmp	r2, r0
 8001f5c:	460d      	mov	r5, r1
 8001f5e:	d917      	bls.n	8001f90 <QMPool_put+0x40>
 8001f60:	6861      	ldr	r1, [r4, #4]
 8001f62:	42a9      	cmp	r1, r5
 8001f64:	d802      	bhi.n	8001f6c <QMPool_put+0x1c>
 8001f66:	68a3      	ldr	r3, [r4, #8]
 8001f68:	429d      	cmp	r5, r3
 8001f6a:	d903      	bls.n	8001f74 <QMPool_put+0x24>
 8001f6c:	480b      	ldr	r0, [pc, #44]	; (8001f9c <QMPool_put+0x4c>)
 8001f6e:	213b      	movs	r1, #59	; 0x3b
 8001f70:	f7fe fa60 	bl	8000434 <Q_onAssert>
 8001f74:	203f      	movs	r0, #63	; 0x3f
 8001f76:	f380 8811 	msr	BASEPRI, r0
 8001f7a:	6822      	ldr	r2, [r4, #0]
 8001f7c:	602a      	str	r2, [r5, #0]
 8001f7e:	6025      	str	r5, [r4, #0]
 8001f80:	8a20      	ldrh	r0, [r4, #16]
 8001f82:	1c41      	adds	r1, r0, #1
 8001f84:	b28b      	uxth	r3, r1
 8001f86:	8223      	strh	r3, [r4, #16]
 8001f88:	2000      	movs	r0, #0
 8001f8a:	f380 8811 	msr	BASEPRI, r0
 8001f8e:	bd38      	pop	{r3, r4, r5, pc}
 8001f90:	4802      	ldr	r0, [pc, #8]	; (8001f9c <QMPool_put+0x4c>)
 8001f92:	213a      	movs	r1, #58	; 0x3a
 8001f94:	f7fe fa4e 	bl	8000434 <Q_onAssert>
 8001f98:	e7e2      	b.n	8001f60 <QMPool_put+0x10>
 8001f9a:	bf00      	nop
 8001f9c:	080023b4 	.word	0x080023b4

08001fa0 <QActive_get_>:
 8001fa0:	b570      	push	{r4, r5, r6, lr}
 8001fa2:	4604      	mov	r4, r0
 8001fa4:	203f      	movs	r0, #63	; 0x3f
 8001fa6:	f380 8811 	msr	BASEPRI, r0
 8001faa:	68e3      	ldr	r3, [r4, #12]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d033      	beq.n	8002018 <QActive_get_+0x78>
 8001fb0:	68e5      	ldr	r5, [r4, #12]
 8001fb2:	7de0      	ldrb	r0, [r4, #23]
 8001fb4:	7d22      	ldrb	r2, [r4, #20]
 8001fb6:	1c41      	adds	r1, r0, #1
 8001fb8:	b2cb      	uxtb	r3, r1
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	75e3      	strb	r3, [r4, #23]
 8001fbe:	d810      	bhi.n	8001fe2 <QActive_get_+0x42>
 8001fc0:	7da0      	ldrb	r0, [r4, #22]
 8001fc2:	6923      	ldr	r3, [r4, #16]
 8001fc4:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
 8001fc8:	60e1      	str	r1, [r4, #12]
 8001fca:	7da0      	ldrb	r0, [r4, #22]
 8001fcc:	b900      	cbnz	r0, 8001fd0 <QActive_get_+0x30>
 8001fce:	75a2      	strb	r2, [r4, #22]
 8001fd0:	7da2      	ldrb	r2, [r4, #22]
 8001fd2:	1e53      	subs	r3, r2, #1
 8001fd4:	b2d9      	uxtb	r1, r3
 8001fd6:	75a1      	strb	r1, [r4, #22]
 8001fd8:	2000      	movs	r0, #0
 8001fda:	f380 8811 	msr	BASEPRI, r0
 8001fde:	4628      	mov	r0, r5
 8001fe0:	bd70      	pop	{r4, r5, r6, pc}
 8001fe2:	1c56      	adds	r6, r2, #1
 8001fe4:	2000      	movs	r0, #0
 8001fe6:	42b3      	cmp	r3, r6
 8001fe8:	60e0      	str	r0, [r4, #12]
 8001fea:	d003      	beq.n	8001ff4 <QActive_get_+0x54>
 8001fec:	480d      	ldr	r0, [pc, #52]	; (8002024 <QActive_get_+0x84>)
 8001fee:	2152      	movs	r1, #82	; 0x52
 8001ff0:	f7fe fa20 	bl	8000434 <Q_onAssert>
 8001ff4:	7f22      	ldrb	r2, [r4, #28]
 8001ff6:	4c0c      	ldr	r4, [pc, #48]	; (8002028 <QActive_get_+0x88>)
 8001ff8:	4b0c      	ldr	r3, [pc, #48]	; (800202c <QActive_get_+0x8c>)
 8001ffa:	5ca0      	ldrb	r0, [r4, r2]
 8001ffc:	4c0c      	ldr	r4, [pc, #48]	; (8002030 <QActive_get_+0x90>)
 8001ffe:	1819      	adds	r1, r3, r0
 8002000:	5ca2      	ldrb	r2, [r4, r2]
 8002002:	784e      	ldrb	r6, [r1, #1]
 8002004:	4032      	ands	r2, r6
 8002006:	704a      	strb	r2, [r1, #1]
 8002008:	2a00      	cmp	r2, #0
 800200a:	d1e5      	bne.n	8001fd8 <QActive_get_+0x38>
 800200c:	1820      	adds	r0, r4, r0
 800200e:	7819      	ldrb	r1, [r3, #0]
 8002010:	7842      	ldrb	r2, [r0, #1]
 8002012:	400a      	ands	r2, r1
 8002014:	701a      	strb	r2, [r3, #0]
 8002016:	e7df      	b.n	8001fd8 <QActive_get_+0x38>
 8002018:	4802      	ldr	r0, [pc, #8]	; (8002024 <QActive_get_+0x84>)
 800201a:	2138      	movs	r1, #56	; 0x38
 800201c:	f7fe fa0a 	bl	8000434 <Q_onAssert>
 8002020:	e7c6      	b.n	8001fb0 <QActive_get_+0x10>
 8002022:	bf00      	nop
 8002024:	080023bc 	.word	0x080023bc
 8002028:	080022b0 	.word	0x080022b0
 800202c:	20000120 	.word	0x20000120
 8002030:	080022f4 	.word	0x080022f4

08002034 <QF_getQueueMin>:
 8002034:	2820      	cmp	r0, #32
 8002036:	b538      	push	{r3, r4, r5, lr}
 8002038:	4604      	mov	r4, r0
 800203a:	4d0a      	ldr	r5, [pc, #40]	; (8002064 <QF_getQueueMin+0x30>)
 800203c:	d80a      	bhi.n	8002054 <QF_getQueueMin+0x20>
 800203e:	f855 3020 	ldr.w	r3, [r5, r0, lsl #2]
 8002042:	b13b      	cbz	r3, 8002054 <QF_getQueueMin+0x20>
 8002044:	203f      	movs	r0, #63	; 0x3f
 8002046:	f380 8811 	msr	BASEPRI, r0
 800204a:	2000      	movs	r0, #0
 800204c:	f380 8811 	msr	BASEPRI, r0
 8002050:	7e18      	ldrb	r0, [r3, #24]
 8002052:	bd38      	pop	{r3, r4, r5, pc}
 8002054:	4804      	ldr	r0, [pc, #16]	; (8002068 <QF_getQueueMin+0x34>)
 8002056:	2166      	movs	r1, #102	; 0x66
 8002058:	f7fe f9ec 	bl	8000434 <Q_onAssert>
 800205c:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8002060:	e7f0      	b.n	8002044 <QF_getQueueMin+0x10>
 8002062:	bf00      	nop
 8002064:	20000194 	.word	0x20000194
 8002068:	080023bc 	.word	0x080023bc

0800206c <__register_exitproc>:
 800206c:	b510      	push	{r4, lr}
 800206e:	4c03      	ldr	r4, [pc, #12]	; (800207c <__register_exitproc+0x10>)
 8002070:	b114      	cbz	r4, 8002078 <__register_exitproc+0xc>
 8002072:	f3af 8000 	nop.w
 8002076:	bd10      	pop	{r4, pc}
 8002078:	4620      	mov	r0, r4
 800207a:	bd10      	pop	{r4, pc}
 800207c:	00000000 	.word	0x00000000

08002080 <exit>:
 8002080:	b508      	push	{r3, lr}
 8002082:	4b08      	ldr	r3, [pc, #32]	; (80020a4 <exit+0x24>)
 8002084:	4604      	mov	r4, r0
 8002086:	b11b      	cbz	r3, 8002090 <exit+0x10>
 8002088:	2100      	movs	r1, #0
 800208a:	f3af 8000 	nop.w
 800208e:	e001      	b.n	8002094 <exit+0x14>
 8002090:	f000 f80c 	bl	80020ac <__libc_fini_array>
 8002094:	4804      	ldr	r0, [pc, #16]	; (80020a8 <exit+0x28>)
 8002096:	6800      	ldr	r0, [r0, #0]
 8002098:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800209a:	b101      	cbz	r1, 800209e <exit+0x1e>
 800209c:	4788      	blx	r1
 800209e:	4620      	mov	r0, r4
 80020a0:	f000 f848 	bl	8002134 <_exit>
 80020a4:	00000000 	.word	0x00000000
 80020a8:	080023c8 	.word	0x080023c8

080020ac <__libc_fini_array>:
 80020ac:	b570      	push	{r4, r5, r6, lr}
 80020ae:	4b08      	ldr	r3, [pc, #32]	; (80020d0 <__libc_fini_array+0x24>)
 80020b0:	4c08      	ldr	r4, [pc, #32]	; (80020d4 <__libc_fini_array+0x28>)
 80020b2:	1ae0      	subs	r0, r4, r3
 80020b4:	1084      	asrs	r4, r0, #2
 80020b6:	eb03 0684 	add.w	r6, r3, r4, lsl #2
 80020ba:	2500      	movs	r5, #0
 80020bc:	3d04      	subs	r5, #4
 80020be:	b11c      	cbz	r4, 80020c8 <__libc_fini_array+0x1c>
 80020c0:	5972      	ldr	r2, [r6, r5]
 80020c2:	4790      	blx	r2
 80020c4:	3c01      	subs	r4, #1
 80020c6:	e7f9      	b.n	80020bc <__libc_fini_array+0x10>
 80020c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80020cc:	f000 b990 	b.w	80023f0 <_fini>
 80020d0:	0800240c 	.word	0x0800240c
 80020d4:	08002410 	.word	0x08002410

080020d8 <__libc_init_array>:
 80020d8:	b538      	push	{r3, r4, r5, lr}
 80020da:	4d0e      	ldr	r5, [pc, #56]	; (8002114 <__libc_init_array+0x3c>)
 80020dc:	4b0e      	ldr	r3, [pc, #56]	; (8002118 <__libc_init_array+0x40>)
 80020de:	1ae8      	subs	r0, r5, r3
 80020e0:	1085      	asrs	r5, r0, #2
 80020e2:	2400      	movs	r4, #0
 80020e4:	42ac      	cmp	r4, r5
 80020e6:	d005      	beq.n	80020f4 <__libc_init_array+0x1c>
 80020e8:	490b      	ldr	r1, [pc, #44]	; (8002118 <__libc_init_array+0x40>)
 80020ea:	f851 2024 	ldr.w	r2, [r1, r4, lsl #2]
 80020ee:	4790      	blx	r2
 80020f0:	3401      	adds	r4, #1
 80020f2:	e7f7      	b.n	80020e4 <__libc_init_array+0xc>
 80020f4:	f000 f976 	bl	80023e4 <_init>
 80020f8:	4908      	ldr	r1, [pc, #32]	; (800211c <__libc_init_array+0x44>)
 80020fa:	4a09      	ldr	r2, [pc, #36]	; (8002120 <__libc_init_array+0x48>)
 80020fc:	1a54      	subs	r4, r2, r1
 80020fe:	10a5      	asrs	r5, r4, #2
 8002100:	2400      	movs	r4, #0
 8002102:	42ac      	cmp	r4, r5
 8002104:	d005      	beq.n	8002112 <__libc_init_array+0x3a>
 8002106:	4b05      	ldr	r3, [pc, #20]	; (800211c <__libc_init_array+0x44>)
 8002108:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800210c:	4780      	blx	r0
 800210e:	3401      	adds	r4, #1
 8002110:	e7f7      	b.n	8002102 <__libc_init_array+0x2a>
 8002112:	bd38      	pop	{r3, r4, r5, pc}
 8002114:	08002408 	.word	0x08002408
 8002118:	08002408 	.word	0x08002408
 800211c:	08002408 	.word	0x08002408
 8002120:	0800240c 	.word	0x0800240c

08002124 <memset>:
 8002124:	1882      	adds	r2, r0, r2
 8002126:	4603      	mov	r3, r0
 8002128:	4293      	cmp	r3, r2
 800212a:	d002      	beq.n	8002132 <memset+0xe>
 800212c:	f803 1b01 	strb.w	r1, [r3], #1
 8002130:	e7fa      	b.n	8002128 <memset+0x4>
 8002132:	4770      	bx	lr

08002134 <_exit>:
 8002134:	e7fe      	b.n	8002134 <_exit>
 8002136:	bf00      	nop

08002138 <main>:
static void USART_ctor(void) {
    USART *me = (USART *)TASK_USART;
    QActive_ctor(&me->super, (QStateHandler)&USART_initial);
    QTimeEvt_ctor(&me->TimeEvt, TIMEOUT_SIG);
}
int main() {
 8002138:	b530      	push	{r4, r5, lr}

static USART l_usart;
QActive *TASK_USART = &l_usart.super;

static void USART_ctor(void) {
    USART *me = (USART *)TASK_USART;
 800213a:	f240 0418 	movw	r4, #24
 800213e:	f2c2 0400 	movt	r4, #8192	; 0x2000
    QActive_ctor(&me->super, (QStateHandler)&USART_initial);
 8002142:	f240 31b5 	movw	r1, #949	; 0x3b5

static USART l_usart;
QActive *TASK_USART = &l_usart.super;

static void USART_ctor(void) {
    USART *me = (USART *)TASK_USART;
 8002146:	6825      	ldr	r5, [r4, #0]
    QActive_ctor(&me->super, (QStateHandler)&USART_initial);
    QTimeEvt_ctor(&me->TimeEvt, TIMEOUT_SIG);
}
int main() {
 8002148:	b085      	sub	sp, #20
static USART l_usart;
QActive *TASK_USART = &l_usart.super;

static void USART_ctor(void) {
    USART *me = (USART *)TASK_USART;
    QActive_ctor(&me->super, (QStateHandler)&USART_initial);
 800214a:	4628      	mov	r0, r5
 800214c:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002150:	f7ff f97a 	bl	8001448 <QActive_ctor>
    QTimeEvt_ctor(&me->TimeEvt, TIMEOUT_SIG);
 8002154:	2100      	movs	r1, #0
 8002156:	f105 0020 	add.w	r0, r5, #32
 800215a:	460b      	mov	r3, r1
 800215c:	2204      	movs	r2, #4
 800215e:	f7ff fecf 	bl	8001f00 <QTimeEvt_ctorX>
}
int main() {
    USART_ctor();
	BSP_init();
 8002162:	f7fe f973 	bl	800044c <BSP_init>
    QF_init();
 8002166:	f7ff f979 	bl	800145c <QF_init>

    static QEvt const *usart_queueSto[10];
    QActive_start(TASK_USART, 1,
 800216a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800216e:	2300      	movs	r3, #0
 8002170:	9201      	str	r2, [sp, #4]
 8002172:	f240 02c8 	movw	r2, #200	; 0xc8
 8002176:	9300      	str	r3, [sp, #0]
 8002178:	9302      	str	r3, [sp, #8]
 800217a:	6820      	ldr	r0, [r4, #0]
 800217c:	2101      	movs	r1, #1
 800217e:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8002182:	230a      	movs	r3, #10
 8002184:	f7ff f9b4 	bl	80014f0 <QActive_start_>
                  usart_queueSto, Q_DIM(usart_queueSto),
                  (void *)0, 1024, (QEvt *)0);
    return QF_run();
}
 8002188:	b005      	add	sp, #20
 800218a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}

    static QEvt const *usart_queueSto[10];
    QActive_start(TASK_USART, 1,
                  usart_queueSto, Q_DIM(usart_queueSto),
                  (void *)0, 1024, (QEvt *)0);
    return QF_run();
 800218e:	f7ff b997 	b.w	80014c0 <QF_run>
 8002192:	bf00      	nop

08002194 <Reset_Handler>:
 8002194:	2100      	movs	r1, #0
 8002196:	f000 b804 	b.w	80021a2 <LoopCopyDataInit>

0800219a <CopyDataInit>:
 800219a:	4b0c      	ldr	r3, [pc, #48]	; (80021cc <LoopFillZerobss+0x12>)
 800219c:	585b      	ldr	r3, [r3, r1]
 800219e:	5043      	str	r3, [r0, r1]
 80021a0:	3104      	adds	r1, #4

080021a2 <LoopCopyDataInit>:
 80021a2:	480b      	ldr	r0, [pc, #44]	; (80021d0 <LoopFillZerobss+0x16>)
 80021a4:	4b0b      	ldr	r3, [pc, #44]	; (80021d4 <LoopFillZerobss+0x1a>)
 80021a6:	1842      	adds	r2, r0, r1
 80021a8:	429a      	cmp	r2, r3
 80021aa:	f4ff aff6 	bcc.w	800219a <CopyDataInit>
 80021ae:	4a0a      	ldr	r2, [pc, #40]	; (80021d8 <LoopFillZerobss+0x1e>)
 80021b0:	f000 b803 	b.w	80021ba <LoopFillZerobss>

080021b4 <FillZerobss>:
 80021b4:	2300      	movs	r3, #0
 80021b6:	f842 3b04 	str.w	r3, [r2], #4

080021ba <LoopFillZerobss>:
 80021ba:	4b08      	ldr	r3, [pc, #32]	; (80021dc <LoopFillZerobss+0x22>)
 80021bc:	429a      	cmp	r2, r3
 80021be:	f4ff aff9 	bcc.w	80021b4 <FillZerobss>
 80021c2:	f7fe f851 	bl	8000268 <SystemInit>
 80021c6:	f7ff ffb7 	bl	8002138 <main>
 80021ca:	4770      	bx	lr
 80021cc:	08002410 	.word	0x08002410
 80021d0:	20000000 	.word	0x20000000
 80021d4:	200000a8 	.word	0x200000a8
 80021d8:	200000ac 	.word	0x200000ac
 80021dc:	2000021c 	.word	0x2000021c

080021e0 <ADC1_IRQHandler>:
 80021e0:	f7ff bffe 	b.w	80021e0 <ADC1_IRQHandler>

080021e4 <QK_init>:
    .section .text.QK_init
    .global QK_init
    .type   QK_init, %function

QK_init:
    MRS     r0,PRIMASK        /* store the state of the PRIMASK in r0       */
 80021e4:	f3ef 8010 	mrs	r0, PRIMASK
    CPSID   i                 /* disable interrupts (set PRIMASK)           */
 80021e8:	b672      	cpsid	i

    LDR     r1,=0xE000ED18    /* System Handler Priority Register           */
 80021ea:	4906      	ldr	r1, [pc, #24]	; (8002204 <QK_init+0x20>)
    LDR     r2,[r1,#8]        /* load the System 12-15 Priority Register    */
 80021ec:	688a      	ldr	r2, [r1, #8]
    MOVS    r3,#0xFF
 80021ee:	23ff      	movs	r3, #255	; 0xff
    LSLS    r3,r3,#16
 80021f0:	041b      	lsls	r3, r3, #16
    ORRS    r2,r3             /* set PRI_14 (PendSV) to 0xFF                */
 80021f2:	431a      	orrs	r2, r3
    STR     r2,[r1,#8]        /* write the System 12-15 Priority Register   */
 80021f4:	608a      	str	r2, [r1, #8]
    LDR     r2,[r1,#4]        /* load the System 8-11 Priority Register     */
 80021f6:	684a      	ldr	r2, [r1, #4]
    LSLS    r3,r3,#8
 80021f8:	021b      	lsls	r3, r3, #8
    BICS    r2,r3             /* set PRI_11 (SVCall) to 0x00                */
 80021fa:	439a      	bics	r2, r3
    STR     r2,[r1,#4]        /* write the System 8-11 Priority Register    */
 80021fc:	604a      	str	r2, [r1, #4]

    MSR     PRIMASK,r0        /* restore the original PRIMASK               */
 80021fe:	f380 8810 	msr	PRIMASK, r0
    BX      lr                /* return to the caller                       */
 8002202:	4770      	bx	lr

QK_init:
    MRS     r0,PRIMASK        /* store the state of the PRIMASK in r0       */
    CPSID   i                 /* disable interrupts (set PRIMASK)           */

    LDR     r1,=0xE000ED18    /* System Handler Priority Register           */
 8002204:	e000ed18 	.word	0xe000ed18

08002208 <PendSV_Handler>:
    .global PendSV_Handler    /* CMSIS-compliant exception name             */
    .type   PendSV_Handler, %function
    .type   svc_ret, %function /* to ensure that the svc_ret label is THUMB */

PendSV_Handler:
    PUSH    {lr}              /* push the exception lr (EXC_RETURN)         */
 8002208:	b500      	push	{lr}

    .ifdef  ARM_ARCH_V6M      /* Cortex-M0/M0+/M1 (v6-M, v6S-M)?            */
    CPSID   i                 /* disable interrupts at processor level      */
    .else                     /* Cortex-M3/M4/M4F                           */
    MOVS    r0,#(0xFF >> 2)   /* Keep in synch with QF_BASEPRI in qf_port.h!*/
 800220a:	203f      	movs	r0, #63	; 0x3f
    MSR     BASEPRI,r0        /* disable interrupts at processor level      */
 800220c:	f380 8811 	msr	BASEPRI, r0
    .endif

    BL      QK_schedPrio_     /* check if we have preemption                */
 8002210:	f7ff fdce 	bl	8001db0 <QK_schedPrio_>
    CMP     r0,#0             /* is prio == 0 ?                             */
 8002214:	2800      	cmp	r0, #0
    BNE.N   scheduler         /* if prio != 0, branch to scheduler          */
 8002216:	d103      	bne.n	8002220 <scheduler>

    .ifdef  ARM_ARCH_V6M      /* Cortex-M0/M0+/M1 (v6-M, v6S-M)?            */
    CPSIE   i                 /* enable interrupts at processor level       */
    .else                     /* Cortex-M3/M4/M4F                           */
    MSR     BASEPRI,r0        /* enable interrupts (r0 == 0 at this point)  */
 8002218:	f380 8811 	msr	BASEPRI, r0
    .endif

    POP     {r0}              /* pop the EXC_RETURN into r0 (low register)  */
 800221c:	bc01      	pop	{r0}
    BX      r0                /* exception-return to the task               */
 800221e:	4700      	bx	r0

08002220 <scheduler>:

scheduler:
    SUB     sp,sp,#4          /* align the stack to 8-byte boundary         */
 8002220:	b081      	sub	sp, #4
    MOVS    r3,#1
 8002222:	2301      	movs	r3, #1
    LSLS    r3,r3,#24         /* r3:=(1 << 24), set the T bit  (new xpsr)   */
 8002224:	061b      	lsls	r3, r3, #24
    LDR     r2,=QK_sched_     /* address of the QK scheduler   (new pc)     */
 8002226:	4a06      	ldr	r2, [pc, #24]	; (8002240 <svc_ret+0xa>)
    LDR     r1,=svc_ret       /* return address after the call (new lr)     */
 8002228:	4906      	ldr	r1, [pc, #24]	; (8002244 <svc_ret+0xe>)
    PUSH    {r1-r3}           /* push xpsr,pc,lr                            */
 800222a:	b40e      	push	{r1, r2, r3}
    SUB     sp,sp,#(4*4)      /* don't care for r12,r3,r2,r1                */
 800222c:	b084      	sub	sp, #16
    PUSH    {r0}              /* push the prio argument        (new r0)     */
 800222e:	b401      	push	{r0}
    MOVS    r0,#0x6
 8002230:	2006      	movs	r0, #6
    MVNS    r0,r0             /* r0 := ~0x6 == 0xFFFFFFF9                   */
 8002232:	43c0      	mvns	r0, r0
    BX      r0                /* exception-return to the scheduler          */
 8002234:	4700      	bx	r0

08002236 <svc_ret>:

svc_ret:
    .ifdef  ARM_ARCH_V6M      /* Cortex-M0/M0+/M1 (v6-M, v6S-M)?            */
    CPSIE   i                 /* enable interrupts to allow SVCall exception*/
    .else                     /* Cortex-M3/M4/M4F                           */
    MOVS    r0,#0
 8002236:	2000      	movs	r0, #0
    MSR     BASEPRI,r0        /* enable interrupts to allow SVCall exception*/
 8002238:	f380 8811 	msr	BASEPRI, r0
    MOVS    r1,#4             /* r1 := 0x04 (FPCA bit)                      */
    BICS    r0,r1             /* r0 := r0 & ~r1                             */
    MSR     CONTROL,r0        /* CONTROL := r0                              */
    .endif

    SVC     #0                /* SV exception returns to the preempted task */
 800223c:	df00      	svc	0
 800223e:	0000      	.short	0x0000

scheduler:
    SUB     sp,sp,#4          /* align the stack to 8-byte boundary         */
    MOVS    r3,#1
    LSLS    r3,r3,#24         /* r3:=(1 << 24), set the T bit  (new xpsr)   */
    LDR     r2,=QK_sched_     /* address of the QK scheduler   (new pc)     */
 8002240:	08001e01 	.word	0x08001e01
    LDR     r1,=svc_ret       /* return address after the call (new lr)     */
 8002244:	08002237 	.word	0x08002237

08002248 <SVC_Handler>:
    .section .text.SVC_Handler
    .global SVC_Handler       /* CMSIS-compliant exception name             */
    .type   SVC_Handler, %function

SVC_Handler:
    ADD     sp,sp,#(9*4)      /* remove one 8-register exception frame      */
 8002248:	b009      	add	sp, #36	; 0x24
                              /* plus the "aligner" from the stack          */
    POP     {r0}              /* pop the original EXC_RETURN into r0        */
 800224a:	bc01      	pop	{r0}
    BX      r0                /* return to the preempted task               */
 800224c:	4700      	bx	r0
	...

08002250 <vtbl.3948>:
 8002250:	1cbd 0800 189d 0800 14f1 0800 1721 0800     ............!...
 8002260:	1c15 0800                                   ....

08002264 <Q_this_module_>:
 8002264:	6b71 0000                                   qk..

08002268 <Q_this_module_>:
 8002268:	6671 705f 6f6f 006c                         qf_pool.

08002270 <Q_this_module_>:
 8002270:	6671 745f 6369 006b                         qf_tick.

08002278 <Q_this_module_>:
 8002278:	6d71 5f70 6e69 7469 0000 0000               qmp_init....

08002284 <Q_this_module_>:
 8002284:	6171 665f 6669 006f                         qa_fifo.

0800228c <Q_this_module_>:
 800228c:	6671 615f 7463 0000                         qf_act..

08002294 <Q_this_module_>:
 8002294:	6871 6d73 645f 7369 0000 0000               qhsm_dis....

080022a0 <Q_this_module_>:
 80022a0:	6671 675f 0063 0000                         qf_gc...

080022a8 <Q_this_module_>:
 80022a8:	6171 6c5f 6669 006f                         qa_lifo.

080022b0 <QF_div8Lkup>:
	...
 80022b8:	0100 0101 0101 0101 0201 0202 0202 0202     ................
 80022c8:	0302 0303 0303 0303 0403 0404 0404 0404     ................
 80022d8:	0504 0505 0505 0505 0605 0606 0606 0606     ................
 80022e8:	0706 0707 0707 0707 0007 0000               ............

080022f4 <QF_invPwr2Lkup>:
 80022f4:	feff fbfd eff7 bfdf fe7f fbfd eff7 bfdf     ................
 8002304:	fe7f fbfd eff7 bfdf fe7f fbfd eff7 bfdf     ................
 8002314:	fe7f fbfd eff7 bfdf fe7f fbfd eff7 bfdf     ................
 8002324:	fe7f fbfd eff7 bfdf fe7f fbfd eff7 bfdf     ................
 8002334:	007f 0000                                   ....

08002338 <QF_pwr2Lkup>:
 8002338:	0100 0402 1008 4020 0180 0402 1008 4020     ...... @...... @
 8002348:	0180 0402 1008 4020 0180 0402 1008 4020     ...... @...... @
 8002358:	0180 0402 1008 4020 0180 0402 1008 4020     ...... @...... @
 8002368:	0180 0402 1008 4020 0180 0402 1008 4020     ...... @...... @
 8002378:	0080 0000                                   ....

0800237c <Q_this_module_>:
 800237c:	6871 6d73 695f 696e 0000 0000               qhsm_ini....

08002388 <vtbl.3738>:
 8002388:	1cbd 0800 189d 0800                         ........

08002390 <Q_this_module_>:
 8002390:	7471 5f65 7261 006d                         qte_arm.

08002398 <Q_this_module_>:
 8002398:	7471 5f65 7463 726f 0000 0000               qte_ctor....

080023a4 <QEP_reservedEvt_>:
 80023a4:	0000 0000 0001 0000 0002 0000 0003 0000     ................

080023b4 <Q_this_module_>:
 80023b4:	6d71 5f70 7570 0074                         qmp_put.

080023bc <Q_this_module_>:
 80023bc:	6171 675f 7465 005f 0043 0000               qa_get_.C...

080023c8 <_global_impure_ptr>:
 80023c8:	0040 2000 0a0d 656c 5f64 666f 0a66 000d     @.. ..led_off...
 80023d8:	0a0d 656c 5f64 6e6f 0d0a 0000               ..led_on....

080023e4 <_init>:
 80023e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023e6:	bf00      	nop
 80023e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023ea:	bc08      	pop	{r3}
 80023ec:	469e      	mov	lr, r3
 80023ee:	4770      	bx	lr

080023f0 <_fini>:
 80023f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023f2:	bf00      	nop
 80023f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023f6:	bc08      	pop	{r3}
 80023f8:	469e      	mov	lr, r3
 80023fa:	4770      	bx	lr

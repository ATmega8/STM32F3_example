
main.elf:     file format elf32-littlearm


Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	; (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4804      	ldr	r0, [pc, #16]	; (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b110      	cbz	r0, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2101      	movs	r1, #1
 8000198:	7021      	strb	r1, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	200000ac 	.word	0x200000ac
 80001a0:	00000000 	.word	0x00000000
 80001a4:	08003108 	.word	0x08003108

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b06      	ldr	r3, [pc, #24]	; (80001c4 <frame_dummy+0x1c>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4806      	ldr	r0, [pc, #24]	; (80001c8 <frame_dummy+0x20>)
 80001b0:	4906      	ldr	r1, [pc, #24]	; (80001cc <frame_dummy+0x24>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	4806      	ldr	r0, [pc, #24]	; (80001d0 <frame_dummy+0x28>)
 80001b8:	6801      	ldr	r1, [r0, #0]
 80001ba:	b111      	cbz	r1, 80001c2 <frame_dummy+0x1a>
 80001bc:	4a05      	ldr	r2, [pc, #20]	; (80001d4 <frame_dummy+0x2c>)
 80001be:	b102      	cbz	r2, 80001c2 <frame_dummy+0x1a>
 80001c0:	4790      	blx	r2
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08003108 	.word	0x08003108
 80001cc:	200000b0 	.word	0x200000b0
 80001d0:	200000a8 	.word	0x200000a8
 80001d4:	00000000 	.word	0x00000000

080001d8 <_mainCRTStartup>:
 80001d8:	4b15      	ldr	r3, [pc, #84]	; (8000230 <_mainCRTStartup+0x58>)
 80001da:	2b00      	cmp	r3, #0
 80001dc:	bf08      	it	eq
 80001de:	4b13      	ldreq	r3, [pc, #76]	; (800022c <_mainCRTStartup+0x54>)
 80001e0:	469d      	mov	sp, r3
 80001e2:	f5a3 3a80 	sub.w	sl, r3, #65536	; 0x10000
 80001e6:	2100      	movs	r1, #0
 80001e8:	468b      	mov	fp, r1
 80001ea:	460f      	mov	r7, r1
 80001ec:	4813      	ldr	r0, [pc, #76]	; (800023c <_mainCRTStartup+0x64>)
 80001ee:	4a14      	ldr	r2, [pc, #80]	; (8000240 <_mainCRTStartup+0x68>)
 80001f0:	1a12      	subs	r2, r2, r0
 80001f2:	f002 fe43 	bl	8002e7c <memset>
 80001f6:	4b0f      	ldr	r3, [pc, #60]	; (8000234 <_mainCRTStartup+0x5c>)
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	d000      	beq.n	80001fe <_mainCRTStartup+0x26>
 80001fc:	4798      	blx	r3
 80001fe:	4b0e      	ldr	r3, [pc, #56]	; (8000238 <_mainCRTStartup+0x60>)
 8000200:	2b00      	cmp	r3, #0
 8000202:	d000      	beq.n	8000206 <_mainCRTStartup+0x2e>
 8000204:	4798      	blx	r3
 8000206:	2000      	movs	r0, #0
 8000208:	2100      	movs	r1, #0
 800020a:	4604      	mov	r4, r0
 800020c:	460d      	mov	r5, r1
 800020e:	2000      	movs	r0, #0
 8000210:	490c      	ldr	r1, [pc, #48]	; (8000244 <_mainCRTStartup+0x6c>)
 8000212:	2200      	movs	r2, #0
 8000214:	2300      	movs	r3, #0
 8000216:	f002 fdd5 	bl	8002dc4 <__register_exitproc>
 800021a:	f002 fe09 	bl	8002e30 <__libc_init_array>
 800021e:	4620      	mov	r0, r4
 8000220:	4629      	mov	r1, r5
 8000222:	f000 fa5f 	bl	80006e4 <main>
 8000226:	f002 fdd7 	bl	8002dd8 <exit>
 800022a:	bf00      	nop
 800022c:	00080000 	.word	0x00080000
	...
 800023c:	200000ac 	.word	0x200000ac
 8000240:	20000220 	.word	0x20000220
 8000244:	08002e05 	.word	0x08002e05

08000248 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000248:	b598      	push	{r3, r4, r7, lr}
 800024a:	af00      	add	r7, sp, #0
 800024c:	4674      	mov	r4, lr
 800024e:	4623      	mov	r3, r4
 8000250:	f240 2049 	movw	r0, #585	; 0x249
 8000254:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000258:	4619      	mov	r1, r3
 800025a:	f000 fc9f 	bl	8000b9c <__cyg_profile_func_enter>
 800025e:	4623      	mov	r3, r4
 8000260:	f240 2049 	movw	r0, #585	; 0x249
 8000264:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000268:	4619      	mov	r1, r3
 800026a:	f000 fcff 	bl	8000c6c <__cyg_profile_func_exit>
}
 800026e:	bd98      	pop	{r3, r4, r7, pc}

08000270 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
 8000274:	4673      	mov	r3, lr
 8000276:	f240 2071 	movw	r0, #625	; 0x271
 800027a:	f6c0 0000 	movt	r0, #2048	; 0x800
 800027e:	4619      	mov	r1, r3
 8000280:	f000 fc8c 	bl	8000b9c <__cyg_profile_func_enter>
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 8000284:	e7fe      	b.n	8000284 <HardFault_Handler+0x14>
 8000286:	bf00      	nop

08000288 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	af00      	add	r7, sp, #0
 800028c:	4673      	mov	r3, lr
 800028e:	f240 2089 	movw	r0, #649	; 0x289
 8000292:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000296:	4619      	mov	r1, r3
 8000298:	f000 fc80 	bl	8000b9c <__cyg_profile_func_enter>
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 800029c:	e7fe      	b.n	800029c <MemManage_Handler+0x14>
 800029e:	bf00      	nop

080002a0 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	af00      	add	r7, sp, #0
 80002a4:	4673      	mov	r3, lr
 80002a6:	f240 20a1 	movw	r0, #673	; 0x2a1
 80002aa:	f6c0 0000 	movt	r0, #2048	; 0x800
 80002ae:	4619      	mov	r1, r3
 80002b0:	f000 fc74 	bl	8000b9c <__cyg_profile_func_enter>
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 80002b4:	e7fe      	b.n	80002b4 <BusFault_Handler+0x14>
 80002b6:	bf00      	nop

080002b8 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	af00      	add	r7, sp, #0
 80002bc:	4673      	mov	r3, lr
 80002be:	f240 20b9 	movw	r0, #697	; 0x2b9
 80002c2:	f6c0 0000 	movt	r0, #2048	; 0x800
 80002c6:	4619      	mov	r1, r3
 80002c8:	f000 fc68 	bl	8000b9c <__cyg_profile_func_enter>
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 80002cc:	e7fe      	b.n	80002cc <UsageFault_Handler+0x14>
 80002ce:	bf00      	nop

080002d0 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80002d0:	b598      	push	{r3, r4, r7, lr}
 80002d2:	af00      	add	r7, sp, #0
 80002d4:	4674      	mov	r4, lr
 80002d6:	4623      	mov	r3, r4
 80002d8:	f240 20d1 	movw	r0, #721	; 0x2d1
 80002dc:	f6c0 0000 	movt	r0, #2048	; 0x800
 80002e0:	4619      	mov	r1, r3
 80002e2:	f000 fc5b 	bl	8000b9c <__cyg_profile_func_enter>
 80002e6:	4623      	mov	r3, r4
 80002e8:	f240 20d1 	movw	r0, #721	; 0x2d1
 80002ec:	f6c0 0000 	movt	r0, #2048	; 0x800
 80002f0:	4619      	mov	r1, r3
 80002f2:	f000 fcbb 	bl	8000c6c <__cyg_profile_func_exit>
}
 80002f6:	bd98      	pop	{r3, r4, r7, pc}

080002f8 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80002f8:	b598      	push	{r3, r4, r7, lr}
 80002fa:	af00      	add	r7, sp, #0
 80002fc:	4674      	mov	r4, lr
 80002fe:	4623      	mov	r3, r4
 8000300:	f240 20f9 	movw	r0, #761	; 0x2f9
 8000304:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000308:	4619      	mov	r1, r3
 800030a:	f000 fc47 	bl	8000b9c <__cyg_profile_func_enter>
	QF_TICK_X(0U, (void *)0);
 800030e:	f04f 0000 	mov.w	r0, #0
 8000312:	f001 fedf 	bl	80020d4 <QF_tickX_>
 8000316:	4623      	mov	r3, r4
 8000318:	f240 20f9 	movw	r0, #761	; 0x2f9
 800031c:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000320:	4619      	mov	r1, r3
 8000322:	f000 fca3 	bl	8000c6c <__cyg_profile_func_exit>
}
 8000326:	bd98      	pop	{r3, r4, r7, pc}

08000328 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000328:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 800032c:	f2ce 0200 	movt	r2, #57344	; 0xe000
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000330:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000334:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000338:	f2c4 0302 	movt	r3, #16386	; 0x4002
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800033c:	f441 0070 	orr.w	r0, r1, #15728640	; 0xf00000
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000340:	b410      	push	{r4}
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000342:	f8c2 0088 	str.w	r0, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000346:	681c      	ldr	r4, [r3, #0]
 8000348:	f044 0201 	orr.w	r2, r4, #1
 800034c:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00C;
 800034e:	6859      	ldr	r1, [r3, #4]
 8000350:	f24c 000c 	movw	r0, #49164	; 0xc00c
 8000354:	f6cf 007f 	movt	r0, #63615	; 0xf87f
 8000358:	4008      	ands	r0, r1
 800035a:	6058      	str	r0, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800035c:	681c      	ldr	r4, [r3, #0]
 800035e:	f024 7284 	bic.w	r2, r4, #17301504	; 0x1080000
 8000362:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 8000366:	6019      	str	r1, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000368:	6818      	ldr	r0, [r3, #0]
 800036a:	f420 2480 	bic.w	r4, r0, #262144	; 0x40000
 800036e:	601c      	str	r4, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000370:	685a      	ldr	r2, [r3, #4]
 8000372:	f422 01fe 	bic.w	r1, r2, #8323072	; 0x7f0000
 8000376:	6059      	str	r1, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8000378:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800037a:	f020 040f 	bic.w	r4, r0, #15
 800037e:	62dc      	str	r4, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 8000380:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8000382:	f64f 42cc 	movw	r2, #64716	; 0xfccc
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
#if defined (PLL_SOURCE_HSI)
  /* At this stage the HSI is already enabled */

  /* Enable Prefetch Buffer and set Flash Latency */
  FLASH->ACR = FLASH_ACR_PRFTBE | FLASH_ACR_LATENCY_1;
 8000386:	f44f 5000 	mov.w	r0, #8192	; 0x2000

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 800038a:	f6cf 7200 	movt	r2, #65280	; 0xff00
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800038e:	b083      	sub	sp, #12
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
#if defined (PLL_SOURCE_HSI)
  /* At this stage the HSI is already enabled */

  /* Enable Prefetch Buffer and set Flash Latency */
  FLASH->ACR = FLASH_ACR_PRFTBE | FLASH_ACR_LATENCY_1;
 8000390:	f2c4 0002 	movt	r0, #16386	; 0x4002

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 8000394:	4022      	ands	r2, r4
 8000396:	631a      	str	r2, [r3, #48]	; 0x30
  
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000398:	2100      	movs	r1, #0
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
#if defined (PLL_SOURCE_HSI)
  /* At this stage the HSI is already enabled */

  /* Enable Prefetch Buffer and set Flash Latency */
  FLASH->ACR = FLASH_ACR_PRFTBE | FLASH_ACR_LATENCY_1;
 800039a:	2212      	movs	r2, #18

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
  
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800039c:	6099      	str	r1, [r3, #8]
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800039e:	9100      	str	r1, [sp, #0]
 80003a0:	9101      	str	r1, [sp, #4]
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
#if defined (PLL_SOURCE_HSI)
  /* At this stage the HSI is already enabled */

  /* Enable Prefetch Buffer and set Flash Latency */
  FLASH->ACR = FLASH_ACR_PRFTBE | FLASH_ACR_LATENCY_1;
 80003a2:	6002      	str	r2, [r0, #0]
 
  /* HCLK = SYSCLK */
  RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80003a4:	6858      	ldr	r0, [r3, #4]
 80003a6:	6058      	str	r0, [r3, #4]
      
  /* PCLK = HCLK */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2 | (uint32_t)RCC_CFGR_PPRE2_DIV1;
 80003a8:	6859      	ldr	r1, [r3, #4]
 80003aa:	f441 6280 	orr.w	r2, r1, #1024	; 0x400
 80003ae:	605a      	str	r2, [r3, #4]

  /* PLL configuration */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 80003b0:	6858      	ldr	r0, [r3, #4]
 80003b2:	f420 117c 	bic.w	r1, r0, #4128768	; 0x3f0000
 80003b6:	6059      	str	r1, [r3, #4]
  RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSI_Div2 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL16);
 80003b8:	685a      	ldr	r2, [r3, #4]
 80003ba:	f442 1060 	orr.w	r0, r2, #3670016	; 0x380000
 80003be:	6058      	str	r0, [r3, #4]
            
  /* Enable PLL */
  RCC->CR |= RCC_CR_PLLON;
 80003c0:	6819      	ldr	r1, [r3, #0]
 80003c2:	f041 7280 	orr.w	r2, r1, #16777216	; 0x1000000
 80003c6:	601a      	str	r2, [r3, #0]

  /* Wait till PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80003c8:	6818      	ldr	r0, [r3, #0]
 80003ca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80003ce:	0181      	lsls	r1, r0, #6
 80003d0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80003d4:	d5f8      	bpl.n	80003c8 <SystemInit+0xa0>
  {
  }

  /* Select PLL as system clock source */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80003d6:	6853      	ldr	r3, [r2, #4]
 80003d8:	f023 0103 	bic.w	r1, r3, #3
 80003dc:	6051      	str	r1, [r2, #4]
  RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 80003de:	6850      	ldr	r0, [r2, #4]
 80003e0:	f040 0302 	orr.w	r3, r0, #2
 80003e4:	6053      	str	r3, [r2, #4]

  /* Wait till PLL is used as system clock source */
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 80003e6:	6851      	ldr	r1, [r2, #4]
 80003e8:	f001 000c 	and.w	r0, r1, #12
 80003ec:	2808      	cmp	r0, #8
 80003ee:	d1fa      	bne.n	80003e6 <SystemInit+0xbe>
  SetSysClock();
  
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80003f0:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 80003f4:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80003f8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80003fc:	609a      	str	r2, [r3, #8]
#endif  
}
 80003fe:	b003      	add	sp, #12
 8000400:	bc10      	pop	{r4}
 8000402:	4770      	bx	lr

08000404 <SystemCoreClockUpdate>:
void SystemCoreClockUpdate (void)
{
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000404:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000408:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800040c:	685a      	ldr	r2, [r3, #4]
 800040e:	f002 000c 	and.w	r0, r2, #12
  
  switch (tmp)
 8000412:	2808      	cmp	r0, #8
 8000414:	d010      	beq.n	8000438 <SystemCoreClockUpdate+0x34>
 8000416:	f44f 5190 	mov.w	r1, #4608	; 0x1200
 800041a:	f2c0 017a 	movt	r1, #122	; 0x7a
      SystemCoreClock = HSI_VALUE;
      break;
  }
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800041e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000422:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000426:	4812      	ldr	r0, [pc, #72]	; (8000470 <SystemCoreClockUpdate+0x6c>)
 8000428:	6853      	ldr	r3, [r2, #4]
 800042a:	f3c3 1203 	ubfx	r2, r3, #4, #4
 800042e:	5c83      	ldrb	r3, [r0, r2]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 8000430:	fa21 f103 	lsr.w	r1, r1, r3
 8000434:	6101      	str	r1, [r0, #16]
 8000436:	4770      	bx	lr
    case 0x04:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
      break;
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8000438:	685a      	ldr	r2, [r3, #4]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 800043a:	6858      	ldr	r0, [r3, #4]
      pllmull = ( pllmull >> 18) + 2;
 800043c:	f3c2 4183 	ubfx	r1, r2, #18, #4
 8000440:	1c8a      	adds	r2, r1, #2
      
      if (pllsource == 0x00)
 8000442:	03c0      	lsls	r0, r0, #15
 8000444:	d406      	bmi.n	8000454 <SystemCoreClockUpdate+0x50>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
 8000446:	f44f 6310 	mov.w	r3, #2304	; 0x900
 800044a:	f2c0 033d 	movt	r3, #61	; 0x3d
 800044e:	fb03 f102 	mul.w	r1, r3, r2
 8000452:	e7e4      	b.n	800041e <SystemCoreClockUpdate+0x1a>
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 8000454:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
 8000456:	f44f 5390 	mov.w	r3, #4608	; 0x1200
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 800045a:	f000 010f 	and.w	r1, r0, #15
 800045e:	1c48      	adds	r0, r1, #1
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
 8000460:	f2c0 037a 	movt	r3, #122	; 0x7a
 8000464:	fbb3 f1f0 	udiv	r1, r3, r0
 8000468:	fb02 f101 	mul.w	r1, r2, r1
 800046c:	e7d7      	b.n	800041e <SystemCoreClockUpdate+0x1a>
 800046e:	bf00      	nop
 8000470:	20000004 	.word	0x20000004

08000474 <Q_onAssert>:
/* @(/2/0) .................................................................*/
#include "main.h"

#define BSP_TICKS_PER_SEC 100

void Q_onAssert(char const Q_ROM * const Q_ROM_VAR file, int line){
 8000474:	b590      	push	{r4, r7, lr}
 8000476:	b083      	sub	sp, #12
 8000478:	af00      	add	r7, sp, #0
 800047a:	4674      	mov	r4, lr
 800047c:	6078      	str	r0, [r7, #4]
 800047e:	6039      	str	r1, [r7, #0]
 8000480:	4623      	mov	r3, r4
 8000482:	f240 4075 	movw	r0, #1141	; 0x475
 8000486:	f6c0 0000 	movt	r0, #2048	; 0x800
 800048a:	4619      	mov	r1, r3
 800048c:	f000 fb86 	bl	8000b9c <__cyg_profile_func_enter>
 8000490:	4623      	mov	r3, r4
 8000492:	f240 4075 	movw	r0, #1141	; 0x475
 8000496:	f6c0 0000 	movt	r0, #2048	; 0x800
 800049a:	4619      	mov	r1, r3
 800049c:	f000 fbe6 	bl	8000c6c <__cyg_profile_func_exit>

}
 80004a0:	f107 070c 	add.w	r7, r7, #12
 80004a4:	46bd      	mov	sp, r7
 80004a6:	bd90      	pop	{r4, r7, pc}

080004a8 <QF_onStartup>:

void QF_onStartup(void)
{
 80004a8:	b598      	push	{r3, r4, r7, lr}
 80004aa:	af00      	add	r7, sp, #0
 80004ac:	4674      	mov	r4, lr
 80004ae:	4623      	mov	r3, r4
 80004b0:	f240 40a9 	movw	r0, #1193	; 0x4a9
 80004b4:	f6c0 0000 	movt	r0, #2048	; 0x800
 80004b8:	4619      	mov	r1, r3
 80004ba:	f000 fb6f 	bl	8000b9c <__cyg_profile_func_enter>
	BSP_clockInit();
 80004be:	f000 fb2b 	bl	8000b18 <BSP_clockInit>
 80004c2:	4623      	mov	r3, r4
 80004c4:	f240 40a9 	movw	r0, #1193	; 0x4a9
 80004c8:	f6c0 0000 	movt	r0, #2048	; 0x800
 80004cc:	4619      	mov	r1, r3
 80004ce:	f000 fbcd 	bl	8000c6c <__cyg_profile_func_exit>
}
 80004d2:	bd98      	pop	{r3, r4, r7, pc}

080004d4 <QK_onIdle>:
void QK_onIdle(void){}
 80004d4:	b598      	push	{r3, r4, r7, lr}
 80004d6:	af00      	add	r7, sp, #0
 80004d8:	4674      	mov	r4, lr
 80004da:	4623      	mov	r3, r4
 80004dc:	f240 40d5 	movw	r0, #1237	; 0x4d5
 80004e0:	f6c0 0000 	movt	r0, #2048	; 0x800
 80004e4:	4619      	mov	r1, r3
 80004e6:	f000 fb59 	bl	8000b9c <__cyg_profile_func_enter>
 80004ea:	4623      	mov	r3, r4
 80004ec:	f240 40d5 	movw	r0, #1237	; 0x4d5
 80004f0:	f6c0 0000 	movt	r0, #2048	; 0x800
 80004f4:	4619      	mov	r1, r3
 80004f6:	f000 fbb9 	bl	8000c6c <__cyg_profile_func_exit>
 80004fa:	bd98      	pop	{r3, r4, r7, pc}

080004fc <QF_onCleanup>:
void QF_onCleanup(void) {}
 80004fc:	b598      	push	{r3, r4, r7, lr}
 80004fe:	af00      	add	r7, sp, #0
 8000500:	4674      	mov	r4, lr
 8000502:	4623      	mov	r3, r4
 8000504:	f240 40fd 	movw	r0, #1277	; 0x4fd
 8000508:	f6c0 0000 	movt	r0, #2048	; 0x800
 800050c:	4619      	mov	r1, r3
 800050e:	f000 fb45 	bl	8000b9c <__cyg_profile_func_enter>
 8000512:	4623      	mov	r3, r4
 8000514:	f240 40fd 	movw	r0, #1277	; 0x4fd
 8000518:	f6c0 0000 	movt	r0, #2048	; 0x800
 800051c:	4619      	mov	r1, r3
 800051e:	f000 fba5 	bl	8000c6c <__cyg_profile_func_exit>
 8000522:	bd98      	pop	{r3, r4, r7, pc}

08000524 <USART_initial>:
static QState USART_off(USART * const me, QEvt const * const e);

/* @(/1/0) .................................................................*/
/* @(/1/0/1) ...............................................................*/
/* @(/1/0/1/0) */
static QState USART_initial(USART * const me, QEvt const * const e) {
 8000524:	b5b0      	push	{r4, r5, r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
 800052a:	4674      	mov	r4, lr
 800052c:	6078      	str	r0, [r7, #4]
 800052e:	6039      	str	r1, [r7, #0]
 8000530:	4623      	mov	r3, r4
 8000532:	f240 5025 	movw	r0, #1317	; 0x525
 8000536:	f6c0 0000 	movt	r0, #2048	; 0x800
 800053a:	4619      	mov	r1, r3
 800053c:	f000 fb2e 	bl	8000b9c <__cyg_profile_func_enter>
    QTimeEvt_postEvery(
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	687a      	ldr	r2, [r7, #4]
 8000544:	629a      	str	r2, [r3, #40]	; 0x28
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	f103 0320 	add.w	r3, r3, #32
 800054c:	4618      	mov	r0, r3
 800054e:	f04f 0132 	mov.w	r1, #50	; 0x32
 8000552:	f04f 0232 	mov.w	r2, #50	; 0x32
 8000556:	f002 faeb 	bl	8002b30 <QTimeEvt_armX>
        &me->TimeEvt,
        (QActive *)me,
        BSP_TICKS_PER_SEC/2);
    return Q_TRAN(&USART_on);
 800055a:	687a      	ldr	r2, [r7, #4]
 800055c:	f240 5389 	movw	r3, #1417	; 0x589
 8000560:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000564:	6093      	str	r3, [r2, #8]
 8000566:	f04f 0504 	mov.w	r5, #4
 800056a:	4623      	mov	r3, r4
 800056c:	f240 5025 	movw	r0, #1317	; 0x525
 8000570:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000574:	4619      	mov	r1, r3
 8000576:	f000 fb79 	bl	8000c6c <__cyg_profile_func_exit>
 800057a:	462b      	mov	r3, r5
}
 800057c:	4618      	mov	r0, r3
 800057e:	f107 0708 	add.w	r7, r7, #8
 8000582:	46bd      	mov	sp, r7
 8000584:	bdb0      	pop	{r4, r5, r7, pc}
 8000586:	bf00      	nop

08000588 <USART_on>:
/* @(/1/0/1/1) .............................................................*/
static QState USART_on(USART * const me, QEvt const * const e) {
 8000588:	b5b0      	push	{r4, r5, r7, lr}
 800058a:	b084      	sub	sp, #16
 800058c:	af00      	add	r7, sp, #0
 800058e:	4674      	mov	r4, lr
 8000590:	6078      	str	r0, [r7, #4]
 8000592:	6039      	str	r1, [r7, #0]
 8000594:	4623      	mov	r3, r4
 8000596:	f240 5089 	movw	r0, #1417	; 0x589
 800059a:	f6c0 0000 	movt	r0, #2048	; 0x800
 800059e:	4619      	mov	r1, r3
 80005a0:	f000 fafc 	bl	8000b9c <__cyg_profile_func_enter>
    QState status_;
    switch (e->sig) {
 80005a4:	683b      	ldr	r3, [r7, #0]
 80005a6:	881b      	ldrh	r3, [r3, #0]
 80005a8:	2b01      	cmp	r3, #1
 80005aa:	d002      	beq.n	80005b2 <USART_on+0x2a>
 80005ac:	2b04      	cmp	r3, #4
 80005ae:	d006      	beq.n	80005be <USART_on+0x36>
 80005b0:	e00f      	b.n	80005d2 <USART_on+0x4a>
        /* @(/1/0/1/1) */
        case Q_ENTRY_SIG: {
            BSP_ledOn();
 80005b2:	f000 fa9d 	bl	8000af0 <BSP_ledOn>
            status_ = Q_HANDLED();
 80005b6:	f04f 0301 	mov.w	r3, #1
 80005ba:	73fb      	strb	r3, [r7, #15]
            break;
 80005bc:	e013      	b.n	80005e6 <USART_on+0x5e>
        }
        /* @(/1/0/1/1/0) */
        case TIMEOUT_SIG: {
            status_ = Q_TRAN(&USART_off);
 80005be:	687a      	ldr	r2, [r7, #4]
 80005c0:	f240 6305 	movw	r3, #1541	; 0x605
 80005c4:	f6c0 0300 	movt	r3, #2048	; 0x800
 80005c8:	6093      	str	r3, [r2, #8]
 80005ca:	f04f 0304 	mov.w	r3, #4
 80005ce:	73fb      	strb	r3, [r7, #15]
            break;
 80005d0:	e009      	b.n	80005e6 <USART_on+0x5e>
        }
        default: {
            status_ = Q_SUPER(&QHsm_top);
 80005d2:	687a      	ldr	r2, [r7, #4]
 80005d4:	f642 33b5 	movw	r3, #11189	; 0x2bb5
 80005d8:	f6c0 0300 	movt	r3, #2048	; 0x800
 80005dc:	6093      	str	r3, [r2, #8]
 80005de:	f04f 0300 	mov.w	r3, #0
 80005e2:	73fb      	strb	r3, [r7, #15]
            break;
 80005e4:	bf00      	nop
        }
    }
    return status_;
 80005e6:	7bfd      	ldrb	r5, [r7, #15]
 80005e8:	4623      	mov	r3, r4
 80005ea:	f240 5089 	movw	r0, #1417	; 0x589
 80005ee:	f6c0 0000 	movt	r0, #2048	; 0x800
 80005f2:	4619      	mov	r1, r3
 80005f4:	f000 fb3a 	bl	8000c6c <__cyg_profile_func_exit>
 80005f8:	462b      	mov	r3, r5
}
 80005fa:	4618      	mov	r0, r3
 80005fc:	f107 0710 	add.w	r7, r7, #16
 8000600:	46bd      	mov	sp, r7
 8000602:	bdb0      	pop	{r4, r5, r7, pc}

08000604 <USART_off>:
/* @(/1/0/1/2) .............................................................*/
static QState USART_off(USART * const me, QEvt const * const e) {
 8000604:	b5b0      	push	{r4, r5, r7, lr}
 8000606:	b084      	sub	sp, #16
 8000608:	af00      	add	r7, sp, #0
 800060a:	4674      	mov	r4, lr
 800060c:	6078      	str	r0, [r7, #4]
 800060e:	6039      	str	r1, [r7, #0]
 8000610:	4623      	mov	r3, r4
 8000612:	f240 6005 	movw	r0, #1541	; 0x605
 8000616:	f6c0 0000 	movt	r0, #2048	; 0x800
 800061a:	4619      	mov	r1, r3
 800061c:	f000 fabe 	bl	8000b9c <__cyg_profile_func_enter>
    QState status_;
    switch (e->sig) {
 8000620:	683b      	ldr	r3, [r7, #0]
 8000622:	881b      	ldrh	r3, [r3, #0]
 8000624:	2b01      	cmp	r3, #1
 8000626:	d002      	beq.n	800062e <USART_off+0x2a>
 8000628:	2b04      	cmp	r3, #4
 800062a:	d006      	beq.n	800063a <USART_off+0x36>
 800062c:	e00f      	b.n	800064e <USART_off+0x4a>
        /* @(/1/0/1/2) */
        case Q_ENTRY_SIG: {
            BSP_ledOff();
 800062e:	f000 fa4b 	bl	8000ac8 <BSP_ledOff>
            status_ = Q_HANDLED();
 8000632:	f04f 0301 	mov.w	r3, #1
 8000636:	73fb      	strb	r3, [r7, #15]
            break;
 8000638:	e013      	b.n	8000662 <USART_off+0x5e>
        }
        /* @(/1/0/1/2/0) */
        case TIMEOUT_SIG: {
            status_ = Q_TRAN(&USART_on);
 800063a:	687a      	ldr	r2, [r7, #4]
 800063c:	f240 5389 	movw	r3, #1417	; 0x589
 8000640:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000644:	6093      	str	r3, [r2, #8]
 8000646:	f04f 0304 	mov.w	r3, #4
 800064a:	73fb      	strb	r3, [r7, #15]
            break;
 800064c:	e009      	b.n	8000662 <USART_off+0x5e>
        }
        default: {
            status_ = Q_SUPER(&QHsm_top);
 800064e:	687a      	ldr	r2, [r7, #4]
 8000650:	f642 33b5 	movw	r3, #11189	; 0x2bb5
 8000654:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000658:	6093      	str	r3, [r2, #8]
 800065a:	f04f 0300 	mov.w	r3, #0
 800065e:	73fb      	strb	r3, [r7, #15]
            break;
 8000660:	bf00      	nop
        }
    }
    return status_;
 8000662:	7bfd      	ldrb	r5, [r7, #15]
 8000664:	4623      	mov	r3, r4
 8000666:	f240 6005 	movw	r0, #1541	; 0x605
 800066a:	f6c0 0000 	movt	r0, #2048	; 0x800
 800066e:	4619      	mov	r1, r3
 8000670:	f000 fafc 	bl	8000c6c <__cyg_profile_func_exit>
 8000674:	462b      	mov	r3, r5
}
 8000676:	4618      	mov	r0, r3
 8000678:	f107 0710 	add.w	r7, r7, #16
 800067c:	46bd      	mov	sp, r7
 800067e:	bdb0      	pop	{r4, r5, r7, pc}

08000680 <USART_ctor>:


static USART l_usart;
QActive *TASK_USART = &l_usart.super;

static void USART_ctor(void) {
 8000680:	b590      	push	{r4, r7, lr}
 8000682:	b083      	sub	sp, #12
 8000684:	af00      	add	r7, sp, #0
 8000686:	4674      	mov	r4, lr
 8000688:	4623      	mov	r3, r4
 800068a:	f240 6081 	movw	r0, #1665	; 0x681
 800068e:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000692:	4619      	mov	r1, r3
 8000694:	f000 fa82 	bl	8000b9c <__cyg_profile_func_enter>
    USART *me = (USART *)TASK_USART;
 8000698:	f240 0318 	movw	r3, #24
 800069c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	607b      	str	r3, [r7, #4]
    QActive_ctor(&me->super, (QStateHandler)&USART_initial);
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	4618      	mov	r0, r3
 80006a8:	f240 5125 	movw	r1, #1317	; 0x525
 80006ac:	f6c0 0100 	movt	r1, #2048	; 0x800
 80006b0:	f001 fbc2 	bl	8001e38 <QActive_ctor>
    QTimeEvt_ctor(&me->TimeEvt, TIMEOUT_SIG);
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	f103 0320 	add.w	r3, r3, #32
 80006ba:	4618      	mov	r0, r3
 80006bc:	f04f 0100 	mov.w	r1, #0
 80006c0:	f04f 0204 	mov.w	r2, #4
 80006c4:	f04f 0300 	mov.w	r3, #0
 80006c8:	f002 fa84 	bl	8002bd4 <QTimeEvt_ctorX>
 80006cc:	4623      	mov	r3, r4
 80006ce:	f240 6081 	movw	r0, #1665	; 0x681
 80006d2:	f6c0 0000 	movt	r0, #2048	; 0x800
 80006d6:	4619      	mov	r1, r3
 80006d8:	f000 fac8 	bl	8000c6c <__cyg_profile_func_exit>
}
 80006dc:	f107 070c 	add.w	r7, r7, #12
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd90      	pop	{r4, r7, pc}

080006e4 <main>:
int main() {
 80006e4:	b5b0      	push	{r4, r5, r7, lr}
 80006e6:	b084      	sub	sp, #16
 80006e8:	af04      	add	r7, sp, #16
 80006ea:	4674      	mov	r4, lr
 80006ec:	4623      	mov	r3, r4
 80006ee:	f240 60e5 	movw	r0, #1765	; 0x6e5
 80006f2:	f6c0 0000 	movt	r0, #2048	; 0x800
 80006f6:	4619      	mov	r1, r3
 80006f8:	f000 fa50 	bl	8000b9c <__cyg_profile_func_enter>

	BSP_init();
 80006fc:	f000 f82c 	bl	8000758 <BSP_init>
    USART_ctor();
 8000700:	f7ff ffbe 	bl	8000680 <USART_ctor>
    QF_init();
 8000704:	f001 fc42 	bl	8001f8c <QF_init>

    static QEvt const *usart_queueSto[10];
    QActive_start(TASK_USART, 1,
 8000708:	f240 0318 	movw	r3, #24
 800070c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	f04f 0200 	mov.w	r2, #0
 8000716:	9200      	str	r2, [sp, #0]
 8000718:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800071c:	9201      	str	r2, [sp, #4]
 800071e:	f04f 0200 	mov.w	r2, #0
 8000722:	9202      	str	r2, [sp, #8]
 8000724:	4618      	mov	r0, r3
 8000726:	f04f 0101 	mov.w	r1, #1
 800072a:	f240 02f8 	movw	r2, #248	; 0xf8
 800072e:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000732:	f04f 030a 	mov.w	r3, #10
 8000736:	f001 fbaf 	bl	8001e98 <QActive_start_>
                  usart_queueSto, Q_DIM(usart_queueSto),
                  (void *)0, 1024, (QEvt *)0);
    return QF_run();
 800073a:	f001 fc01 	bl	8001f40 <QF_run>
 800073e:	4605      	mov	r5, r0
 8000740:	4623      	mov	r3, r4
 8000742:	f240 60e5 	movw	r0, #1765	; 0x6e5
 8000746:	f6c0 0000 	movt	r0, #2048	; 0x800
 800074a:	4619      	mov	r1, r3
 800074c:	f000 fa8e 	bl	8000c6c <__cyg_profile_func_exit>
 8000750:	462b      	mov	r3, r5
}
 8000752:	4618      	mov	r0, r3
 8000754:	46bd      	mov	sp, r7
 8000756:	bdb0      	pop	{r4, r5, r7, pc}

08000758 <BSP_init>:
#include "main.h"

BSP_init(void)
{
 8000758:	b590      	push	{r4, r7, lr}
 800075a:	b089      	sub	sp, #36	; 0x24
 800075c:	af00      	add	r7, sp, #0
 800075e:	4674      	mov	r4, lr
 8000760:	4623      	mov	r3, r4
 8000762:	f240 7059 	movw	r0, #1881	; 0x759
 8000766:	f6c0 0000 	movt	r0, #2048	; 0x800
 800076a:	4619      	mov	r1, r3
 800076c:	f000 fa16 	bl	8000b9c <__cyg_profile_func_enter>
	GPIO_InitTypeDef GPIO_InitStructure;
	USART_InitTypeDef USART_InitStructure;

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
 8000770:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000774:	f04f 0101 	mov.w	r1, #1
 8000778:	f000 fea0 	bl	80014bc <RCC_APB1PeriphClockCmd>
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 800077c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000780:	f04f 0101 	mov.w	r1, #1
 8000784:	f000 fe7e 	bl	8001484 <RCC_AHBPeriphClockCmd>

  	GPIO_PinAFConfig(GPIOA, GPIO_PinSource2, GPIO_AF_7);
 8000788:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800078c:	f04f 0102 	mov.w	r1, #2
 8000790:	f04f 0207 	mov.w	r2, #7
 8000794:	f001 fac8 	bl	8001d28 <GPIO_PinAFConfig>
    GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_7);
 8000798:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800079c:	f04f 0103 	mov.w	r1, #3
 80007a0:	f04f 0207 	mov.w	r2, #7
 80007a4:	f001 fac0 	bl	8001d28 <GPIO_PinAFConfig>

	GPIO_InitStructure.GPIO_Pin  	= GPIO_Pin_2 | GPIO_Pin_3;
 80007a8:	f04f 030c 	mov.w	r3, #12
 80007ac:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.GPIO_Mode 	= GPIO_Mode_AF;
 80007ae:	f04f 0302 	mov.w	r3, #2
 80007b2:	773b      	strb	r3, [r7, #28]
	GPIO_InitStructure.GPIO_OType   = GPIO_OType_PP;
 80007b4:	f04f 0300 	mov.w	r3, #0
 80007b8:	77bb      	strb	r3, [r7, #30]
	GPIO_InitStructure.GPIO_PuPd    = GPIO_PuPd_NOPULL;
 80007ba:	f04f 0300 	mov.w	r3, #0
 80007be:	77fb      	strb	r3, [r7, #31]
	GPIO_InitStructure.GPIO_Speed 	= GPIO_Speed_50MHz;
 80007c0:	f04f 0303 	mov.w	r3, #3
 80007c4:	777b      	strb	r3, [r7, #29]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 80007c6:	f107 0318 	add.w	r3, r7, #24
 80007ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ce:	4619      	mov	r1, r3
 80007d0:	f001 f9b6 	bl	8001b40 <GPIO_Init>

	USART_InitStructure.USART_BaudRate   = 460800;
 80007d4:	f44f 23e1 	mov.w	r3, #460800	; 0x70800
 80007d8:	603b      	str	r3, [r7, #0]
	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 80007da:	f04f 0300 	mov.w	r3, #0
 80007de:	607b      	str	r3, [r7, #4]
	USART_InitStructure.USART_StopBits   = USART_StopBits_1;
 80007e0:	f04f 0300 	mov.w	r3, #0
 80007e4:	60bb      	str	r3, [r7, #8]
	USART_InitStructure.USART_Parity	 = USART_Parity_No;
 80007e6:	f04f 0300 	mov.w	r3, #0
 80007ea:	60fb      	str	r3, [r7, #12]
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 80007ec:	f04f 0300 	mov.w	r3, #0
 80007f0:	617b      	str	r3, [r7, #20]
	USART_InitStructure.USART_Mode       = USART_Mode_Rx | USART_Mode_Tx;
 80007f2:	f04f 030c 	mov.w	r3, #12
 80007f6:	613b      	str	r3, [r7, #16]

	USART_Init(USART2, &USART_InitStructure);
 80007f8:	463b      	mov	r3, r7
 80007fa:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 80007fe:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000802:	4619      	mov	r1, r3
 8000804:	f000 ff0a 	bl	800161c <USART_Init>
	USART_Cmd(USART2, ENABLE);
 8000808:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 800080c:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000810:	f04f 0101 	mov.w	r1, #1
 8000814:	f000 ff78 	bl	8001708 <USART_Cmd>
 8000818:	4623      	mov	r3, r4
 800081a:	f240 7059 	movw	r0, #1881	; 0x759
 800081e:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000822:	4619      	mov	r1, r3
 8000824:	f000 fa22 	bl	8000c6c <__cyg_profile_func_exit>
}
 8000828:	f107 0724 	add.w	r7, r7, #36	; 0x24
 800082c:	46bd      	mov	sp, r7
 800082e:	bd90      	pop	{r4, r7, pc}

08000830 <itoa>:

static char *itoa(int value, char *string, int radix)
{
 8000830:	b5b0      	push	{r4, r5, r7, lr}
 8000832:	b088      	sub	sp, #32
 8000834:	af00      	add	r7, sp, #0
 8000836:	4675      	mov	r5, lr
 8000838:	60f8      	str	r0, [r7, #12]
 800083a:	60b9      	str	r1, [r7, #8]
 800083c:	607a      	str	r2, [r7, #4]
 800083e:	462b      	mov	r3, r5
 8000840:	f640 0031 	movw	r0, #2097	; 0x831
 8000844:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000848:	4619      	mov	r1, r3
 800084a:	f000 f9a7 	bl	8000b9c <__cyg_profile_func_enter>
	int 	i, d;
	int 	flag = 0;
 800084e:	f04f 0300 	mov.w	r3, #0
 8000852:	61bb      	str	r3, [r7, #24]
	char	*ptr = string;
 8000854:	68bb      	ldr	r3, [r7, #8]
 8000856:	617b      	str	r3, [r7, #20]

	if(radix != 0)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d005      	beq.n	800086a <itoa+0x3a>
	{
		*ptr = 0;
 800085e:	697b      	ldr	r3, [r7, #20]
 8000860:	f04f 0200 	mov.w	r2, #0
 8000864:	701a      	strb	r2, [r3, #0]
		return string;
 8000866:	68bc      	ldr	r4, [r7, #8]
 8000868:	e058      	b.n	800091c <itoa+0xec>
	}

	if(!value)
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d10d      	bne.n	800088c <itoa+0x5c>
	{
		*ptr++ = 0x30;
 8000870:	697b      	ldr	r3, [r7, #20]
 8000872:	f04f 0230 	mov.w	r2, #48	; 0x30
 8000876:	701a      	strb	r2, [r3, #0]
 8000878:	697b      	ldr	r3, [r7, #20]
 800087a:	f103 0301 	add.w	r3, r3, #1
 800087e:	617b      	str	r3, [r7, #20]
		*ptr = 0;
 8000880:	697b      	ldr	r3, [r7, #20]
 8000882:	f04f 0200 	mov.w	r2, #0
 8000886:	701a      	strb	r2, [r3, #0]
		return string;
 8000888:	68bc      	ldr	r4, [r7, #8]
 800088a:	e047      	b.n	800091c <itoa+0xec>
	}

	if(value < 0)
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	2b00      	cmp	r3, #0
 8000890:	da0b      	bge.n	80008aa <itoa+0x7a>
	{
		*ptr++ = '-';
 8000892:	697b      	ldr	r3, [r7, #20]
 8000894:	f04f 022d 	mov.w	r2, #45	; 0x2d
 8000898:	701a      	strb	r2, [r3, #0]
 800089a:	697b      	ldr	r3, [r7, #20]
 800089c:	f103 0301 	add.w	r3, r3, #1
 80008a0:	617b      	str	r3, [r7, #20]
		value *= -1;
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	f1c3 0300 	rsb	r3, r3, #0
 80008a8:	60fb      	str	r3, [r7, #12]
	}

	for(i = 10000; i > 0; i /= 10)
 80008aa:	f242 7310 	movw	r3, #10000	; 0x2710
 80008ae:	61fb      	str	r3, [r7, #28]
 80008b0:	e02c      	b.n	800090c <itoa+0xdc>
	{
		d = value / i;
 80008b2:	68fa      	ldr	r2, [r7, #12]
 80008b4:	69fb      	ldr	r3, [r7, #28]
 80008b6:	fb92 f3f3 	sdiv	r3, r2, r3
 80008ba:	613b      	str	r3, [r7, #16]
		if(d || flag)
 80008bc:	693b      	ldr	r3, [r7, #16]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d102      	bne.n	80008c8 <itoa+0x98>
 80008c2:	69bb      	ldr	r3, [r7, #24]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d014      	beq.n	80008f2 <itoa+0xc2>
		{
			*ptr++ = (char)(d + 0x30);
 80008c8:	693b      	ldr	r3, [r7, #16]
 80008ca:	b2db      	uxtb	r3, r3
 80008cc:	f103 0330 	add.w	r3, r3, #48	; 0x30
 80008d0:	b2da      	uxtb	r2, r3
 80008d2:	697b      	ldr	r3, [r7, #20]
 80008d4:	701a      	strb	r2, [r3, #0]
 80008d6:	697b      	ldr	r3, [r7, #20]
 80008d8:	f103 0301 	add.w	r3, r3, #1
 80008dc:	617b      	str	r3, [r7, #20]
			value -= (d * i);
 80008de:	693b      	ldr	r3, [r7, #16]
 80008e0:	69fa      	ldr	r2, [r7, #28]
 80008e2:	fb02 f303 	mul.w	r3, r2, r3
 80008e6:	68fa      	ldr	r2, [r7, #12]
 80008e8:	1ad3      	subs	r3, r2, r3
 80008ea:	60fb      	str	r3, [r7, #12]
			flag = 1;
 80008ec:	f04f 0301 	mov.w	r3, #1
 80008f0:	61bb      	str	r3, [r7, #24]
	{
		*ptr++ = '-';
		value *= -1;
	}

	for(i = 10000; i > 0; i /= 10)
 80008f2:	69fa      	ldr	r2, [r7, #28]
 80008f4:	f246 6367 	movw	r3, #26215	; 0x6667
 80008f8:	f2c6 6366 	movt	r3, #26214	; 0x6666
 80008fc:	fb83 1302 	smull	r1, r3, r3, r2
 8000900:	ea4f 01a3 	mov.w	r1, r3, asr #2
 8000904:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000908:	1acb      	subs	r3, r1, r3
 800090a:	61fb      	str	r3, [r7, #28]
 800090c:	69fb      	ldr	r3, [r7, #28]
 800090e:	2b00      	cmp	r3, #0
 8000910:	dccf      	bgt.n	80008b2 <itoa+0x82>
			value -= (d * i);
			flag = 1;
		}
	}

	*ptr = 0;
 8000912:	697b      	ldr	r3, [r7, #20]
 8000914:	f04f 0200 	mov.w	r2, #0
 8000918:	701a      	strb	r2, [r3, #0]

	return string;
 800091a:	68bc      	ldr	r4, [r7, #8]
 800091c:	462b      	mov	r3, r5
 800091e:	f640 0031 	movw	r0, #2097	; 0x831
 8000922:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000926:	4619      	mov	r1, r3
 8000928:	f000 f9a0 	bl	8000c6c <__cyg_profile_func_exit>
 800092c:	4623      	mov	r3, r4
}
 800092e:	4618      	mov	r0, r3
 8000930:	f107 0720 	add.w	r7, r7, #32
 8000934:	46bd      	mov	sp, r7
 8000936:	bdb0      	pop	{r4, r5, r7, pc}

08000938 <USART_printf>:

USART_printf(USART_TypeDef* USARTx, uint8_t *Data, ...)
{
 8000938:	b40e      	push	{r1, r2, r3}
 800093a:	b590      	push	{r4, r7, lr}
 800093c:	b08a      	sub	sp, #40	; 0x28
 800093e:	af00      	add	r7, sp, #0
 8000940:	4674      	mov	r4, lr
 8000942:	6078      	str	r0, [r7, #4]
 8000944:	4623      	mov	r3, r4
 8000946:	f640 1039 	movw	r0, #2361	; 0x939
 800094a:	f6c0 0000 	movt	r0, #2048	; 0x800
 800094e:	4619      	mov	r1, r3
 8000950:	f000 f924 	bl	8000b9c <__cyg_profile_func_enter>
	const char *s;
	int d;
	char buf[16];
	va_list ap;
	va_start(ap, Data);
 8000954:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000958:	60fb      	str	r3, [r7, #12]

	while(*Data != 0)
 800095a:	e0a0      	b.n	8000a9e <USART_printf+0x166>
	{
		if( *Data == 0x5c)
 800095c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	2b5c      	cmp	r3, #92	; 0x5c
 8000962:	d123      	bne.n	80009ac <USART_printf+0x74>
		{
			switch( *++Data)
 8000964:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000966:	f103 0301 	add.w	r3, r3, #1
 800096a:	637b      	str	r3, [r7, #52]	; 0x34
 800096c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	2b6e      	cmp	r3, #110	; 0x6e
 8000972:	d00b      	beq.n	800098c <USART_printf+0x54>
 8000974:	2b72      	cmp	r3, #114	; 0x72
 8000976:	d113      	bne.n	80009a0 <USART_printf+0x68>
			{
				case 'r':
					USART_SendData(USARTx, 0x0d);
 8000978:	6878      	ldr	r0, [r7, #4]
 800097a:	f04f 010d 	mov.w	r1, #13
 800097e:	f000 ff53 	bl	8001828 <USART_SendData>
					Data++;
 8000982:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000984:	f103 0301 	add.w	r3, r3, #1
 8000988:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800098a:	e00e      	b.n	80009aa <USART_printf+0x72>

				case 'n':
					USART_SendData(USARTx, 0x0a);
 800098c:	6878      	ldr	r0, [r7, #4]
 800098e:	f04f 010a 	mov.w	r1, #10
 8000992:	f000 ff49 	bl	8001828 <USART_SendData>
					Data++;
 8000996:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000998:	f103 0301 	add.w	r3, r3, #1
 800099c:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800099e:	e004      	b.n	80009aa <USART_printf+0x72>

				default:
					Data++;
 80009a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009a2:	f103 0301 	add.w	r3, r3, #1
 80009a6:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 80009a8:	e070      	b.n	8000a8c <USART_printf+0x154>
					break;
			}
		}

		else USART_SendData(USARTx, *Data++);
		while(USART_GetFlagStatus(USARTx, USART_FLAG_TC) == RESET);
 80009aa:	e06f      	b.n	8000a8c <USART_printf+0x154>
				default:
					Data++;
					break;
			}
		}
		else if( *Data == '%')
 80009ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	2b25      	cmp	r3, #37	; 0x25
 80009b2:	d160      	bne.n	8000a76 <USART_printf+0x13e>
		{
			switch( *++Data)
 80009b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009b6:	f103 0301 	add.w	r3, r3, #1
 80009ba:	637b      	str	r3, [r7, #52]	; 0x34
 80009bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	2b64      	cmp	r3, #100	; 0x64
 80009c2:	d024      	beq.n	8000a0e <USART_printf+0xd6>
 80009c4:	2b73      	cmp	r3, #115	; 0x73
 80009c6:	d150      	bne.n	8000a6a <USART_printf+0x132>
			{
				case 's':
					s = va_arg(ap, const char *);
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	f103 0204 	add.w	r2, r3, #4
 80009ce:	60fa      	str	r2, [r7, #12]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	627b      	str	r3, [r7, #36]	; 0x24

					for(; *s; s++)
 80009d4:	e012      	b.n	80009fc <USART_printf+0xc4>
					{
						USART_SendData(USARTx, *s);
 80009d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	6878      	ldr	r0, [r7, #4]
 80009dc:	4619      	mov	r1, r3
 80009de:	f000 ff23 	bl	8001828 <USART_SendData>
						while(USART_GetFlagStatus(USARTx, USART_FLAG_TC) == RESET);
 80009e2:	bf00      	nop
 80009e4:	6878      	ldr	r0, [r7, #4]
 80009e6:	f04f 0140 	mov.w	r1, #64	; 0x40
 80009ea:	f001 f80f 	bl	8001a0c <USART_GetFlagStatus>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d0f7      	beq.n	80009e4 <USART_printf+0xac>
			switch( *++Data)
			{
				case 's':
					s = va_arg(ap, const char *);

					for(; *s; s++)
 80009f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009f6:	f103 0301 	add.w	r3, r3, #1
 80009fa:	627b      	str	r3, [r7, #36]	; 0x24
 80009fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d1e8      	bne.n	80009d6 <USART_printf+0x9e>
					{
						USART_SendData(USARTx, *s);
						while(USART_GetFlagStatus(USARTx, USART_FLAG_TC) == RESET);
					}
					Data++;
 8000a04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a06:	f103 0301 	add.w	r3, r3, #1
 8000a0a:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8000a0c:	e032      	b.n	8000a74 <USART_printf+0x13c>

				case 'd':
					d = va_arg(ap, int);
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	f103 0204 	add.w	r2, r3, #4
 8000a14:	60fa      	str	r2, [r7, #12]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	623b      	str	r3, [r7, #32]
					itoa(d, buf, 10);
 8000a1a:	f107 0310 	add.w	r3, r7, #16
 8000a1e:	6a38      	ldr	r0, [r7, #32]
 8000a20:	4619      	mov	r1, r3
 8000a22:	f04f 020a 	mov.w	r2, #10
 8000a26:	f7ff ff03 	bl	8000830 <itoa>
					for(s = buf; *s; s++)
 8000a2a:	f107 0310 	add.w	r3, r7, #16
 8000a2e:	627b      	str	r3, [r7, #36]	; 0x24
 8000a30:	e012      	b.n	8000a58 <USART_printf+0x120>
					{
						USART_SendData(USARTx, *s);
 8000a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	6878      	ldr	r0, [r7, #4]
 8000a38:	4619      	mov	r1, r3
 8000a3a:	f000 fef5 	bl	8001828 <USART_SendData>
						while(USART_GetFlagStatus(USARTx, USART_FLAG_TC) == RESET);
 8000a3e:	bf00      	nop
 8000a40:	6878      	ldr	r0, [r7, #4]
 8000a42:	f04f 0140 	mov.w	r1, #64	; 0x40
 8000a46:	f000 ffe1 	bl	8001a0c <USART_GetFlagStatus>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d0f7      	beq.n	8000a40 <USART_printf+0x108>
					break;

				case 'd':
					d = va_arg(ap, int);
					itoa(d, buf, 10);
					for(s = buf; *s; s++)
 8000a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a52:	f103 0301 	add.w	r3, r3, #1
 8000a56:	627b      	str	r3, [r7, #36]	; 0x24
 8000a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d1e8      	bne.n	8000a32 <USART_printf+0xfa>
					{
						USART_SendData(USARTx, *s);
						while(USART_GetFlagStatus(USARTx, USART_FLAG_TC) == RESET);
					}
					Data++;
 8000a60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a62:	f103 0301 	add.w	r3, r3, #1
 8000a66:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8000a68:	e004      	b.n	8000a74 <USART_printf+0x13c>

				default:
					Data++;
 8000a6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a6c:	f103 0301 	add.w	r3, r3, #1
 8000a70:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8000a72:	e00b      	b.n	8000a8c <USART_printf+0x154>
			}
		}

		else USART_SendData(USARTx, *Data++);
		while(USART_GetFlagStatus(USARTx, USART_FLAG_TC) == RESET);
 8000a74:	e00a      	b.n	8000a8c <USART_printf+0x154>
					Data++;
					break;
			}
		}

		else USART_SendData(USARTx, *Data++);
 8000a76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000a7c:	f102 0201 	add.w	r2, r2, #1
 8000a80:	637a      	str	r2, [r7, #52]	; 0x34
 8000a82:	6878      	ldr	r0, [r7, #4]
 8000a84:	4619      	mov	r1, r3
 8000a86:	f000 fecf 	bl	8001828 <USART_SendData>
		while(USART_GetFlagStatus(USARTx, USART_FLAG_TC) == RESET);
 8000a8a:	e7ff      	b.n	8000a8c <USART_printf+0x154>
 8000a8c:	bf00      	nop
 8000a8e:	6878      	ldr	r0, [r7, #4]
 8000a90:	f04f 0140 	mov.w	r1, #64	; 0x40
 8000a94:	f000 ffba 	bl	8001a0c <USART_GetFlagStatus>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d0f7      	beq.n	8000a8e <USART_printf+0x156>
	int d;
	char buf[16];
	va_list ap;
	va_start(ap, Data);

	while(*Data != 0)
 8000a9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	f47f af5a 	bne.w	800095c <USART_printf+0x24>
 8000aa8:	4623      	mov	r3, r4
 8000aaa:	f640 1039 	movw	r0, #2361	; 0x939
 8000aae:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	f000 f8da 	bl	8000c6c <__cyg_profile_func_exit>
		}

		else USART_SendData(USARTx, *Data++);
		while(USART_GetFlagStatus(USARTx, USART_FLAG_TC) == RESET);
	}
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f107 0728 	add.w	r7, r7, #40	; 0x28
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000ac4:	b003      	add	sp, #12
 8000ac6:	4770      	bx	lr

08000ac8 <BSP_ledOff>:

void BSP_ledOff(void)
{
 8000ac8:	b598      	push	{r3, r4, r7, lr}
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	4674      	mov	r4, lr
 8000ace:	4623      	mov	r3, r4
 8000ad0:	f640 20c9 	movw	r0, #2761	; 0xac9
 8000ad4:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000ad8:	4619      	mov	r1, r3
 8000ada:	f000 f85f 	bl	8000b9c <__cyg_profile_func_enter>
 8000ade:	4623      	mov	r3, r4
 8000ae0:	f640 20c9 	movw	r0, #2761	; 0xac9
 8000ae4:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000ae8:	4619      	mov	r1, r3
 8000aea:	f000 f8bf 	bl	8000c6c <__cyg_profile_func_exit>
//    printf("\r\nled_off\n\r");
}
 8000aee:	bd98      	pop	{r3, r4, r7, pc}

08000af0 <BSP_ledOn>:

void BSP_ledOn(void)
{
 8000af0:	b598      	push	{r3, r4, r7, lr}
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	4674      	mov	r4, lr
 8000af6:	4623      	mov	r3, r4
 8000af8:	f640 20f1 	movw	r0, #2801	; 0xaf1
 8000afc:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000b00:	4619      	mov	r1, r3
 8000b02:	f000 f84b 	bl	8000b9c <__cyg_profile_func_enter>
 8000b06:	4623      	mov	r3, r4
 8000b08:	f640 20f1 	movw	r0, #2801	; 0xaf1
 8000b0c:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000b10:	4619      	mov	r1, r3
 8000b12:	f000 f8ab 	bl	8000c6c <__cyg_profile_func_exit>
//    printf("\r\nled_on\n\r");
}
 8000b16:	bd98      	pop	{r3, r4, r7, pc}

08000b18 <BSP_clockInit>:

void BSP_clockInit(void)
{
 8000b18:	b590      	push	{r4, r7, lr}
 8000b1a:	b083      	sub	sp, #12
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	4674      	mov	r4, lr
 8000b20:	4623      	mov	r3, r4
 8000b22:	f640 3019 	movw	r0, #2841	; 0xb19
 8000b26:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	f000 f836 	bl	8000b9c <__cyg_profile_func_enter>
	NVIC_InitTypeDef NVIC_InitStructure;

	NVIC_InitStructure.NVIC_IRQChannel = SysTick_IRQn;
 8000b30:	f04f 03ff 	mov.w	r3, #255	; 0xff
 8000b34:	713b      	strb	r3, [r7, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8000b36:	f04f 0300 	mov.w	r3, #0
 8000b3a:	717b      	strb	r3, [r7, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8000b3c:	f04f 0300 	mov.w	r3, #0
 8000b40:	71bb      	strb	r3, [r7, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8000b42:	f04f 0301 	mov.w	r3, #1
 8000b46:	71fb      	strb	r3, [r7, #7]
	NVIC_Init(&NVIC_InitStructure);
 8000b48:	f107 0304 	add.w	r3, r7, #4
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f001 f90d 	bl	8001d6c <NVIC_Init>

	SysTick_CLKSourceConfig(SysTick_CLKSource_HCLK);
 8000b52:	f04f 0004 	mov.w	r0, #4
 8000b56:	f001 f961 	bl	8001e1c <SysTick_CLKSourceConfig>
	SysTick->LOAD = 640000;
 8000b5a:	f24e 0310 	movw	r3, #57360	; 0xe010
 8000b5e:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000b62:	f44f 4244 	mov.w	r2, #50176	; 0xc400
 8000b66:	f2c0 0209 	movt	r2, #9
 8000b6a:	605a      	str	r2, [r3, #4]
	SysTick->CTRL |= 0x03;
 8000b6c:	f24e 0310 	movw	r3, #57360	; 0xe010
 8000b70:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000b74:	f24e 0210 	movw	r2, #57360	; 0xe010
 8000b78:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8000b7c:	6812      	ldr	r2, [r2, #0]
 8000b7e:	f042 0203 	orr.w	r2, r2, #3
 8000b82:	601a      	str	r2, [r3, #0]
 8000b84:	4623      	mov	r3, r4
 8000b86:	f640 3019 	movw	r0, #2841	; 0xb19
 8000b8a:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000b8e:	4619      	mov	r1, r3
 8000b90:	f000 f86c 	bl	8000c6c <__cyg_profile_func_exit>
}
 8000b94:	f107 070c 	add.w	r7, r7, #12
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd90      	pop	{r4, r7, pc}

08000b9c <__cyg_profile_func_enter>:

}*/

void __attribute__((__no_instrument_function__))
     __cyg_profile_func_enter(void *this_func, void *call_site)
{
 8000b9c:	b590      	push	{r4, r7, lr}
 8000b9e:	b089      	sub	sp, #36	; 0x24
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
 8000ba4:	6039      	str	r1, [r7, #0]


    char s[16] = "\r\nE:0x00000000\n\r";
 8000ba6:	f642 734c 	movw	r3, #12108	; 0x2f4c
 8000baa:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000bae:	f107 0408 	add.w	r4, r7, #8
 8000bb2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000bb4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    uint32_t temp, i;

    for(i = 0; i < 8; i++)
 8000bb8:	f04f 0300 	mov.w	r3, #0
 8000bbc:	61fb      	str	r3, [r7, #28]
 8000bbe:	e02a      	b.n	8000c16 <__cyg_profile_func_enter+0x7a>
    {
        temp = (((uint32_t)this_func >> i*4) & 0xf);
 8000bc0:	687a      	ldr	r2, [r7, #4]
 8000bc2:	69fb      	ldr	r3, [r7, #28]
 8000bc4:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000bc8:	fa22 f303 	lsr.w	r3, r2, r3
 8000bcc:	f003 030f 	and.w	r3, r3, #15
 8000bd0:	61bb      	str	r3, [r7, #24]

        if(temp < 10)
 8000bd2:	69bb      	ldr	r3, [r7, #24]
 8000bd4:	2b09      	cmp	r3, #9
 8000bd6:	d80d      	bhi.n	8000bf4 <__cyg_profile_func_enter+0x58>
            s[13-i] = temp + 0x30;
 8000bd8:	69fb      	ldr	r3, [r7, #28]
 8000bda:	f1c3 030d 	rsb	r3, r3, #13
 8000bde:	69ba      	ldr	r2, [r7, #24]
 8000be0:	b2d2      	uxtb	r2, r2
 8000be2:	f102 0230 	add.w	r2, r2, #48	; 0x30
 8000be6:	b2d2      	uxtb	r2, r2
 8000be8:	f107 0120 	add.w	r1, r7, #32
 8000bec:	18cb      	adds	r3, r1, r3
 8000bee:	f803 2c18 	strb.w	r2, [r3, #-24]
 8000bf2:	e00c      	b.n	8000c0e <__cyg_profile_func_enter+0x72>
        else
            s[13-i] = temp + 0x37;
 8000bf4:	69fb      	ldr	r3, [r7, #28]
 8000bf6:	f1c3 030d 	rsb	r3, r3, #13
 8000bfa:	69ba      	ldr	r2, [r7, #24]
 8000bfc:	b2d2      	uxtb	r2, r2
 8000bfe:	f102 0237 	add.w	r2, r2, #55	; 0x37
 8000c02:	b2d2      	uxtb	r2, r2
 8000c04:	f107 0120 	add.w	r1, r7, #32
 8000c08:	18cb      	adds	r3, r1, r3
 8000c0a:	f803 2c18 	strb.w	r2, [r3, #-24]

    char s[16] = "\r\nE:0x00000000\n\r";

    uint32_t temp, i;

    for(i = 0; i < 8; i++)
 8000c0e:	69fb      	ldr	r3, [r7, #28]
 8000c10:	f103 0301 	add.w	r3, r3, #1
 8000c14:	61fb      	str	r3, [r7, #28]
 8000c16:	69fb      	ldr	r3, [r7, #28]
 8000c18:	2b07      	cmp	r3, #7
 8000c1a:	d9d1      	bls.n	8000bc0 <__cyg_profile_func_enter+0x24>
        else
            s[13-i] = temp + 0x37;

    }

    for(i = 0; i < 16; i++)
 8000c1c:	f04f 0300 	mov.w	r3, #0
 8000c20:	61fb      	str	r3, [r7, #28]
 8000c22:	e01b      	b.n	8000c5c <__cyg_profile_func_enter+0xc0>
    {
		USART_SendData(USART2, s[i]);
 8000c24:	f107 0208 	add.w	r2, r7, #8
 8000c28:	69fb      	ldr	r3, [r7, #28]
 8000c2a:	18d3      	adds	r3, r2, r3
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 8000c32:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000c36:	4619      	mov	r1, r3
 8000c38:	f000 fdf6 	bl	8001828 <USART_SendData>
		while(USART_GetFlagStatus(USART2, USART_FLAG_TC) == RESET);
 8000c3c:	bf00      	nop
 8000c3e:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 8000c42:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000c46:	f04f 0140 	mov.w	r1, #64	; 0x40
 8000c4a:	f000 fedf 	bl	8001a0c <USART_GetFlagStatus>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d0f4      	beq.n	8000c3e <__cyg_profile_func_enter+0xa2>
        else
            s[13-i] = temp + 0x37;

    }

    for(i = 0; i < 16; i++)
 8000c54:	69fb      	ldr	r3, [r7, #28]
 8000c56:	f103 0301 	add.w	r3, r3, #1
 8000c5a:	61fb      	str	r3, [r7, #28]
 8000c5c:	69fb      	ldr	r3, [r7, #28]
 8000c5e:	2b0f      	cmp	r3, #15
 8000c60:	d9e0      	bls.n	8000c24 <__cyg_profile_func_enter+0x88>
    {
		USART_SendData(USART2, s[i]);
		while(USART_GetFlagStatus(USART2, USART_FLAG_TC) == RESET);
    }

}
 8000c62:	f107 0724 	add.w	r7, r7, #36	; 0x24
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd90      	pop	{r4, r7, pc}
 8000c6a:	bf00      	nop

08000c6c <__cyg_profile_func_exit>:
void __attribute__((__no_instrument_function__))
     __cyg_profile_func_exit(void *this_func, void *call_site)
{
 8000c6c:	b590      	push	{r4, r7, lr}
 8000c6e:	b089      	sub	sp, #36	; 0x24
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
 8000c74:	6039      	str	r1, [r7, #0]
    char s[16] ="\r\nX:0x00000000\n\r";
 8000c76:	f642 7360 	movw	r3, #12128	; 0x2f60
 8000c7a:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000c7e:	f107 0408 	add.w	r4, r7, #8
 8000c82:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c84:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


    uint32_t temp, i;

    for(i = 0; i < 8; i++)
 8000c88:	f04f 0300 	mov.w	r3, #0
 8000c8c:	61fb      	str	r3, [r7, #28]
 8000c8e:	e02a      	b.n	8000ce6 <__cyg_profile_func_exit+0x7a>
    {
        temp = (((uint32_t)this_func >> i*4) & 0xf);
 8000c90:	687a      	ldr	r2, [r7, #4]
 8000c92:	69fb      	ldr	r3, [r7, #28]
 8000c94:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000c98:	fa22 f303 	lsr.w	r3, r2, r3
 8000c9c:	f003 030f 	and.w	r3, r3, #15
 8000ca0:	61bb      	str	r3, [r7, #24]

        if(temp < 10)
 8000ca2:	69bb      	ldr	r3, [r7, #24]
 8000ca4:	2b09      	cmp	r3, #9
 8000ca6:	d80d      	bhi.n	8000cc4 <__cyg_profile_func_exit+0x58>
            s[13-i] = temp + 0x30;
 8000ca8:	69fb      	ldr	r3, [r7, #28]
 8000caa:	f1c3 030d 	rsb	r3, r3, #13
 8000cae:	69ba      	ldr	r2, [r7, #24]
 8000cb0:	b2d2      	uxtb	r2, r2
 8000cb2:	f102 0230 	add.w	r2, r2, #48	; 0x30
 8000cb6:	b2d2      	uxtb	r2, r2
 8000cb8:	f107 0120 	add.w	r1, r7, #32
 8000cbc:	18cb      	adds	r3, r1, r3
 8000cbe:	f803 2c18 	strb.w	r2, [r3, #-24]
 8000cc2:	e00c      	b.n	8000cde <__cyg_profile_func_exit+0x72>
        else
            s[13-i] = temp + 0x37;
 8000cc4:	69fb      	ldr	r3, [r7, #28]
 8000cc6:	f1c3 030d 	rsb	r3, r3, #13
 8000cca:	69ba      	ldr	r2, [r7, #24]
 8000ccc:	b2d2      	uxtb	r2, r2
 8000cce:	f102 0237 	add.w	r2, r2, #55	; 0x37
 8000cd2:	b2d2      	uxtb	r2, r2
 8000cd4:	f107 0120 	add.w	r1, r7, #32
 8000cd8:	18cb      	adds	r3, r1, r3
 8000cda:	f803 2c18 	strb.w	r2, [r3, #-24]
    char s[16] ="\r\nX:0x00000000\n\r";


    uint32_t temp, i;

    for(i = 0; i < 8; i++)
 8000cde:	69fb      	ldr	r3, [r7, #28]
 8000ce0:	f103 0301 	add.w	r3, r3, #1
 8000ce4:	61fb      	str	r3, [r7, #28]
 8000ce6:	69fb      	ldr	r3, [r7, #28]
 8000ce8:	2b07      	cmp	r3, #7
 8000cea:	d9d1      	bls.n	8000c90 <__cyg_profile_func_exit+0x24>
        else
            s[13-i] = temp + 0x37;

    }

    for(i = 0; i < 16; i++)
 8000cec:	f04f 0300 	mov.w	r3, #0
 8000cf0:	61fb      	str	r3, [r7, #28]
 8000cf2:	e01b      	b.n	8000d2c <__cyg_profile_func_exit+0xc0>
    {
		USART_SendData(USART2, s[i]);
 8000cf4:	f107 0208 	add.w	r2, r7, #8
 8000cf8:	69fb      	ldr	r3, [r7, #28]
 8000cfa:	18d3      	adds	r3, r2, r3
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 8000d02:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000d06:	4619      	mov	r1, r3
 8000d08:	f000 fd8e 	bl	8001828 <USART_SendData>
		while(USART_GetFlagStatus(USART2, USART_FLAG_TC) == RESET);
 8000d0c:	bf00      	nop
 8000d0e:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 8000d12:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000d16:	f04f 0140 	mov.w	r1, #64	; 0x40
 8000d1a:	f000 fe77 	bl	8001a0c <USART_GetFlagStatus>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d0f4      	beq.n	8000d0e <__cyg_profile_func_exit+0xa2>
        else
            s[13-i] = temp + 0x37;

    }

    for(i = 0; i < 16; i++)
 8000d24:	69fb      	ldr	r3, [r7, #28]
 8000d26:	f103 0301 	add.w	r3, r3, #1
 8000d2a:	61fb      	str	r3, [r7, #28]
 8000d2c:	69fb      	ldr	r3, [r7, #28]
 8000d2e:	2b0f      	cmp	r3, #15
 8000d30:	d9e0      	bls.n	8000cf4 <__cyg_profile_func_exit+0x88>
    {
		USART_SendData(USART2, s[i]);
		while(USART_GetFlagStatus(USART2, USART_FLAG_TC) == RESET);
    }
}
 8000d32:	f107 0724 	add.w	r7, r7, #36	; 0x24
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd90      	pop	{r4, r7, pc}
 8000d3a:	bf00      	nop

08000d3c <_sbrk>:
#undef errno
extern int errno;
extern int  _end;

caddr_t _sbrk ( int incr )
{
 8000d3c:	b5b0      	push	{r4, r5, r7, lr}
 8000d3e:	b084      	sub	sp, #16
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4674      	mov	r4, lr
 8000d44:	6078      	str	r0, [r7, #4]
 8000d46:	4623      	mov	r3, r4
 8000d48:	f640 503d 	movw	r0, #3389	; 0xd3d
 8000d4c:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000d50:	4619      	mov	r1, r3
 8000d52:	f7ff ff23 	bl	8000b9c <__cyg_profile_func_enter>
  static unsigned char *heap = NULL;
  unsigned char *prev_heap;

  if (heap == NULL) {
 8000d56:	f240 1320 	movw	r3, #288	; 0x120
 8000d5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d108      	bne.n	8000d76 <_sbrk+0x3a>
    heap = (unsigned char *)&_end;
 8000d64:	f240 1320 	movw	r3, #288	; 0x120
 8000d68:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000d6c:	f240 2220 	movw	r2, #544	; 0x220
 8000d70:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000d74:	601a      	str	r2, [r3, #0]
  }
  prev_heap = heap;
 8000d76:	f240 1320 	movw	r3, #288	; 0x120
 8000d7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	60fb      	str	r3, [r7, #12]

  heap += incr;
 8000d82:	f240 1320 	movw	r3, #288	; 0x120
 8000d86:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000d8a:	681a      	ldr	r2, [r3, #0]
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	18d2      	adds	r2, r2, r3
 8000d90:	f240 1320 	movw	r3, #288	; 0x120
 8000d94:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000d98:	601a      	str	r2, [r3, #0]

  return (caddr_t) prev_heap;
 8000d9a:	68fd      	ldr	r5, [r7, #12]
 8000d9c:	4623      	mov	r3, r4
 8000d9e:	f640 503d 	movw	r0, #3389	; 0xd3d
 8000da2:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000da6:	4619      	mov	r1, r3
 8000da8:	f7ff ff60 	bl	8000c6c <__cyg_profile_func_exit>
 8000dac:	462b      	mov	r3, r5
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	f107 0710 	add.w	r7, r7, #16
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bdb0      	pop	{r4, r5, r7, pc}

08000db8 <link>:

int link(char *old, char *new) {
 8000db8:	b5b0      	push	{r4, r5, r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	4674      	mov	r4, lr
 8000dc0:	6078      	str	r0, [r7, #4]
 8000dc2:	6039      	str	r1, [r7, #0]
 8000dc4:	4623      	mov	r3, r4
 8000dc6:	f640 50b9 	movw	r0, #3513	; 0xdb9
 8000dca:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000dce:	4619      	mov	r1, r3
 8000dd0:	f7ff fee4 	bl	8000b9c <__cyg_profile_func_enter>
return -1;
 8000dd4:	f04f 35ff 	mov.w	r5, #4294967295
 8000dd8:	4623      	mov	r3, r4
 8000dda:	f640 50b9 	movw	r0, #3513	; 0xdb9
 8000dde:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000de2:	4619      	mov	r1, r3
 8000de4:	f7ff ff42 	bl	8000c6c <__cyg_profile_func_exit>
 8000de8:	462b      	mov	r3, r5
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	f107 0708 	add.w	r7, r7, #8
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bdb0      	pop	{r4, r5, r7, pc}

08000df4 <_close>:

int _close(int file)
{
 8000df4:	b5b0      	push	{r4, r5, r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	4674      	mov	r4, lr
 8000dfc:	6078      	str	r0, [r7, #4]
 8000dfe:	4623      	mov	r3, r4
 8000e00:	f640 50f5 	movw	r0, #3573	; 0xdf5
 8000e04:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000e08:	4619      	mov	r1, r3
 8000e0a:	f7ff fec7 	bl	8000b9c <__cyg_profile_func_enter>
  return -1;
 8000e0e:	f04f 35ff 	mov.w	r5, #4294967295
 8000e12:	4623      	mov	r3, r4
 8000e14:	f640 50f5 	movw	r0, #3573	; 0xdf5
 8000e18:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	f7ff ff25 	bl	8000c6c <__cyg_profile_func_exit>
 8000e22:	462b      	mov	r3, r5
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	f107 0708 	add.w	r7, r7, #8
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bdb0      	pop	{r4, r5, r7, pc}
 8000e2e:	bf00      	nop

08000e30 <_fstat>:

int _fstat(int file, struct stat *st)
{
 8000e30:	b5b0      	push	{r4, r5, r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	4674      	mov	r4, lr
 8000e38:	6078      	str	r0, [r7, #4]
 8000e3a:	6039      	str	r1, [r7, #0]
 8000e3c:	4623      	mov	r3, r4
 8000e3e:	f640 6031 	movw	r0, #3633	; 0xe31
 8000e42:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000e46:	4619      	mov	r1, r3
 8000e48:	f7ff fea8 	bl	8000b9c <__cyg_profile_func_enter>
  st->st_mode = S_IFCHR;
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e52:	605a      	str	r2, [r3, #4]
  return 0;
 8000e54:	f04f 0500 	mov.w	r5, #0
 8000e58:	4623      	mov	r3, r4
 8000e5a:	f640 6031 	movw	r0, #3633	; 0xe31
 8000e5e:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000e62:	4619      	mov	r1, r3
 8000e64:	f7ff ff02 	bl	8000c6c <__cyg_profile_func_exit>
 8000e68:	462b      	mov	r3, r5
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f107 0708 	add.w	r7, r7, #8
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bdb0      	pop	{r4, r5, r7, pc}

08000e74 <_isatty>:

int _isatty(int file)
{
 8000e74:	b5b0      	push	{r4, r5, r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	4674      	mov	r4, lr
 8000e7c:	6078      	str	r0, [r7, #4]
 8000e7e:	4623      	mov	r3, r4
 8000e80:	f640 6075 	movw	r0, #3701	; 0xe75
 8000e84:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000e88:	4619      	mov	r1, r3
 8000e8a:	f7ff fe87 	bl	8000b9c <__cyg_profile_func_enter>
  return 1;
 8000e8e:	f04f 0501 	mov.w	r5, #1
 8000e92:	4623      	mov	r3, r4
 8000e94:	f640 6075 	movw	r0, #3701	; 0xe75
 8000e98:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	f7ff fee5 	bl	8000c6c <__cyg_profile_func_exit>
 8000ea2:	462b      	mov	r3, r5
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f107 0708 	add.w	r7, r7, #8
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bdb0      	pop	{r4, r5, r7, pc}
 8000eae:	bf00      	nop

08000eb0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000eb0:	b5b0      	push	{r4, r5, r7, lr}
 8000eb2:	b084      	sub	sp, #16
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4674      	mov	r4, lr
 8000eb8:	60f8      	str	r0, [r7, #12]
 8000eba:	60b9      	str	r1, [r7, #8]
 8000ebc:	607a      	str	r2, [r7, #4]
 8000ebe:	4623      	mov	r3, r4
 8000ec0:	f640 60b1 	movw	r0, #3761	; 0xeb1
 8000ec4:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000ec8:	4619      	mov	r1, r3
 8000eca:	f7ff fe67 	bl	8000b9c <__cyg_profile_func_enter>
  return 0;
 8000ece:	f04f 0500 	mov.w	r5, #0
 8000ed2:	4623      	mov	r3, r4
 8000ed4:	f640 60b1 	movw	r0, #3761	; 0xeb1
 8000ed8:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000edc:	4619      	mov	r1, r3
 8000ede:	f7ff fec5 	bl	8000c6c <__cyg_profile_func_exit>
 8000ee2:	462b      	mov	r3, r5
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f107 0710 	add.w	r7, r7, #16
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bdb0      	pop	{r4, r5, r7, pc}
 8000eee:	bf00      	nop

08000ef0 <_read>:

int _read(int file, char *ptr, int len)
{
 8000ef0:	b5b0      	push	{r4, r5, r7, lr}
 8000ef2:	b084      	sub	sp, #16
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4674      	mov	r4, lr
 8000ef8:	60f8      	str	r0, [r7, #12]
 8000efa:	60b9      	str	r1, [r7, #8]
 8000efc:	607a      	str	r2, [r7, #4]
 8000efe:	4623      	mov	r3, r4
 8000f00:	f640 60f1 	movw	r0, #3825	; 0xef1
 8000f04:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000f08:	4619      	mov	r1, r3
 8000f0a:	f7ff fe47 	bl	8000b9c <__cyg_profile_func_enter>
  return 0;
 8000f0e:	f04f 0500 	mov.w	r5, #0
 8000f12:	4623      	mov	r3, r4
 8000f14:	f640 60f1 	movw	r0, #3825	; 0xef1
 8000f18:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	f7ff fea5 	bl	8000c6c <__cyg_profile_func_exit>
 8000f22:	462b      	mov	r3, r5
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	f107 0710 	add.w	r7, r7, #16
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bdb0      	pop	{r4, r5, r7, pc}
 8000f2e:	bf00      	nop

08000f30 <abort>:

void abort(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	4673      	mov	r3, lr
 8000f36:	f640 7031 	movw	r0, #3889	; 0xf31
 8000f3a:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000f3e:	4619      	mov	r1, r3
 8000f40:	f7ff fe2c 	bl	8000b9c <__cyg_profile_func_enter>
  /* Abort called */
  while(1);
 8000f44:	e7fe      	b.n	8000f44 <abort+0x14>
 8000f46:	bf00      	nop

08000f48 <_write>:
}
          
int _write(int file, char *ptr, int len)
{
 8000f48:	b5b0      	push	{r4, r5, r7, lr}
 8000f4a:	b086      	sub	sp, #24
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4674      	mov	r4, lr
 8000f50:	60f8      	str	r0, [r7, #12]
 8000f52:	60b9      	str	r1, [r7, #8]
 8000f54:	607a      	str	r2, [r7, #4]
 8000f56:	4623      	mov	r3, r4
 8000f58:	f640 7049 	movw	r0, #3913	; 0xf49
 8000f5c:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000f60:	4619      	mov	r1, r3
 8000f62:	f7ff fe1b 	bl	8000b9c <__cyg_profile_func_enter>
	uint16_t todo;    
	for(todo = 0; todo < len; todo++)
 8000f66:	f04f 0300 	mov.w	r3, #0
 8000f6a:	82fb      	strh	r3, [r7, #22]
 8000f6c:	e01c      	b.n	8000fa8 <_write+0x60>
	{
		USART_SendData(USART2, *ptr++);
 8000f6e:	68bb      	ldr	r3, [r7, #8]
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	68ba      	ldr	r2, [r7, #8]
 8000f74:	f102 0201 	add.w	r2, r2, #1
 8000f78:	60ba      	str	r2, [r7, #8]
 8000f7a:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 8000f7e:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000f82:	4619      	mov	r1, r3
 8000f84:	f000 fc50 	bl	8001828 <USART_SendData>
		while(USART_GetFlagStatus(USART2, USART_FLAG_TC) == RESET);
 8000f88:	bf00      	nop
 8000f8a:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 8000f8e:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000f92:	f04f 0140 	mov.w	r1, #64	; 0x40
 8000f96:	f000 fd39 	bl	8001a0c <USART_GetFlagStatus>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d0f4      	beq.n	8000f8a <_write+0x42>
}
          
int _write(int file, char *ptr, int len)
{
	uint16_t todo;    
	for(todo = 0; todo < len; todo++)
 8000fa0:	8afb      	ldrh	r3, [r7, #22]
 8000fa2:	f103 0301 	add.w	r3, r3, #1
 8000fa6:	82fb      	strh	r3, [r7, #22]
 8000fa8:	8afa      	ldrh	r2, [r7, #22]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	429a      	cmp	r2, r3
 8000fae:	dbde      	blt.n	8000f6e <_write+0x26>
	{
		USART_SendData(USART2, *ptr++);
		while(USART_GetFlagStatus(USART2, USART_FLAG_TC) == RESET);
	}

	return len;
 8000fb0:	687d      	ldr	r5, [r7, #4]
 8000fb2:	4623      	mov	r3, r4
 8000fb4:	f640 7049 	movw	r0, #3913	; 0xf49
 8000fb8:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	f7ff fe55 	bl	8000c6c <__cyg_profile_func_exit>
 8000fc2:	462b      	mov	r3, r5
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f107 0718 	add.w	r7, r7, #24
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bdb0      	pop	{r4, r5, r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	0800311c 	.word	0x0800311c
 8000fd4:	20000000 	.word	0x20000000
 8000fd8:	200000a8 	.word	0x200000a8
 8000fdc:	200000ac 	.word	0x200000ac
 8000fe0:	20000220 	.word	0x20000220

08000fe4 <RCC_DeInit>:
 8000fe4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fe8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000fec:	681a      	ldr	r2, [r3, #0]
 8000fee:	f042 0001 	orr.w	r0, r2, #1
 8000ff2:	6018      	str	r0, [r3, #0]
 8000ff4:	6859      	ldr	r1, [r3, #4]
 8000ff6:	f401 027f 	and.w	r2, r1, #16711680	; 0xff0000
 8000ffa:	605a      	str	r2, [r3, #4]
 8000ffc:	6818      	ldr	r0, [r3, #0]
 8000ffe:	f020 7184 	bic.w	r1, r0, #17301504	; 0x1080000
 8001002:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	6818      	ldr	r0, [r3, #0]
 800100a:	f420 2180 	bic.w	r1, r0, #262144	; 0x40000
 800100e:	6019      	str	r1, [r3, #0]
 8001010:	685a      	ldr	r2, [r3, #4]
 8001012:	f422 00fe 	bic.w	r0, r2, #8323072	; 0x7f0000
 8001016:	6058      	str	r0, [r3, #4]
 8001018:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800101a:	f021 020f 	bic.w	r2, r1, #15
 800101e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001020:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001022:	f020 21f0 	bic.w	r1, r0, #4026593280	; 0xf000f000
 8001026:	f021 0273 	bic.w	r2, r1, #115	; 0x73
 800102a:	2000      	movs	r0, #0
 800102c:	631a      	str	r2, [r3, #48]	; 0x30
 800102e:	6098      	str	r0, [r3, #8]
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <RCC_HSEConfig>:
 8001034:	f241 0302 	movw	r3, #4098	; 0x1002
 8001038:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800103c:	2200      	movs	r2, #0
 800103e:	701a      	strb	r2, [r3, #0]
 8001040:	7018      	strb	r0, [r3, #0]
 8001042:	4770      	bx	lr

08001044 <RCC_WaitForHSEStartUp>:
 8001044:	b082      	sub	sp, #8
 8001046:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800104a:	2300      	movs	r3, #0
 800104c:	9301      	str	r3, [sp, #4]
 800104e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001052:	6810      	ldr	r0, [r2, #0]
 8001054:	0383      	lsls	r3, r0, #14
 8001056:	d50c      	bpl.n	8001072 <RCC_WaitForHSEStartUp+0x2e>
 8001058:	9a01      	ldr	r2, [sp, #4]
 800105a:	1c51      	adds	r1, r2, #1
 800105c:	9101      	str	r1, [sp, #4]
 800105e:	9b01      	ldr	r3, [sp, #4]
 8001060:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001064:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001068:	6818      	ldr	r0, [r3, #0]
 800106a:	f3c0 4040 	ubfx	r0, r0, #17, #1
 800106e:	b002      	add	sp, #8
 8001070:	4770      	bx	lr
 8001072:	9901      	ldr	r1, [sp, #4]
 8001074:	1c4b      	adds	r3, r1, #1
 8001076:	9301      	str	r3, [sp, #4]
 8001078:	9801      	ldr	r0, [sp, #4]
 800107a:	f5b0 6fa0 	cmp.w	r0, #1280	; 0x500
 800107e:	d1e8      	bne.n	8001052 <RCC_WaitForHSEStartUp+0xe>
 8001080:	e7ee      	b.n	8001060 <RCC_WaitForHSEStartUp+0x1c>
 8001082:	bf00      	nop

08001084 <RCC_AdjustHSICalibrationValue>:
 8001084:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001088:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	f022 01f8 	bic.w	r1, r2, #248	; 0xf8
 8001092:	ea41 00c0 	orr.w	r0, r1, r0, lsl #3
 8001096:	6018      	str	r0, [r3, #0]
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop

0800109c <RCC_HSICmd>:
 800109c:	2300      	movs	r3, #0
 800109e:	f2c4 2342 	movt	r3, #16962	; 0x4242
 80010a2:	6018      	str	r0, [r3, #0]
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop

080010a8 <RCC_LSEConfig>:
 80010a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010ac:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80010b0:	6a1a      	ldr	r2, [r3, #32]
 80010b2:	f022 0101 	bic.w	r1, r2, #1
 80010b6:	6219      	str	r1, [r3, #32]
 80010b8:	6a1a      	ldr	r2, [r3, #32]
 80010ba:	f022 0104 	bic.w	r1, r2, #4
 80010be:	6219      	str	r1, [r3, #32]
 80010c0:	6a1a      	ldr	r2, [r3, #32]
 80010c2:	4310      	orrs	r0, r2
 80010c4:	6218      	str	r0, [r3, #32]
 80010c6:	4770      	bx	lr

080010c8 <RCC_LSEDriveConfig>:
 80010c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010cc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80010d0:	6a1a      	ldr	r2, [r3, #32]
 80010d2:	f022 0118 	bic.w	r1, r2, #24
 80010d6:	6219      	str	r1, [r3, #32]
 80010d8:	6a1a      	ldr	r2, [r3, #32]
 80010da:	4310      	orrs	r0, r2
 80010dc:	6218      	str	r0, [r3, #32]
 80010de:	4770      	bx	lr

080010e0 <RCC_LSICmd>:
 80010e0:	f44f 6390 	mov.w	r3, #1152	; 0x480
 80010e4:	f2c4 2342 	movt	r3, #16962	; 0x4242
 80010e8:	6018      	str	r0, [r3, #0]
 80010ea:	4770      	bx	lr

080010ec <RCC_PLLConfig>:
 80010ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010f0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80010f4:	685a      	ldr	r2, [r3, #4]
 80010f6:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80010fa:	605a      	str	r2, [r3, #4]
 80010fc:	685a      	ldr	r2, [r3, #4]
 80010fe:	4310      	orrs	r0, r2
 8001100:	4301      	orrs	r1, r0
 8001102:	6059      	str	r1, [r3, #4]
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop

08001108 <RCC_PLLCmd>:
 8001108:	2360      	movs	r3, #96	; 0x60
 800110a:	f2c4 2342 	movt	r3, #16962	; 0x4242
 800110e:	6018      	str	r0, [r3, #0]
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop

08001114 <RCC_PREDIV1Config>:
 8001114:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001118:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800111c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800111e:	f022 010f 	bic.w	r1, r2, #15
 8001122:	4308      	orrs	r0, r1
 8001124:	62d8      	str	r0, [r3, #44]	; 0x2c
 8001126:	4770      	bx	lr

08001128 <RCC_ClockSecuritySystemCmd>:
 8001128:	234c      	movs	r3, #76	; 0x4c
 800112a:	f2c4 2342 	movt	r3, #16962	; 0x4242
 800112e:	6018      	str	r0, [r3, #0]
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop

08001134 <RCC_MCOConfig>:
 8001134:	f241 0307 	movw	r3, #4103	; 0x1007
 8001138:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800113c:	7018      	strb	r0, [r3, #0]
 800113e:	4770      	bx	lr

08001140 <RCC_SYSCLKConfig>:
 8001140:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001144:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001148:	685a      	ldr	r2, [r3, #4]
 800114a:	f022 0103 	bic.w	r1, r2, #3
 800114e:	4308      	orrs	r0, r1
 8001150:	6058      	str	r0, [r3, #4]
 8001152:	4770      	bx	lr

08001154 <RCC_GetSYSCLKSource>:
 8001154:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001158:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800115c:	6858      	ldr	r0, [r3, #4]
 800115e:	f000 000c 	and.w	r0, r0, #12
 8001162:	4770      	bx	lr

08001164 <RCC_HCLKConfig>:
 8001164:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001168:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800116c:	685a      	ldr	r2, [r3, #4]
 800116e:	f022 01f0 	bic.w	r1, r2, #240	; 0xf0
 8001172:	4308      	orrs	r0, r1
 8001174:	6058      	str	r0, [r3, #4]
 8001176:	4770      	bx	lr

08001178 <RCC_PCLK1Config>:
 8001178:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800117c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001180:	685a      	ldr	r2, [r3, #4]
 8001182:	f422 61e0 	bic.w	r1, r2, #1792	; 0x700
 8001186:	4308      	orrs	r0, r1
 8001188:	6058      	str	r0, [r3, #4]
 800118a:	4770      	bx	lr

0800118c <RCC_PCLK2Config>:
 800118c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001190:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001194:	685a      	ldr	r2, [r3, #4]
 8001196:	f422 5160 	bic.w	r1, r2, #14336	; 0x3800
 800119a:	ea41 00c0 	orr.w	r0, r1, r0, lsl #3
 800119e:	6058      	str	r0, [r3, #4]
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop

080011a4 <RCC_ADCCLKConfig>:
 80011a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011a8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80011ac:	685a      	ldr	r2, [r3, #4]
 80011ae:	f422 4140 	bic.w	r1, r2, #49152	; 0xc000
 80011b2:	6059      	str	r1, [r3, #4]
 80011b4:	685a      	ldr	r2, [r3, #4]
 80011b6:	4310      	orrs	r0, r2
 80011b8:	6058      	str	r0, [r3, #4]
 80011ba:	4770      	bx	lr

080011bc <RCC_SDADCCLKConfig>:
 80011bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011c0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80011c4:	685a      	ldr	r2, [r3, #4]
 80011c6:	f022 4178 	bic.w	r1, r2, #4160749568	; 0xf8000000
 80011ca:	6059      	str	r1, [r3, #4]
 80011cc:	685a      	ldr	r2, [r3, #4]
 80011ce:	4310      	orrs	r0, r2
 80011d0:	6058      	str	r0, [r3, #4]
 80011d2:	4770      	bx	lr

080011d4 <RCC_CECCLKConfig>:
 80011d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011d8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80011dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011de:	f022 0140 	bic.w	r1, r2, #64	; 0x40
 80011e2:	6319      	str	r1, [r3, #48]	; 0x30
 80011e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011e6:	4310      	orrs	r0, r2
 80011e8:	6318      	str	r0, [r3, #48]	; 0x30
 80011ea:	4770      	bx	lr

080011ec <RCC_I2CCLKConfig>:
 80011ec:	0f03      	lsrs	r3, r0, #28
 80011ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011f2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80011f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011fc:	f2c4 0102 	movt	r1, #16386	; 0x4002
 8001200:	bf0c      	ite	eq
 8001202:	f022 0210 	biceq.w	r2, r2, #16
 8001206:	f022 0220 	bicne.w	r2, r2, #32
 800120a:	631a      	str	r2, [r3, #48]	; 0x30
 800120c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 800120e:	4318      	orrs	r0, r3
 8001210:	6308      	str	r0, [r1, #48]	; 0x30
 8001212:	4770      	bx	lr

08001214 <RCC_USARTCLKConfig>:
 8001214:	0f03      	lsrs	r3, r0, #28
 8001216:	2b02      	cmp	r3, #2
 8001218:	d01d      	beq.n	8001256 <RCC_USARTCLKConfig+0x42>
 800121a:	2b03      	cmp	r3, #3
 800121c:	d012      	beq.n	8001244 <RCC_USARTCLKConfig+0x30>
 800121e:	2b01      	cmp	r3, #1
 8001220:	d007      	beq.n	8001232 <RCC_USARTCLKConfig+0x1e>
 8001222:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001226:	f2c4 0102 	movt	r1, #16386	; 0x4002
 800122a:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800122c:	4310      	orrs	r0, r2
 800122e:	6308      	str	r0, [r1, #48]	; 0x30
 8001230:	4770      	bx	lr
 8001232:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001236:	f2c4 0102 	movt	r1, #16386	; 0x4002
 800123a:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800123c:	f022 0303 	bic.w	r3, r2, #3
 8001240:	630b      	str	r3, [r1, #48]	; 0x30
 8001242:	e7ee      	b.n	8001222 <RCC_USARTCLKConfig+0xe>
 8001244:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001248:	f2c4 0102 	movt	r1, #16386	; 0x4002
 800124c:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800124e:	f422 2340 	bic.w	r3, r2, #786432	; 0xc0000
 8001252:	630b      	str	r3, [r1, #48]	; 0x30
 8001254:	e7e5      	b.n	8001222 <RCC_USARTCLKConfig+0xe>
 8001256:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800125a:	f2c4 0102 	movt	r1, #16386	; 0x4002
 800125e:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8001260:	f422 3340 	bic.w	r3, r2, #196608	; 0x30000
 8001264:	630b      	str	r3, [r1, #48]	; 0x30
 8001266:	e7dc      	b.n	8001222 <RCC_USARTCLKConfig+0xe>

08001268 <RCC_USBCLKConfig>:
 8001268:	23d8      	movs	r3, #216	; 0xd8
 800126a:	f2c4 2342 	movt	r3, #16962	; 0x4242
 800126e:	6018      	str	r0, [r3, #0]
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop

08001274 <RCC_GetClocksFreq>:
 8001274:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001278:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800127c:	b470      	push	{r4, r5, r6}
 800127e:	685a      	ldr	r2, [r3, #4]
 8001280:	f002 010c 	and.w	r1, r2, #12
 8001284:	2904      	cmp	r1, #4
 8001286:	d002      	beq.n	800128e <RCC_GetClocksFreq+0x1a>
 8001288:	2908      	cmp	r1, #8
 800128a:	f000 80b5 	beq.w	80013f8 <RCC_GetClocksFreq+0x184>
 800128e:	f44f 5190 	mov.w	r1, #4608	; 0x1200
 8001292:	f2c0 017a 	movt	r1, #122	; 0x7a
 8001296:	6001      	str	r1, [r0, #0]
 8001298:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800129c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80012a0:	4a6d      	ldr	r2, [pc, #436]	; (8001458 <RCC_GetClocksFreq+0x1e4>)
 80012a2:	685d      	ldr	r5, [r3, #4]
 80012a4:	f3c5 1403 	ubfx	r4, r5, #4, #4
 80012a8:	5d16      	ldrb	r6, [r2, r4]
 80012aa:	fa21 f406 	lsr.w	r4, r1, r6
 80012ae:	6044      	str	r4, [r0, #4]
 80012b0:	685d      	ldr	r5, [r3, #4]
 80012b2:	f3c5 2602 	ubfx	r6, r5, #8, #3
 80012b6:	5d95      	ldrb	r5, [r2, r6]
 80012b8:	fa24 f505 	lsr.w	r5, r4, r5
 80012bc:	6085      	str	r5, [r0, #8]
 80012be:	685e      	ldr	r6, [r3, #4]
 80012c0:	f3c6 26c2 	ubfx	r6, r6, #11, #3
 80012c4:	5d96      	ldrb	r6, [r2, r6]
 80012c6:	fa24 f406 	lsr.w	r4, r4, r6
 80012ca:	60c4      	str	r4, [r0, #12]
 80012cc:	685e      	ldr	r6, [r3, #4]
 80012ce:	f3c6 3681 	ubfx	r6, r6, #14, #2
 80012d2:	1996      	adds	r6, r2, r6
 80012d4:	7c36      	ldrb	r6, [r6, #16]
 80012d6:	fbb4 f6f6 	udiv	r6, r4, r6
 80012da:	6106      	str	r6, [r0, #16]
 80012dc:	685e      	ldr	r6, [r3, #4]
 80012de:	f3c6 66c3 	ubfx	r6, r6, #27, #4
 80012e2:	1992      	adds	r2, r2, r6
 80012e4:	7d12      	ldrb	r2, [r2, #20]
 80012e6:	fbb1 f2f2 	udiv	r2, r1, r2
 80012ea:	6142      	str	r2, [r0, #20]
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	065a      	lsls	r2, r3, #25
 80012f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012f4:	bf54      	ite	pl
 80012f6:	f248 0212 	movwpl	r2, #32786	; 0x8012
 80012fa:	f44f 4200 	movmi.w	r2, #32768	; 0x8000
 80012fe:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001302:	6182      	str	r2, [r0, #24]
 8001304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001306:	06da      	lsls	r2, r3, #27
 8001308:	bf58      	it	pl
 800130a:	f44f 5390 	movpl.w	r3, #4608	; 0x1200
 800130e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001312:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001316:	bf5a      	itte	pl
 8001318:	f2c0 037a 	movtpl	r3, #122	; 0x7a
 800131c:	61c3      	strpl	r3, [r0, #28]
 800131e:	61c1      	strmi	r1, [r0, #28]
 8001320:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001322:	069a      	lsls	r2, r3, #26
 8001324:	bf58      	it	pl
 8001326:	f44f 5290 	movpl.w	r2, #4608	; 0x1200
 800132a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800132e:	bf58      	it	pl
 8001330:	f2c0 027a 	movtpl	r2, #122	; 0x7a
 8001334:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001338:	bf54      	ite	pl
 800133a:	6202      	strpl	r2, [r0, #32]
 800133c:	6201      	strmi	r1, [r0, #32]
 800133e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001340:	0792      	lsls	r2, r2, #30
 8001342:	d12a      	bne.n	800139a <RCC_GetClocksFreq+0x126>
 8001344:	6244      	str	r4, [r0, #36]	; 0x24
 8001346:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800134a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800134e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001350:	f412 3f40 	tst.w	r2, #196608	; 0x30000
 8001354:	d136      	bne.n	80013c4 <RCC_GetClocksFreq+0x150>
 8001356:	6285      	str	r5, [r0, #40]	; 0x28
 8001358:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800135c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001360:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001362:	f412 2f40 	tst.w	r2, #786432	; 0xc0000
 8001366:	d045      	beq.n	80013f4 <RCC_GetClocksFreq+0x180>
 8001368:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800136a:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 800136e:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 8001372:	d062      	beq.n	800143a <RCC_GetClocksFreq+0x1c6>
 8001374:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001376:	f401 2240 	and.w	r2, r1, #786432	; 0xc0000
 800137a:	f5b2 2f00 	cmp.w	r2, #524288	; 0x80000
 800137e:	d066      	beq.n	800144e <RCC_GetClocksFreq+0x1da>
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	f403 2140 	and.w	r1, r3, #786432	; 0xc0000
 8001386:	f5b1 2f40 	cmp.w	r1, #786432	; 0xc0000
 800138a:	d104      	bne.n	8001396 <RCC_GetClocksFreq+0x122>
 800138c:	f44f 5290 	mov.w	r2, #4608	; 0x1200
 8001390:	f2c0 027a 	movt	r2, #122	; 0x7a
 8001394:	62c2      	str	r2, [r0, #44]	; 0x2c
 8001396:	bc70      	pop	{r4, r5, r6}
 8001398:	4770      	bx	lr
 800139a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800139c:	f002 0203 	and.w	r2, r2, #3
 80013a0:	2a01      	cmp	r2, #1
 80013a2:	d03a      	beq.n	800141a <RCC_GetClocksFreq+0x1a6>
 80013a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013a6:	f002 0203 	and.w	r2, r2, #3
 80013aa:	2a02      	cmp	r2, #2
 80013ac:	d047      	beq.n	800143e <RCC_GetClocksFreq+0x1ca>
 80013ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b0:	f003 0203 	and.w	r2, r3, #3
 80013b4:	2a03      	cmp	r2, #3
 80013b6:	d1c6      	bne.n	8001346 <RCC_GetClocksFreq+0xd2>
 80013b8:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 80013bc:	f2c0 037a 	movt	r3, #122	; 0x7a
 80013c0:	6243      	str	r3, [r0, #36]	; 0x24
 80013c2:	e7c0      	b.n	8001346 <RCC_GetClocksFreq+0xd2>
 80013c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013c6:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 80013ca:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80013ce:	d022      	beq.n	8001416 <RCC_GetClocksFreq+0x1a2>
 80013d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013d2:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 80013d6:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 80013da:	d034      	beq.n	8001446 <RCC_GetClocksFreq+0x1d2>
 80013dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80013e2:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
 80013e6:	d1b7      	bne.n	8001358 <RCC_GetClocksFreq+0xe4>
 80013e8:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 80013ec:	f2c0 037a 	movt	r3, #122	; 0x7a
 80013f0:	6283      	str	r3, [r0, #40]	; 0x28
 80013f2:	e7b1      	b.n	8001358 <RCC_GetClocksFreq+0xe4>
 80013f4:	62c5      	str	r5, [r0, #44]	; 0x2c
 80013f6:	e7ce      	b.n	8001396 <RCC_GetClocksFreq+0x122>
 80013f8:	685d      	ldr	r5, [r3, #4]
 80013fa:	685c      	ldr	r4, [r3, #4]
 80013fc:	f3c5 4683 	ubfx	r6, r5, #18, #4
 8001400:	1cb2      	adds	r2, r6, #2
 8001402:	03e1      	lsls	r1, r4, #15
 8001404:	d40b      	bmi.n	800141e <RCC_GetClocksFreq+0x1aa>
 8001406:	f44f 6610 	mov.w	r6, #2304	; 0x900
 800140a:	f2c0 063d 	movt	r6, #61	; 0x3d
 800140e:	fb06 f102 	mul.w	r1, r6, r2
 8001412:	6001      	str	r1, [r0, #0]
 8001414:	e740      	b.n	8001298 <RCC_GetClocksFreq+0x24>
 8001416:	6281      	str	r1, [r0, #40]	; 0x28
 8001418:	e79e      	b.n	8001358 <RCC_GetClocksFreq+0xe4>
 800141a:	6241      	str	r1, [r0, #36]	; 0x24
 800141c:	e793      	b.n	8001346 <RCC_GetClocksFreq+0xd2>
 800141e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001420:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8001424:	f001 050f 	and.w	r5, r1, #15
 8001428:	1c6c      	adds	r4, r5, #1
 800142a:	f2c0 037a 	movt	r3, #122	; 0x7a
 800142e:	fbb3 f1f4 	udiv	r1, r3, r4
 8001432:	fb02 f101 	mul.w	r1, r2, r1
 8001436:	6001      	str	r1, [r0, #0]
 8001438:	e72e      	b.n	8001298 <RCC_GetClocksFreq+0x24>
 800143a:	62c1      	str	r1, [r0, #44]	; 0x2c
 800143c:	e7ab      	b.n	8001396 <RCC_GetClocksFreq+0x122>
 800143e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001442:	6242      	str	r2, [r0, #36]	; 0x24
 8001444:	e77f      	b.n	8001346 <RCC_GetClocksFreq+0xd2>
 8001446:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800144a:	6282      	str	r2, [r0, #40]	; 0x28
 800144c:	e784      	b.n	8001358 <RCC_GetClocksFreq+0xe4>
 800144e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001452:	62c3      	str	r3, [r0, #44]	; 0x2c
 8001454:	e79f      	b.n	8001396 <RCC_GetClocksFreq+0x122>
 8001456:	bf00      	nop
 8001458:	2000001c 	.word	0x2000001c

0800145c <RCC_RTCCLKConfig>:
 800145c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001460:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001464:	6a1a      	ldr	r2, [r3, #32]
 8001466:	4310      	orrs	r0, r2
 8001468:	6218      	str	r0, [r3, #32]
 800146a:	4770      	bx	lr

0800146c <RCC_RTCCLKCmd>:
 800146c:	f240 433c 	movw	r3, #1084	; 0x43c
 8001470:	f2c4 2342 	movt	r3, #16962	; 0x4242
 8001474:	6018      	str	r0, [r3, #0]
 8001476:	4770      	bx	lr

08001478 <RCC_BackupResetCmd>:
 8001478:	f44f 6388 	mov.w	r3, #1088	; 0x440
 800147c:	f2c4 2342 	movt	r3, #16962	; 0x4242
 8001480:	6018      	str	r0, [r3, #0]
 8001482:	4770      	bx	lr

08001484 <RCC_AHBPeriphClockCmd>:
 8001484:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001488:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800148c:	695a      	ldr	r2, [r3, #20]
 800148e:	b919      	cbnz	r1, 8001498 <RCC_AHBPeriphClockCmd+0x14>
 8001490:	ea22 0000 	bic.w	r0, r2, r0
 8001494:	6158      	str	r0, [r3, #20]
 8001496:	4770      	bx	lr
 8001498:	4310      	orrs	r0, r2
 800149a:	6158      	str	r0, [r3, #20]
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop

080014a0 <RCC_APB2PeriphClockCmd>:
 80014a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014a4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80014a8:	699a      	ldr	r2, [r3, #24]
 80014aa:	b919      	cbnz	r1, 80014b4 <RCC_APB2PeriphClockCmd+0x14>
 80014ac:	ea22 0000 	bic.w	r0, r2, r0
 80014b0:	6198      	str	r0, [r3, #24]
 80014b2:	4770      	bx	lr
 80014b4:	4310      	orrs	r0, r2
 80014b6:	6198      	str	r0, [r3, #24]
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop

080014bc <RCC_APB1PeriphClockCmd>:
 80014bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014c0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80014c4:	69da      	ldr	r2, [r3, #28]
 80014c6:	b919      	cbnz	r1, 80014d0 <RCC_APB1PeriphClockCmd+0x14>
 80014c8:	ea22 0000 	bic.w	r0, r2, r0
 80014cc:	61d8      	str	r0, [r3, #28]
 80014ce:	4770      	bx	lr
 80014d0:	4310      	orrs	r0, r2
 80014d2:	61d8      	str	r0, [r3, #28]
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop

080014d8 <RCC_AHBPeriphResetCmd>:
 80014d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014dc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80014e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80014e2:	b919      	cbnz	r1, 80014ec <RCC_AHBPeriphResetCmd+0x14>
 80014e4:	ea22 0000 	bic.w	r0, r2, r0
 80014e8:	6298      	str	r0, [r3, #40]	; 0x28
 80014ea:	4770      	bx	lr
 80014ec:	4310      	orrs	r0, r2
 80014ee:	6298      	str	r0, [r3, #40]	; 0x28
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop

080014f4 <RCC_APB2PeriphResetCmd>:
 80014f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014f8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80014fc:	68da      	ldr	r2, [r3, #12]
 80014fe:	b919      	cbnz	r1, 8001508 <RCC_APB2PeriphResetCmd+0x14>
 8001500:	ea22 0000 	bic.w	r0, r2, r0
 8001504:	60d8      	str	r0, [r3, #12]
 8001506:	4770      	bx	lr
 8001508:	4310      	orrs	r0, r2
 800150a:	60d8      	str	r0, [r3, #12]
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop

08001510 <RCC_APB1PeriphResetCmd>:
 8001510:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001514:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001518:	691a      	ldr	r2, [r3, #16]
 800151a:	b919      	cbnz	r1, 8001524 <RCC_APB1PeriphResetCmd+0x14>
 800151c:	ea22 0000 	bic.w	r0, r2, r0
 8001520:	6118      	str	r0, [r3, #16]
 8001522:	4770      	bx	lr
 8001524:	4310      	orrs	r0, r2
 8001526:	6118      	str	r0, [r3, #16]
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop

0800152c <RCC_ITConfig>:
 800152c:	f241 0309 	movw	r3, #4105	; 0x1009
 8001530:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001534:	781a      	ldrb	r2, [r3, #0]
 8001536:	b919      	cbnz	r1, 8001540 <RCC_ITConfig+0x14>
 8001538:	ea22 0000 	bic.w	r0, r2, r0
 800153c:	7018      	strb	r0, [r3, #0]
 800153e:	4770      	bx	lr
 8001540:	4310      	orrs	r0, r2
 8001542:	7018      	strb	r0, [r3, #0]
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop

08001548 <RCC_GetFlagStatus>:
 8001548:	0943      	lsrs	r3, r0, #5
 800154a:	d10b      	bne.n	8001564 <RCC_GetFlagStatus+0x1c>
 800154c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001550:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001554:	6811      	ldr	r1, [r2, #0]
 8001556:	f000 001f 	and.w	r0, r0, #31
 800155a:	fa21 f300 	lsr.w	r3, r1, r0
 800155e:	f003 0001 	and.w	r0, r3, #1
 8001562:	4770      	bx	lr
 8001564:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001568:	f2c4 0102 	movt	r1, #16386	; 0x4002
 800156c:	2b01      	cmp	r3, #1
 800156e:	bf0c      	ite	eq
 8001570:	6a09      	ldreq	r1, [r1, #32]
 8001572:	6a49      	ldrne	r1, [r1, #36]	; 0x24
 8001574:	e7ef      	b.n	8001556 <RCC_GetFlagStatus+0xe>
 8001576:	bf00      	nop

08001578 <RCC_ClearFlag>:
 8001578:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800157c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001580:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001582:	f042 7080 	orr.w	r0, r2, #16777216	; 0x1000000
 8001586:	6258      	str	r0, [r3, #36]	; 0x24
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop

0800158c <RCC_GetITStatus>:
 800158c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001590:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001594:	6899      	ldr	r1, [r3, #8]
 8001596:	4208      	tst	r0, r1
 8001598:	bf0c      	ite	eq
 800159a:	2000      	moveq	r0, #0
 800159c:	2001      	movne	r0, #1
 800159e:	4770      	bx	lr

080015a0 <RCC_ClearITPendingBit>:
 80015a0:	f241 030a 	movw	r3, #4106	; 0x100a
 80015a4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80015a8:	7018      	strb	r0, [r3, #0]
 80015aa:	4770      	bx	lr

080015ac <USART_DeInit>:
 80015ac:	b508      	push	{r3, lr}
 80015ae:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80015b2:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80015b6:	4298      	cmp	r0, r3
 80015b8:	d018      	beq.n	80015ec <USART_DeInit+0x40>
 80015ba:	f44f 4188 	mov.w	r1, #17408	; 0x4400
 80015be:	f2c4 0100 	movt	r1, #16384	; 0x4000
 80015c2:	4288      	cmp	r0, r1
 80015c4:	d01e      	beq.n	8001604 <USART_DeInit+0x58>
 80015c6:	f44f 4290 	mov.w	r2, #18432	; 0x4800
 80015ca:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80015ce:	4290      	cmp	r0, r2
 80015d0:	d000      	beq.n	80015d4 <USART_DeInit+0x28>
 80015d2:	bd08      	pop	{r3, pc}
 80015d4:	2101      	movs	r1, #1
 80015d6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80015da:	f7ff ff99 	bl	8001510 <RCC_APB1PeriphResetCmd>
 80015de:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80015e2:	2100      	movs	r1, #0
 80015e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80015e8:	f7ff bf92 	b.w	8001510 <RCC_APB1PeriphResetCmd>
 80015ec:	2101      	movs	r1, #1
 80015ee:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80015f2:	f7ff ff7f 	bl	80014f4 <RCC_APB2PeriphResetCmd>
 80015f6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80015fa:	2100      	movs	r1, #0
 80015fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8001600:	f7ff bf78 	b.w	80014f4 <RCC_APB2PeriphResetCmd>
 8001604:	2101      	movs	r1, #1
 8001606:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800160a:	f7ff ff81 	bl	8001510 <RCC_APB1PeriphResetCmd>
 800160e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001612:	2100      	movs	r1, #0
 8001614:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8001618:	f7ff bf7a 	b.w	8001510 <RCC_APB1PeriphResetCmd>

0800161c <USART_Init>:
 800161c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800161e:	6807      	ldr	r7, [r0, #0]
 8001620:	688e      	ldr	r6, [r1, #8]
 8001622:	4604      	mov	r4, r0
 8001624:	460d      	mov	r5, r1
 8001626:	f027 0701 	bic.w	r7, r7, #1
 800162a:	68c8      	ldr	r0, [r1, #12]
 800162c:	692a      	ldr	r2, [r5, #16]
 800162e:	6849      	ldr	r1, [r1, #4]
 8001630:	696b      	ldr	r3, [r5, #20]
 8001632:	6027      	str	r7, [r4, #0]
 8001634:	6867      	ldr	r7, [r4, #4]
 8001636:	f427 5740 	bic.w	r7, r7, #12288	; 0x3000
 800163a:	433e      	orrs	r6, r7
 800163c:	6066      	str	r6, [r4, #4]
 800163e:	6826      	ldr	r6, [r4, #0]
 8001640:	4308      	orrs	r0, r1
 8001642:	f426 51b0 	bic.w	r1, r6, #5632	; 0x1600
 8001646:	f021 060c 	bic.w	r6, r1, #12
 800164a:	4302      	orrs	r2, r0
 800164c:	4332      	orrs	r2, r6
 800164e:	6022      	str	r2, [r4, #0]
 8001650:	68a0      	ldr	r0, [r4, #8]
 8001652:	f420 7140 	bic.w	r1, r0, #768	; 0x300
 8001656:	b08d      	sub	sp, #52	; 0x34
 8001658:	430b      	orrs	r3, r1
 800165a:	60a3      	str	r3, [r4, #8]
 800165c:	4668      	mov	r0, sp
 800165e:	f7ff fe09 	bl	8001274 <RCC_GetClocksFreq>
 8001662:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001666:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800166a:	4294      	cmp	r4, r2
 800166c:	d027      	beq.n	80016be <USART_Init+0xa2>
 800166e:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 8001672:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8001676:	4284      	cmp	r4, r0
 8001678:	bf0c      	ite	eq
 800167a:	990a      	ldreq	r1, [sp, #40]	; 0x28
 800167c:	990b      	ldrne	r1, [sp, #44]	; 0x2c
 800167e:	6823      	ldr	r3, [r4, #0]
 8001680:	682a      	ldr	r2, [r5, #0]
 8001682:	0418      	lsls	r0, r3, #16
 8001684:	d516      	bpl.n	80016b4 <USART_Init+0x98>
 8001686:	0048      	lsls	r0, r1, #1
 8001688:	fbb0 f3f2 	udiv	r3, r0, r2
 800168c:	fb02 0113 	mls	r1, r2, r3, r0
 8001690:	ebb1 0f52 	cmp.w	r1, r2, lsr #1
 8001694:	6822      	ldr	r2, [r4, #0]
 8001696:	bf28      	it	cs
 8001698:	3301      	addcs	r3, #1
 800169a:	0412      	lsls	r2, r2, #16
 800169c:	d506      	bpl.n	80016ac <USART_Init+0x90>
 800169e:	f64f 70f0 	movw	r0, #65520	; 0xfff0
 80016a2:	f3c3 0142 	ubfx	r1, r3, #1, #3
 80016a6:	4018      	ands	r0, r3
 80016a8:	ea41 0300 	orr.w	r3, r1, r0
 80016ac:	b29a      	uxth	r2, r3
 80016ae:	81a2      	strh	r2, [r4, #12]
 80016b0:	b00d      	add	sp, #52	; 0x34
 80016b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016b4:	fbb1 f3f2 	udiv	r3, r1, r2
 80016b8:	fb02 1113 	mls	r1, r2, r3, r1
 80016bc:	e7e8      	b.n	8001690 <USART_Init+0x74>
 80016be:	9909      	ldr	r1, [sp, #36]	; 0x24
 80016c0:	e7dd      	b.n	800167e <USART_Init+0x62>
 80016c2:	bf00      	nop

080016c4 <USART_StructInit>:
 80016c4:	2300      	movs	r3, #0
 80016c6:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80016ca:	e880 000c 	stmia.w	r0, {r2, r3}
 80016ce:	220c      	movs	r2, #12
 80016d0:	6083      	str	r3, [r0, #8]
 80016d2:	60c3      	str	r3, [r0, #12]
 80016d4:	6102      	str	r2, [r0, #16]
 80016d6:	6143      	str	r3, [r0, #20]
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop

080016dc <USART_ClockInit>:
 80016dc:	b430      	push	{r4, r5}
 80016de:	e891 0028 	ldmia.w	r1, {r3, r5}
 80016e2:	688c      	ldr	r4, [r1, #8]
 80016e4:	6842      	ldr	r2, [r0, #4]
 80016e6:	68c9      	ldr	r1, [r1, #12]
 80016e8:	432b      	orrs	r3, r5
 80016ea:	4323      	orrs	r3, r4
 80016ec:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 80016f0:	430b      	orrs	r3, r1
 80016f2:	4313      	orrs	r3, r2
 80016f4:	6043      	str	r3, [r0, #4]
 80016f6:	bc30      	pop	{r4, r5}
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop

080016fc <USART_ClockStructInit>:
 80016fc:	2300      	movs	r3, #0
 80016fe:	6003      	str	r3, [r0, #0]
 8001700:	6043      	str	r3, [r0, #4]
 8001702:	6083      	str	r3, [r0, #8]
 8001704:	60c3      	str	r3, [r0, #12]
 8001706:	4770      	bx	lr

08001708 <USART_Cmd>:
 8001708:	6803      	ldr	r3, [r0, #0]
 800170a:	b919      	cbnz	r1, 8001714 <USART_Cmd+0xc>
 800170c:	f023 0101 	bic.w	r1, r3, #1
 8001710:	6001      	str	r1, [r0, #0]
 8001712:	4770      	bx	lr
 8001714:	f043 0201 	orr.w	r2, r3, #1
 8001718:	6002      	str	r2, [r0, #0]
 800171a:	4770      	bx	lr

0800171c <USART_DirectionModeCmd>:
 800171c:	6803      	ldr	r3, [r0, #0]
 800171e:	b91a      	cbnz	r2, 8001728 <USART_DirectionModeCmd+0xc>
 8001720:	ea23 0101 	bic.w	r1, r3, r1
 8001724:	6001      	str	r1, [r0, #0]
 8001726:	4770      	bx	lr
 8001728:	4319      	orrs	r1, r3
 800172a:	6001      	str	r1, [r0, #0]
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop

08001730 <USART_OverSampling8Cmd>:
 8001730:	6803      	ldr	r3, [r0, #0]
 8001732:	b919      	cbnz	r1, 800173c <USART_OverSampling8Cmd+0xc>
 8001734:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8001738:	6001      	str	r1, [r0, #0]
 800173a:	4770      	bx	lr
 800173c:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8001740:	6002      	str	r2, [r0, #0]
 8001742:	4770      	bx	lr

08001744 <USART_OneBitMethodCmd>:
 8001744:	6883      	ldr	r3, [r0, #8]
 8001746:	b919      	cbnz	r1, 8001750 <USART_OneBitMethodCmd+0xc>
 8001748:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 800174c:	6081      	str	r1, [r0, #8]
 800174e:	4770      	bx	lr
 8001750:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001754:	6082      	str	r2, [r0, #8]
 8001756:	4770      	bx	lr

08001758 <USART_MSBFirstCmd>:
 8001758:	6843      	ldr	r3, [r0, #4]
 800175a:	b919      	cbnz	r1, 8001764 <USART_MSBFirstCmd+0xc>
 800175c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8001760:	6041      	str	r1, [r0, #4]
 8001762:	4770      	bx	lr
 8001764:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001768:	6042      	str	r2, [r0, #4]
 800176a:	4770      	bx	lr

0800176c <USART_DataInvCmd>:
 800176c:	6843      	ldr	r3, [r0, #4]
 800176e:	b919      	cbnz	r1, 8001778 <USART_DataInvCmd+0xc>
 8001770:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8001774:	6041      	str	r1, [r0, #4]
 8001776:	4770      	bx	lr
 8001778:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800177c:	6042      	str	r2, [r0, #4]
 800177e:	4770      	bx	lr

08001780 <USART_InvPinCmd>:
 8001780:	6843      	ldr	r3, [r0, #4]
 8001782:	b91a      	cbnz	r2, 800178c <USART_InvPinCmd+0xc>
 8001784:	ea23 0101 	bic.w	r1, r3, r1
 8001788:	6041      	str	r1, [r0, #4]
 800178a:	4770      	bx	lr
 800178c:	4319      	orrs	r1, r3
 800178e:	6041      	str	r1, [r0, #4]
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop

08001794 <USART_SWAPPinCmd>:
 8001794:	6843      	ldr	r3, [r0, #4]
 8001796:	b919      	cbnz	r1, 80017a0 <USART_SWAPPinCmd+0xc>
 8001798:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800179c:	6041      	str	r1, [r0, #4]
 800179e:	4770      	bx	lr
 80017a0:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80017a4:	6042      	str	r2, [r0, #4]
 80017a6:	4770      	bx	lr

080017a8 <USART_ReceiverTimeOutCmd>:
 80017a8:	6843      	ldr	r3, [r0, #4]
 80017aa:	b919      	cbnz	r1, 80017b4 <USART_ReceiverTimeOutCmd+0xc>
 80017ac:	f423 0100 	bic.w	r1, r3, #8388608	; 0x800000
 80017b0:	6041      	str	r1, [r0, #4]
 80017b2:	4770      	bx	lr
 80017b4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80017b8:	6042      	str	r2, [r0, #4]
 80017ba:	4770      	bx	lr

080017bc <USART_SetReceiverTimeOut>:
 80017bc:	6943      	ldr	r3, [r0, #20]
 80017be:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 80017c2:	6142      	str	r2, [r0, #20]
 80017c4:	6943      	ldr	r3, [r0, #20]
 80017c6:	4319      	orrs	r1, r3
 80017c8:	6141      	str	r1, [r0, #20]
 80017ca:	4770      	bx	lr

080017cc <USART_SetPrescaler>:
 80017cc:	8a03      	ldrh	r3, [r0, #16]
 80017ce:	f403 427f 	and.w	r2, r3, #65280	; 0xff00
 80017d2:	8202      	strh	r2, [r0, #16]
 80017d4:	8a03      	ldrh	r3, [r0, #16]
 80017d6:	b29a      	uxth	r2, r3
 80017d8:	4311      	orrs	r1, r2
 80017da:	8201      	strh	r1, [r0, #16]
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop

080017e0 <USART_STOPModeCmd>:
 80017e0:	6803      	ldr	r3, [r0, #0]
 80017e2:	b919      	cbnz	r1, 80017ec <USART_STOPModeCmd+0xc>
 80017e4:	f023 0102 	bic.w	r1, r3, #2
 80017e8:	6001      	str	r1, [r0, #0]
 80017ea:	4770      	bx	lr
 80017ec:	f043 0202 	orr.w	r2, r3, #2
 80017f0:	6002      	str	r2, [r0, #0]
 80017f2:	4770      	bx	lr

080017f4 <USART_StopModeWakeUpSourceConfig>:
 80017f4:	6883      	ldr	r3, [r0, #8]
 80017f6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80017fa:	6082      	str	r2, [r0, #8]
 80017fc:	6883      	ldr	r3, [r0, #8]
 80017fe:	4319      	orrs	r1, r3
 8001800:	6081      	str	r1, [r0, #8]
 8001802:	4770      	bx	lr

08001804 <USART_AutoBaudRateCmd>:
 8001804:	6843      	ldr	r3, [r0, #4]
 8001806:	b919      	cbnz	r1, 8001810 <USART_AutoBaudRateCmd+0xc>
 8001808:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800180c:	6041      	str	r1, [r0, #4]
 800180e:	4770      	bx	lr
 8001810:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001814:	6042      	str	r2, [r0, #4]
 8001816:	4770      	bx	lr

08001818 <USART_AutoBaudRateConfig>:
 8001818:	6843      	ldr	r3, [r0, #4]
 800181a:	f423 02c0 	bic.w	r2, r3, #6291456	; 0x600000
 800181e:	6042      	str	r2, [r0, #4]
 8001820:	6843      	ldr	r3, [r0, #4]
 8001822:	4319      	orrs	r1, r3
 8001824:	6041      	str	r1, [r0, #4]
 8001826:	4770      	bx	lr

08001828 <USART_SendData>:
 8001828:	05c9      	lsls	r1, r1, #23
 800182a:	0dca      	lsrs	r2, r1, #23
 800182c:	8502      	strh	r2, [r0, #40]	; 0x28
 800182e:	4770      	bx	lr

08001830 <USART_ReceiveData>:
 8001830:	8c80      	ldrh	r0, [r0, #36]	; 0x24
 8001832:	05c1      	lsls	r1, r0, #23
 8001834:	0dc8      	lsrs	r0, r1, #23
 8001836:	4770      	bx	lr

08001838 <USART_SetAddress>:
 8001838:	6843      	ldr	r3, [r0, #4]
 800183a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800183e:	6042      	str	r2, [r0, #4]
 8001840:	6843      	ldr	r3, [r0, #4]
 8001842:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
 8001846:	6041      	str	r1, [r0, #4]
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop

0800184c <USART_MuteModeCmd>:
 800184c:	6803      	ldr	r3, [r0, #0]
 800184e:	b919      	cbnz	r1, 8001858 <USART_MuteModeCmd+0xc>
 8001850:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8001854:	6001      	str	r1, [r0, #0]
 8001856:	4770      	bx	lr
 8001858:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800185c:	6002      	str	r2, [r0, #0]
 800185e:	4770      	bx	lr

08001860 <USART_MuteModeWakeUpConfig>:
 8001860:	6803      	ldr	r3, [r0, #0]
 8001862:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8001866:	6002      	str	r2, [r0, #0]
 8001868:	6803      	ldr	r3, [r0, #0]
 800186a:	4319      	orrs	r1, r3
 800186c:	6001      	str	r1, [r0, #0]
 800186e:	4770      	bx	lr

08001870 <USART_AddressDetectionConfig>:
 8001870:	6843      	ldr	r3, [r0, #4]
 8001872:	f023 0210 	bic.w	r2, r3, #16
 8001876:	6042      	str	r2, [r0, #4]
 8001878:	6843      	ldr	r3, [r0, #4]
 800187a:	4319      	orrs	r1, r3
 800187c:	6041      	str	r1, [r0, #4]
 800187e:	4770      	bx	lr

08001880 <USART_LINBreakDetectLengthConfig>:
 8001880:	6843      	ldr	r3, [r0, #4]
 8001882:	f023 0220 	bic.w	r2, r3, #32
 8001886:	6042      	str	r2, [r0, #4]
 8001888:	6843      	ldr	r3, [r0, #4]
 800188a:	4319      	orrs	r1, r3
 800188c:	6041      	str	r1, [r0, #4]
 800188e:	4770      	bx	lr

08001890 <USART_LINCmd>:
 8001890:	6843      	ldr	r3, [r0, #4]
 8001892:	b919      	cbnz	r1, 800189c <USART_LINCmd+0xc>
 8001894:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8001898:	6041      	str	r1, [r0, #4]
 800189a:	4770      	bx	lr
 800189c:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80018a0:	6042      	str	r2, [r0, #4]
 80018a2:	4770      	bx	lr

080018a4 <USART_HalfDuplexCmd>:
 80018a4:	6883      	ldr	r3, [r0, #8]
 80018a6:	b919      	cbnz	r1, 80018b0 <USART_HalfDuplexCmd+0xc>
 80018a8:	f023 0108 	bic.w	r1, r3, #8
 80018ac:	6081      	str	r1, [r0, #8]
 80018ae:	4770      	bx	lr
 80018b0:	f043 0208 	orr.w	r2, r3, #8
 80018b4:	6082      	str	r2, [r0, #8]
 80018b6:	4770      	bx	lr

080018b8 <USART_SetGuardTime>:
 80018b8:	8a03      	ldrh	r3, [r0, #16]
 80018ba:	b2da      	uxtb	r2, r3
 80018bc:	8202      	strh	r2, [r0, #16]
 80018be:	8a03      	ldrh	r3, [r0, #16]
 80018c0:	b29a      	uxth	r2, r3
 80018c2:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
 80018c6:	8201      	strh	r1, [r0, #16]
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop

080018cc <USART_SmartCardCmd>:
 80018cc:	6883      	ldr	r3, [r0, #8]
 80018ce:	b919      	cbnz	r1, 80018d8 <USART_SmartCardCmd+0xc>
 80018d0:	f023 0120 	bic.w	r1, r3, #32
 80018d4:	6081      	str	r1, [r0, #8]
 80018d6:	4770      	bx	lr
 80018d8:	f043 0220 	orr.w	r2, r3, #32
 80018dc:	6082      	str	r2, [r0, #8]
 80018de:	4770      	bx	lr

080018e0 <USART_SmartCardNACKCmd>:
 80018e0:	6883      	ldr	r3, [r0, #8]
 80018e2:	b919      	cbnz	r1, 80018ec <USART_SmartCardNACKCmd+0xc>
 80018e4:	f023 0110 	bic.w	r1, r3, #16
 80018e8:	6081      	str	r1, [r0, #8]
 80018ea:	4770      	bx	lr
 80018ec:	f043 0210 	orr.w	r2, r3, #16
 80018f0:	6082      	str	r2, [r0, #8]
 80018f2:	4770      	bx	lr

080018f4 <USART_SetAutoRetryCount>:
 80018f4:	6883      	ldr	r3, [r0, #8]
 80018f6:	f423 2260 	bic.w	r2, r3, #917504	; 0xe0000
 80018fa:	6082      	str	r2, [r0, #8]
 80018fc:	6883      	ldr	r3, [r0, #8]
 80018fe:	ea43 4141 	orr.w	r1, r3, r1, lsl #17
 8001902:	6081      	str	r1, [r0, #8]
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop

08001908 <USART_SetBlockLength>:
 8001908:	6943      	ldr	r3, [r0, #20]
 800190a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800190e:	6142      	str	r2, [r0, #20]
 8001910:	6943      	ldr	r3, [r0, #20]
 8001912:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
 8001916:	6141      	str	r1, [r0, #20]
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop

0800191c <USART_IrDAConfig>:
 800191c:	6883      	ldr	r3, [r0, #8]
 800191e:	f023 0204 	bic.w	r2, r3, #4
 8001922:	6082      	str	r2, [r0, #8]
 8001924:	6883      	ldr	r3, [r0, #8]
 8001926:	4319      	orrs	r1, r3
 8001928:	6081      	str	r1, [r0, #8]
 800192a:	4770      	bx	lr

0800192c <USART_IrDACmd>:
 800192c:	6883      	ldr	r3, [r0, #8]
 800192e:	b919      	cbnz	r1, 8001938 <USART_IrDACmd+0xc>
 8001930:	f023 0102 	bic.w	r1, r3, #2
 8001934:	6081      	str	r1, [r0, #8]
 8001936:	4770      	bx	lr
 8001938:	f043 0202 	orr.w	r2, r3, #2
 800193c:	6082      	str	r2, [r0, #8]
 800193e:	4770      	bx	lr

08001940 <USART_DECmd>:
 8001940:	6883      	ldr	r3, [r0, #8]
 8001942:	b919      	cbnz	r1, 800194c <USART_DECmd+0xc>
 8001944:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8001948:	6081      	str	r1, [r0, #8]
 800194a:	4770      	bx	lr
 800194c:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001950:	6082      	str	r2, [r0, #8]
 8001952:	4770      	bx	lr

08001954 <USART_DEPolarityConfig>:
 8001954:	6883      	ldr	r3, [r0, #8]
 8001956:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800195a:	6082      	str	r2, [r0, #8]
 800195c:	6883      	ldr	r3, [r0, #8]
 800195e:	4319      	orrs	r1, r3
 8001960:	6081      	str	r1, [r0, #8]
 8001962:	4770      	bx	lr

08001964 <USART_SetDEAssertionTime>:
 8001964:	6803      	ldr	r3, [r0, #0]
 8001966:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 800196a:	6002      	str	r2, [r0, #0]
 800196c:	6803      	ldr	r3, [r0, #0]
 800196e:	ea43 5141 	orr.w	r1, r3, r1, lsl #21
 8001972:	6001      	str	r1, [r0, #0]
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop

08001978 <USART_SetDEDeassertionTime>:
 8001978:	6803      	ldr	r3, [r0, #0]
 800197a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800197e:	6002      	str	r2, [r0, #0]
 8001980:	6803      	ldr	r3, [r0, #0]
 8001982:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8001986:	6001      	str	r1, [r0, #0]
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop

0800198c <USART_DMACmd>:
 800198c:	6883      	ldr	r3, [r0, #8]
 800198e:	b91a      	cbnz	r2, 8001998 <USART_DMACmd+0xc>
 8001990:	ea23 0101 	bic.w	r1, r3, r1
 8001994:	6081      	str	r1, [r0, #8]
 8001996:	4770      	bx	lr
 8001998:	4319      	orrs	r1, r3
 800199a:	6081      	str	r1, [r0, #8]
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop

080019a0 <USART_DMAReceptionErrorConfig>:
 80019a0:	6883      	ldr	r3, [r0, #8]
 80019a2:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80019a6:	6082      	str	r2, [r0, #8]
 80019a8:	6883      	ldr	r3, [r0, #8]
 80019aa:	4319      	orrs	r1, r3
 80019ac:	6081      	str	r1, [r0, #8]
 80019ae:	4770      	bx	lr

080019b0 <USART_ITConfig>:
 80019b0:	b2cb      	uxtb	r3, r1
 80019b2:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80019b6:	b410      	push	{r4}
 80019b8:	2401      	movs	r4, #1
 80019ba:	2902      	cmp	r1, #2
 80019bc:	fa04 f303 	lsl.w	r3, r4, r3
 80019c0:	d00d      	beq.n	80019de <USART_ITConfig+0x2e>
 80019c2:	2903      	cmp	r1, #3
 80019c4:	bf08      	it	eq
 80019c6:	3008      	addeq	r0, #8
 80019c8:	b92a      	cbnz	r2, 80019d6 <USART_ITConfig+0x26>
 80019ca:	6802      	ldr	r2, [r0, #0]
 80019cc:	ea22 0103 	bic.w	r1, r2, r3
 80019d0:	6001      	str	r1, [r0, #0]
 80019d2:	bc10      	pop	{r4}
 80019d4:	4770      	bx	lr
 80019d6:	6802      	ldr	r2, [r0, #0]
 80019d8:	4313      	orrs	r3, r2
 80019da:	6003      	str	r3, [r0, #0]
 80019dc:	e7f9      	b.n	80019d2 <USART_ITConfig+0x22>
 80019de:	3004      	adds	r0, #4
 80019e0:	e7f2      	b.n	80019c8 <USART_ITConfig+0x18>
 80019e2:	bf00      	nop

080019e4 <USART_RequestCmd>:
 80019e4:	8b03      	ldrh	r3, [r0, #24]
 80019e6:	b922      	cbnz	r2, 80019f2 <USART_RequestCmd+0xe>
 80019e8:	b29a      	uxth	r2, r3
 80019ea:	ea22 0101 	bic.w	r1, r2, r1
 80019ee:	8301      	strh	r1, [r0, #24]
 80019f0:	4770      	bx	lr
 80019f2:	4319      	orrs	r1, r3
 80019f4:	b28b      	uxth	r3, r1
 80019f6:	8303      	strh	r3, [r0, #24]
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop

080019fc <USART_OverrunDetectionConfig>:
 80019fc:	6883      	ldr	r3, [r0, #8]
 80019fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001a02:	6082      	str	r2, [r0, #8]
 8001a04:	6883      	ldr	r3, [r0, #8]
 8001a06:	4319      	orrs	r1, r3
 8001a08:	6081      	str	r1, [r0, #8]
 8001a0a:	4770      	bx	lr

08001a0c <USART_GetFlagStatus>:
 8001a0c:	69c3      	ldr	r3, [r0, #28]
 8001a0e:	4219      	tst	r1, r3
 8001a10:	bf0c      	ite	eq
 8001a12:	2000      	moveq	r0, #0
 8001a14:	2001      	movne	r0, #1
 8001a16:	4770      	bx	lr

08001a18 <USART_ClearFlag>:
 8001a18:	6201      	str	r1, [r0, #32]
 8001a1a:	4770      	bx	lr

08001a1c <USART_GetITStatus>:
 8001a1c:	b410      	push	{r4}
 8001a1e:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8001a22:	2401      	movs	r4, #1
 8001a24:	b2ca      	uxtb	r2, r1
 8001a26:	42a3      	cmp	r3, r4
 8001a28:	fa04 f202 	lsl.w	r2, r4, r2
 8001a2c:	d012      	beq.n	8001a54 <USART_GetITStatus+0x38>
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	bf0c      	ite	eq
 8001a32:	6843      	ldreq	r3, [r0, #4]
 8001a34:	6883      	ldrne	r3, [r0, #8]
 8001a36:	4013      	ands	r3, r2
 8001a38:	69c0      	ldr	r0, [r0, #28]
 8001a3a:	b14b      	cbz	r3, 8001a50 <USART_GetITStatus+0x34>
 8001a3c:	0c09      	lsrs	r1, r1, #16
 8001a3e:	2301      	movs	r3, #1
 8001a40:	fa03 f201 	lsl.w	r2, r3, r1
 8001a44:	4202      	tst	r2, r0
 8001a46:	bf0c      	ite	eq
 8001a48:	2000      	moveq	r0, #0
 8001a4a:	2001      	movne	r0, #1
 8001a4c:	bc10      	pop	{r4}
 8001a4e:	4770      	bx	lr
 8001a50:	4618      	mov	r0, r3
 8001a52:	e7fb      	b.n	8001a4c <USART_GetITStatus+0x30>
 8001a54:	6803      	ldr	r3, [r0, #0]
 8001a56:	4013      	ands	r3, r2
 8001a58:	e7ee      	b.n	8001a38 <USART_GetITStatus+0x1c>
 8001a5a:	bf00      	nop

08001a5c <USART_ClearITPendingBit>:
 8001a5c:	0c09      	lsrs	r1, r1, #16
 8001a5e:	2301      	movs	r3, #1
 8001a60:	fa03 f201 	lsl.w	r2, r3, r1
 8001a64:	6202      	str	r2, [r0, #32]
 8001a66:	4770      	bx	lr

08001a68 <GPIO_DeInit>:
 8001a68:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8001a6c:	b508      	push	{r3, lr}
 8001a6e:	d02a      	beq.n	8001ac6 <GPIO_DeInit+0x5e>
 8001a70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a74:	f6c4 0300 	movt	r3, #18432	; 0x4800
 8001a78:	4298      	cmp	r0, r3
 8001a7a:	d030      	beq.n	8001ade <GPIO_DeInit+0x76>
 8001a7c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a80:	f6c4 0100 	movt	r1, #18432	; 0x4800
 8001a84:	4288      	cmp	r0, r1
 8001a86:	d036      	beq.n	8001af6 <GPIO_DeInit+0x8e>
 8001a88:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8001a8c:	f6c4 0200 	movt	r2, #18432	; 0x4800
 8001a90:	4290      	cmp	r0, r2
 8001a92:	d03c      	beq.n	8001b0e <GPIO_DeInit+0xa6>
 8001a94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a98:	f6c4 0300 	movt	r3, #18432	; 0x4800
 8001a9c:	4298      	cmp	r0, r3
 8001a9e:	d042      	beq.n	8001b26 <GPIO_DeInit+0xbe>
 8001aa0:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
 8001aa4:	f6c4 0100 	movt	r1, #18432	; 0x4800
 8001aa8:	4288      	cmp	r0, r1
 8001aaa:	d000      	beq.n	8001aae <GPIO_DeInit+0x46>
 8001aac:	bd08      	pop	{r3, pc}
 8001aae:	2101      	movs	r1, #1
 8001ab0:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001ab4:	f7ff fd10 	bl	80014d8 <RCC_AHBPeriphResetCmd>
 8001ab8:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001abc:	2100      	movs	r1, #0
 8001abe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8001ac2:	f7ff bd09 	b.w	80014d8 <RCC_AHBPeriphResetCmd>
 8001ac6:	2101      	movs	r1, #1
 8001ac8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001acc:	f7ff fd04 	bl	80014d8 <RCC_AHBPeriphResetCmd>
 8001ad0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001ad4:	2100      	movs	r1, #0
 8001ad6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8001ada:	f7ff bcfd 	b.w	80014d8 <RCC_AHBPeriphResetCmd>
 8001ade:	2101      	movs	r1, #1
 8001ae0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001ae4:	f7ff fcf8 	bl	80014d8 <RCC_AHBPeriphResetCmd>
 8001ae8:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001aec:	2100      	movs	r1, #0
 8001aee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8001af2:	f7ff bcf1 	b.w	80014d8 <RCC_AHBPeriphResetCmd>
 8001af6:	2101      	movs	r1, #1
 8001af8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001afc:	f7ff fcec 	bl	80014d8 <RCC_AHBPeriphResetCmd>
 8001b00:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001b04:	2100      	movs	r1, #0
 8001b06:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8001b0a:	f7ff bce5 	b.w	80014d8 <RCC_AHBPeriphResetCmd>
 8001b0e:	2101      	movs	r1, #1
 8001b10:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001b14:	f7ff fce0 	bl	80014d8 <RCC_AHBPeriphResetCmd>
 8001b18:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001b1c:	2100      	movs	r1, #0
 8001b1e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8001b22:	f7ff bcd9 	b.w	80014d8 <RCC_AHBPeriphResetCmd>
 8001b26:	2101      	movs	r1, #1
 8001b28:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001b2c:	f7ff fcd4 	bl	80014d8 <RCC_AHBPeriphResetCmd>
 8001b30:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001b34:	2100      	movs	r1, #0
 8001b36:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8001b3a:	f7ff bccd 	b.w	80014d8 <RCC_AHBPeriphResetCmd>
 8001b3e:	bf00      	nop

08001b40 <GPIO_Init>:
 8001b40:	2200      	movs	r2, #0
 8001b42:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001b46:	4613      	mov	r3, r2
 8001b48:	680d      	ldr	r5, [r1, #0]
 8001b4a:	2601      	movs	r6, #1
 8001b4c:	f04f 0c03 	mov.w	ip, #3
 8001b50:	e00b      	b.n	8001b6a <GPIO_Init+0x2a>
 8001b52:	3301      	adds	r3, #1
 8001b54:	fa06 f403 	lsl.w	r4, r6, r3
 8001b58:	ea04 0705 	and.w	r7, r4, r5
 8001b5c:	3202      	adds	r2, #2
 8001b5e:	42a7      	cmp	r7, r4
 8001b60:	d031      	beq.n	8001bc6 <GPIO_Init+0x86>
 8001b62:	3301      	adds	r3, #1
 8001b64:	3202      	adds	r2, #2
 8001b66:	2b10      	cmp	r3, #16
 8001b68:	d051      	beq.n	8001c0e <GPIO_Init+0xce>
 8001b6a:	fa06 f403 	lsl.w	r4, r6, r3
 8001b6e:	ea04 0705 	and.w	r7, r4, r5
 8001b72:	42a7      	cmp	r7, r4
 8001b74:	d1ed      	bne.n	8001b52 <GPIO_Init+0x12>
 8001b76:	790c      	ldrb	r4, [r1, #4]
 8001b78:	f104 38ff 	add.w	r8, r4, #4294967295
 8001b7c:	f1b8 0f01 	cmp.w	r8, #1
 8001b80:	d948      	bls.n	8001c14 <GPIO_Init+0xd4>
 8001b82:	fa0c f702 	lsl.w	r7, ip, r2
 8001b86:	ea6f 0807 	mvn.w	r8, r7
 8001b8a:	6807      	ldr	r7, [r0, #0]
 8001b8c:	f891 9007 	ldrb.w	r9, [r1, #7]
 8001b90:	ea08 0707 	and.w	r7, r8, r7
 8001b94:	6007      	str	r7, [r0, #0]
 8001b96:	6807      	ldr	r7, [r0, #0]
 8001b98:	fa04 f402 	lsl.w	r4, r4, r2
 8001b9c:	433c      	orrs	r4, r7
 8001b9e:	6004      	str	r4, [r0, #0]
 8001ba0:	68c4      	ldr	r4, [r0, #12]
 8001ba2:	fa0c f702 	lsl.w	r7, ip, r2
 8001ba6:	ea24 0407 	bic.w	r4, r4, r7
 8001baa:	60c4      	str	r4, [r0, #12]
 8001bac:	68c7      	ldr	r7, [r0, #12]
 8001bae:	fa09 f402 	lsl.w	r4, r9, r2
 8001bb2:	433c      	orrs	r4, r7
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	60c4      	str	r4, [r0, #12]
 8001bb8:	fa06 f403 	lsl.w	r4, r6, r3
 8001bbc:	ea04 0705 	and.w	r7, r4, r5
 8001bc0:	3202      	adds	r2, #2
 8001bc2:	42a7      	cmp	r7, r4
 8001bc4:	d1cd      	bne.n	8001b62 <GPIO_Init+0x22>
 8001bc6:	790c      	ldrb	r4, [r1, #4]
 8001bc8:	f104 38ff 	add.w	r8, r4, #4294967295
 8001bcc:	f1b8 0f01 	cmp.w	r8, #1
 8001bd0:	d946      	bls.n	8001c60 <GPIO_Init+0x120>
 8001bd2:	fa0c f702 	lsl.w	r7, ip, r2
 8001bd6:	ea6f 0807 	mvn.w	r8, r7
 8001bda:	6807      	ldr	r7, [r0, #0]
 8001bdc:	f891 9007 	ldrb.w	r9, [r1, #7]
 8001be0:	ea08 0707 	and.w	r7, r8, r7
 8001be4:	6007      	str	r7, [r0, #0]
 8001be6:	6807      	ldr	r7, [r0, #0]
 8001be8:	fa04 f402 	lsl.w	r4, r4, r2
 8001bec:	433c      	orrs	r4, r7
 8001bee:	6004      	str	r4, [r0, #0]
 8001bf0:	68c4      	ldr	r4, [r0, #12]
 8001bf2:	fa0c f702 	lsl.w	r7, ip, r2
 8001bf6:	ea24 0407 	bic.w	r4, r4, r7
 8001bfa:	60c4      	str	r4, [r0, #12]
 8001bfc:	68c7      	ldr	r7, [r0, #12]
 8001bfe:	fa09 f402 	lsl.w	r4, r9, r2
 8001c02:	3301      	adds	r3, #1
 8001c04:	433c      	orrs	r4, r7
 8001c06:	3202      	adds	r2, #2
 8001c08:	2b10      	cmp	r3, #16
 8001c0a:	60c4      	str	r4, [r0, #12]
 8001c0c:	d1ad      	bne.n	8001b6a <GPIO_Init+0x2a>
 8001c0e:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001c12:	4770      	bx	lr
 8001c14:	f8d0 b008 	ldr.w	fp, [r0, #8]
 8001c18:	f891 9005 	ldrb.w	r9, [r1, #5]
 8001c1c:	f891 a006 	ldrb.w	sl, [r1, #6]
 8001c20:	fa0c f802 	lsl.w	r8, ip, r2
 8001c24:	ea6f 0808 	mvn.w	r8, r8
 8001c28:	ea08 0b0b 	and.w	fp, r8, fp
 8001c2c:	f8c0 b008 	str.w	fp, [r0, #8]
 8001c30:	f8d0 b008 	ldr.w	fp, [r0, #8]
 8001c34:	fa09 f902 	lsl.w	r9, r9, r2
 8001c38:	ea49 090b 	orr.w	r9, r9, fp
 8001c3c:	f8c0 9008 	str.w	r9, [r0, #8]
 8001c40:	f8b0 9004 	ldrh.w	r9, [r0, #4]
 8001c44:	fa1f f989 	uxth.w	r9, r9
 8001c48:	ea29 0707 	bic.w	r7, r9, r7
 8001c4c:	8087      	strh	r7, [r0, #4]
 8001c4e:	f8b0 9004 	ldrh.w	r9, [r0, #4]
 8001c52:	fa0a f703 	lsl.w	r7, sl, r3
 8001c56:	ea47 0709 	orr.w	r7, r7, r9
 8001c5a:	b2bf      	uxth	r7, r7
 8001c5c:	8087      	strh	r7, [r0, #4]
 8001c5e:	e794      	b.n	8001b8a <GPIO_Init+0x4a>
 8001c60:	f8d0 b008 	ldr.w	fp, [r0, #8]
 8001c64:	f891 9005 	ldrb.w	r9, [r1, #5]
 8001c68:	f891 a006 	ldrb.w	sl, [r1, #6]
 8001c6c:	fa0c f802 	lsl.w	r8, ip, r2
 8001c70:	ea6f 0808 	mvn.w	r8, r8
 8001c74:	ea08 0b0b 	and.w	fp, r8, fp
 8001c78:	f8c0 b008 	str.w	fp, [r0, #8]
 8001c7c:	f8d0 b008 	ldr.w	fp, [r0, #8]
 8001c80:	fa09 f902 	lsl.w	r9, r9, r2
 8001c84:	ea49 090b 	orr.w	r9, r9, fp
 8001c88:	f8c0 9008 	str.w	r9, [r0, #8]
 8001c8c:	f8b0 9004 	ldrh.w	r9, [r0, #4]
 8001c90:	fa1f f989 	uxth.w	r9, r9
 8001c94:	ea29 0707 	bic.w	r7, r9, r7
 8001c98:	8087      	strh	r7, [r0, #4]
 8001c9a:	f8b0 9004 	ldrh.w	r9, [r0, #4]
 8001c9e:	fa0a f703 	lsl.w	r7, sl, r3
 8001ca2:	ea47 0709 	orr.w	r7, r7, r9
 8001ca6:	b2bf      	uxth	r7, r7
 8001ca8:	8087      	strh	r7, [r0, #4]
 8001caa:	e796      	b.n	8001bda <GPIO_Init+0x9a>

08001cac <GPIO_StructInit>:
 8001cac:	2300      	movs	r3, #0
 8001cae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cb2:	2102      	movs	r1, #2
 8001cb4:	6002      	str	r2, [r0, #0]
 8001cb6:	7103      	strb	r3, [r0, #4]
 8001cb8:	7141      	strb	r1, [r0, #5]
 8001cba:	7183      	strb	r3, [r0, #6]
 8001cbc:	71c3      	strb	r3, [r0, #7]
 8001cbe:	4770      	bx	lr

08001cc0 <GPIO_PinLockConfig>:
 8001cc0:	b082      	sub	sp, #8
 8001cc2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001cc6:	9301      	str	r3, [sp, #4]
 8001cc8:	9a01      	ldr	r2, [sp, #4]
 8001cca:	ea41 0302 	orr.w	r3, r1, r2
 8001cce:	9301      	str	r3, [sp, #4]
 8001cd0:	9a01      	ldr	r2, [sp, #4]
 8001cd2:	61c2      	str	r2, [r0, #28]
 8001cd4:	61c1      	str	r1, [r0, #28]
 8001cd6:	9901      	ldr	r1, [sp, #4]
 8001cd8:	61c1      	str	r1, [r0, #28]
 8001cda:	69c3      	ldr	r3, [r0, #28]
 8001cdc:	9301      	str	r3, [sp, #4]
 8001cde:	69c0      	ldr	r0, [r0, #28]
 8001ce0:	9001      	str	r0, [sp, #4]
 8001ce2:	b002      	add	sp, #8
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop

08001ce8 <GPIO_ReadInputDataBit>:
 8001ce8:	8a03      	ldrh	r3, [r0, #16]
 8001cea:	4219      	tst	r1, r3
 8001cec:	bf0c      	ite	eq
 8001cee:	2000      	moveq	r0, #0
 8001cf0:	2001      	movne	r0, #1
 8001cf2:	4770      	bx	lr

08001cf4 <GPIO_ReadInputData>:
 8001cf4:	8a00      	ldrh	r0, [r0, #16]
 8001cf6:	b280      	uxth	r0, r0
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop

08001cfc <GPIO_ReadOutputDataBit>:
 8001cfc:	8a83      	ldrh	r3, [r0, #20]
 8001cfe:	4219      	tst	r1, r3
 8001d00:	bf0c      	ite	eq
 8001d02:	2000      	moveq	r0, #0
 8001d04:	2001      	movne	r0, #1
 8001d06:	4770      	bx	lr

08001d08 <GPIO_ReadOutputData>:
 8001d08:	8a80      	ldrh	r0, [r0, #20]
 8001d0a:	b280      	uxth	r0, r0
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop

08001d10 <GPIO_SetBits>:
 8001d10:	6181      	str	r1, [r0, #24]
 8001d12:	4770      	bx	lr

08001d14 <GPIO_ResetBits>:
 8001d14:	8501      	strh	r1, [r0, #40]	; 0x28
 8001d16:	4770      	bx	lr

08001d18 <GPIO_WriteBit>:
 8001d18:	b90a      	cbnz	r2, 8001d1e <GPIO_WriteBit+0x6>
 8001d1a:	8501      	strh	r1, [r0, #40]	; 0x28
 8001d1c:	4770      	bx	lr
 8001d1e:	6181      	str	r1, [r0, #24]
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop

08001d24 <GPIO_Write>:
 8001d24:	8281      	strh	r1, [r0, #20]
 8001d26:	4770      	bx	lr

08001d28 <GPIO_PinAFConfig>:
 8001d28:	08cb      	lsrs	r3, r1, #3
 8001d2a:	3308      	adds	r3, #8
 8001d2c:	f001 0107 	and.w	r1, r1, #7
 8001d30:	b430      	push	{r4, r5}
 8001d32:	0089      	lsls	r1, r1, #2
 8001d34:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
 8001d38:	240f      	movs	r4, #15
 8001d3a:	fa04 f401 	lsl.w	r4, r4, r1
 8001d3e:	ea25 0404 	bic.w	r4, r5, r4
 8001d42:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
 8001d46:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 8001d4a:	fa02 f201 	lsl.w	r2, r2, r1
 8001d4e:	4314      	orrs	r4, r2
 8001d50:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
 8001d54:	bc30      	pop	{r4, r5}
 8001d56:	4770      	bx	lr

08001d58 <NVIC_PriorityGroupConfig>:
 8001d58:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8001d5c:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8001d60:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8001d64:	f440 3100 	orr.w	r1, r0, #131072	; 0x20000
 8001d68:	60d9      	str	r1, [r3, #12]
 8001d6a:	4770      	bx	lr

08001d6c <NVIC_Init>:
 8001d6c:	78c3      	ldrb	r3, [r0, #3]
 8001d6e:	b470      	push	{r4, r5, r6}
 8001d70:	b97b      	cbnz	r3, 8001d92 <NVIC_Init+0x26>
 8001d72:	7802      	ldrb	r2, [r0, #0]
 8001d74:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8001d78:	0951      	lsrs	r1, r2, #5
 8001d7a:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8001d7e:	f002 021f 	and.w	r2, r2, #31
 8001d82:	3120      	adds	r1, #32
 8001d84:	2001      	movs	r0, #1
 8001d86:	fa00 f202 	lsl.w	r2, r0, r2
 8001d8a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8001d8e:	bc70      	pop	{r4, r5, r6}
 8001d90:	4770      	bx	lr
 8001d92:	f44f 446d 	mov.w	r4, #60672	; 0xed00
 8001d96:	f2ce 0400 	movt	r4, #57344	; 0xe000
 8001d9a:	7845      	ldrb	r5, [r0, #1]
 8001d9c:	68e6      	ldr	r6, [r4, #12]
 8001d9e:	7884      	ldrb	r4, [r0, #2]
 8001da0:	7803      	ldrb	r3, [r0, #0]
 8001da2:	43f1      	mvns	r1, r6
 8001da4:	f3c1 2202 	ubfx	r2, r1, #8, #3
 8001da8:	260f      	movs	r6, #15
 8001daa:	f1c2 0104 	rsb	r1, r2, #4
 8001dae:	fa26 f202 	lsr.w	r2, r6, r2
 8001db2:	fa05 f101 	lsl.w	r1, r5, r1
 8001db6:	4022      	ands	r2, r4
 8001db8:	430a      	orrs	r2, r1
 8001dba:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8001dbe:	f503 4161 	add.w	r1, r3, #57600	; 0xe100
 8001dc2:	0112      	lsls	r2, r2, #4
 8001dc4:	b2d3      	uxtb	r3, r2
 8001dc6:	f881 3300 	strb.w	r3, [r1, #768]	; 0x300
 8001dca:	7800      	ldrb	r0, [r0, #0]
 8001dcc:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8001dd0:	0941      	lsrs	r1, r0, #5
 8001dd2:	f000 021f 	and.w	r2, r0, #31
 8001dd6:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8001dda:	2001      	movs	r0, #1
 8001ddc:	fa00 f202 	lsl.w	r2, r0, r2
 8001de0:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8001de4:	e7d3      	b.n	8001d8e <NVIC_Init+0x22>
 8001de6:	bf00      	nop

08001de8 <NVIC_SetVectorTable>:
 8001de8:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
 8001dec:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8001df0:	f021 027f 	bic.w	r2, r1, #127	; 0x7f
 8001df4:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8001df8:	4310      	orrs	r0, r2
 8001dfa:	6098      	str	r0, [r3, #8]
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop

08001e00 <NVIC_SystemLPConfig>:
 8001e00:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8001e04:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8001e08:	691a      	ldr	r2, [r3, #16]
 8001e0a:	b919      	cbnz	r1, 8001e14 <NVIC_SystemLPConfig+0x14>
 8001e0c:	ea22 0000 	bic.w	r0, r2, r0
 8001e10:	6118      	str	r0, [r3, #16]
 8001e12:	4770      	bx	lr
 8001e14:	4310      	orrs	r0, r2
 8001e16:	6118      	str	r0, [r3, #16]
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop

08001e1c <SysTick_CLKSourceConfig>:
 8001e1c:	f24e 0310 	movw	r3, #57360	; 0xe010
 8001e20:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8001e24:	2804      	cmp	r0, #4
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	bf0c      	ite	eq
 8001e2a:	f042 0204 	orreq.w	r2, r2, #4
 8001e2e:	f022 0204 	bicne.w	r2, r2, #4
 8001e32:	601a      	str	r2, [r3, #0]
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop

08001e38 <QActive_ctor>:
* \ingroup qf
* \brief QActive_ctor() implementation.
*/

/*..........................................................................*/
void QActive_ctor(QActive * const me, QStateHandler initial) {
 8001e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e3a:	f641 6439 	movw	r4, #7737	; 0x1e39
 8001e3e:	f6c0 0400 	movt	r4, #2048	; 0x800
 8001e42:	4605      	mov	r5, r0
 8001e44:	460f      	mov	r7, r1
 8001e46:	4620      	mov	r0, r4
 8001e48:	4671      	mov	r1, lr
 8001e4a:	4676      	mov	r6, lr
 8001e4c:	f7fe fea6 	bl	8000b9c <__cyg_profile_func_enter>
          &QHsm_dispatch_ },
        &QActive_start_,
        &QActive_post_,
        &QActive_postLIFO_
    };
    QHsm_ctor(&me->super, initial);
 8001e50:	4628      	mov	r0, r5
 8001e52:	4639      	mov	r1, r7
 8001e54:	f000 fdbe 	bl	80029d4 <QHsm_ctor>
    me->super.vptr = &vtbl.super; /* hook the vptr to QActive virtual table */
 8001e58:	f642 7374 	movw	r3, #12148	; 0x2f74
 8001e5c:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001e60:	4620      	mov	r0, r4
 8001e62:	4631      	mov	r1, r6
 8001e64:	602b      	str	r3, [r5, #0]
}
 8001e66:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8001e6a:	f7fe beff 	b.w	8000c6c <__cyg_profile_func_exit>
 8001e6e:	bf00      	nop

08001e70 <QActive_stop>:
    QMSM_INIT(&me->super, ie);                /* execute initial transition */

    QS_FLUSH();                       /* flush the trace buffer to the host */
}
/*..........................................................................*/
void QActive_stop(QActive *me) {
 8001e70:	b570      	push	{r4, r5, r6, lr}
 8001e72:	f641 6471 	movw	r4, #7793	; 0x1e71
 8001e76:	f6c0 0400 	movt	r4, #2048	; 0x800
 8001e7a:	4671      	mov	r1, lr
 8001e7c:	4606      	mov	r6, r0
 8001e7e:	4620      	mov	r0, r4
 8001e80:	4675      	mov	r5, lr
 8001e82:	f7fe fe8b 	bl	8000b9c <__cyg_profile_func_enter>
    QF_remove_(me);                /* remove this active object from the QF */
 8001e86:	4630      	mov	r0, r6
 8001e88:	f000 fa7c 	bl	8002384 <QF_remove_>
 8001e8c:	4620      	mov	r0, r4
 8001e8e:	4629      	mov	r1, r5
}
 8001e90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001e94:	f7fe beea 	b.w	8000c6c <__cyg_profile_func_exit>

08001e98 <QActive_start_>:
/*..........................................................................*/
void QActive_start_(QActive *me, uint_t prio,
                    QEvt const *qSto[], uint_t qLen,
                    void *stkSto, uint_t stkSize,
                    QEvt const *ie)
{
 8001e98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e9c:	460e      	mov	r6, r1
 8001e9e:	4604      	mov	r4, r0
 8001ea0:	4671      	mov	r1, lr
 8001ea2:	4819      	ldr	r0, [pc, #100]	; (8001f08 <QActive_start_+0x70>)
 8001ea4:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8001ea8:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 8001eac:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8001eae:	4699      	mov	r9, r3
 8001eb0:	4675      	mov	r5, lr
 8001eb2:	4692      	mov	sl, r2
 8001eb4:	f7fe fe72 	bl	8000b9c <__cyg_profile_func_enter>
    Q_REQUIRE(((uint_t)0 < prio) && (prio <= (uint_t)QF_MAX_ACTIVE));
 8001eb8:	1e73      	subs	r3, r6, #1
 8001eba:	2b1f      	cmp	r3, #31
 8001ebc:	d81f      	bhi.n	8001efe <QActive_start_+0x66>

    QEQueue_init(&me->eQueue, qSto, qLen); /* initialize the built-in queue */
 8001ebe:	f104 000c 	add.w	r0, r4, #12
 8001ec2:	4651      	mov	r1, sl
 8001ec4:	464a      	mov	r2, r9
 8001ec6:	f000 feab 	bl	8002c20 <QEQueue_init>
    me->prio = (uint8_t)prio;
 8001eca:	7726      	strb	r6, [r4, #28]
    QF_add_(me);                     /* make QF aware of this active object */
 8001ecc:	4620      	mov	r0, r4
 8001ece:	f000 fa83 	bl	80023d8 <QF_add_>

#if defined(QK_TLS) || defined(QK_EXT_SAVE)
    me->osObject = (uint8_t)stkSize;  /* osObject contains the thread flags */
    me->thread = stkSto;/* contains the pointer to the thread-local storage */
#else
    Q_ASSERT((stkSto == (void *)0) && (stkSize == (uint_t)0));
 8001ed2:	f1b8 0f00 	cmp.w	r8, #0
 8001ed6:	d00e      	beq.n	8001ef6 <QActive_start_+0x5e>
 8001ed8:	480c      	ldr	r0, [pc, #48]	; (8001f0c <QActive_start_+0x74>)
 8001eda:	217c      	movs	r1, #124	; 0x7c
 8001edc:	f7fe faca 	bl	8000474 <Q_onAssert>
#endif

    QMSM_INIT(&me->super, ie);                /* execute initial transition */
 8001ee0:	6822      	ldr	r2, [r4, #0]
 8001ee2:	4620      	mov	r0, r4
 8001ee4:	4639      	mov	r1, r7
 8001ee6:	6813      	ldr	r3, [r2, #0]
 8001ee8:	4798      	blx	r3
 8001eea:	4807      	ldr	r0, [pc, #28]	; (8001f08 <QActive_start_+0x70>)
 8001eec:	4629      	mov	r1, r5

    QS_FLUSH();                       /* flush the trace buffer to the host */
}
 8001eee:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ef2:	f7fe bebb 	b.w	8000c6c <__cyg_profile_func_exit>

#if defined(QK_TLS) || defined(QK_EXT_SAVE)
    me->osObject = (uint8_t)stkSize;  /* osObject contains the thread flags */
    me->thread = stkSto;/* contains the pointer to the thread-local storage */
#else
    Q_ASSERT((stkSto == (void *)0) && (stkSize == (uint_t)0));
 8001ef6:	f1bb 0f00 	cmp.w	fp, #0
 8001efa:	d1ed      	bne.n	8001ed8 <QActive_start_+0x40>
 8001efc:	e7f0      	b.n	8001ee0 <QActive_start_+0x48>
void QActive_start_(QActive *me, uint_t prio,
                    QEvt const *qSto[], uint_t qLen,
                    void *stkSto, uint_t stkSize,
                    QEvt const *ie)
{
    Q_REQUIRE(((uint_t)0 < prio) && (prio <= (uint_t)QF_MAX_ACTIVE));
 8001efe:	4803      	ldr	r0, [pc, #12]	; (8001f0c <QActive_start_+0x74>)
 8001f00:	2172      	movs	r1, #114	; 0x72
 8001f02:	f7fe fab7 	bl	8000474 <Q_onAssert>
 8001f06:	e7da      	b.n	8001ebe <QActive_start_+0x26>
 8001f08:	08001e99 	.word	0x08001e99
 8001f0c:	08002f88 	.word	0x08002f88

08001f10 <initialize>:
void QF_stop(void) {
    QF_onCleanup();                                     /* cleanup callback */
    /* nothing else to do for the QK preemptive kernel */
}
/*..........................................................................*/
static void initialize(void) {
 8001f10:	b510      	push	{r4, lr}
 8001f12:	4809      	ldr	r0, [pc, #36]	; (8001f38 <initialize+0x28>)
 8001f14:	4671      	mov	r1, lr
 8001f16:	4674      	mov	r4, lr
 8001f18:	f7fe fe40 	bl	8000b9c <__cyg_profile_func_enter>
    uint8_t p;

    QK_currPrio_ = (uint8_t)0;     /* set the priority for the QK idle loop */
 8001f1c:	4b07      	ldr	r3, [pc, #28]	; (8001f3c <initialize+0x2c>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	701a      	strb	r2, [r3, #0]
    p = QK_schedPrio_();
 8001f22:	f000 fdcf 	bl	8002ac4 <QK_schedPrio_>
    if (p != (uint8_t)0) {
 8001f26:	b108      	cbz	r0, 8001f2c <initialize+0x1c>
        QK_sched_(p);                 /* process all events produced so far */
 8001f28:	f000 fd70 	bl	8002a0c <QK_sched_>
 8001f2c:	4802      	ldr	r0, [pc, #8]	; (8001f38 <initialize+0x28>)
 8001f2e:	4621      	mov	r1, r4
    }
}
 8001f30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001f34:	f7fe be9a 	b.w	8000c6c <__cyg_profile_func_exit>
 8001f38:	08001f11 	.word	0x08001f11
 8001f3c:	20000134 	.word	0x20000134

08001f40 <QF_run>:
/*..........................................................................*/
int_t QF_run(void) {
 8001f40:	b508      	push	{r3, lr}
 8001f42:	4808      	ldr	r0, [pc, #32]	; (8001f64 <QF_run+0x24>)
 8001f44:	4671      	mov	r1, lr
 8001f46:	f7fe fe29 	bl	8000b9c <__cyg_profile_func_enter>
    QF_INT_DISABLE();
 8001f4a:	203f      	movs	r0, #63	; 0x3f
 8001f4c:	f380 8811 	msr	BASEPRI, r0
    initialize();
 8001f50:	f7ff ffde 	bl	8001f10 <initialize>
    QF_onStartup();                                     /* startup callback */
 8001f54:	f7fe faa8 	bl	80004a8 <QF_onStartup>
    QF_INT_ENABLE();
 8001f58:	2000      	movs	r0, #0
 8001f5a:	f380 8811 	msr	BASEPRI, r0

    for ( ; ; ) {                                       /* the QK idle loop */
        QK_onIdle();                      /* invoke the QK on-idle callback */
 8001f5e:	f7fe fab9 	bl	80004d4 <QK_onIdle>
 8001f62:	e7fc      	b.n	8001f5e <QF_run+0x1e>
 8001f64:	08001f41 	.word	0x08001f41

08001f68 <QF_stop>:
    QF_bzero(&QF_active_[0],      (uint_t)sizeof(QF_active_));

    QK_init();                              /* might be defined in assembly */
}
/*..........................................................................*/
void QF_stop(void) {
 8001f68:	b538      	push	{r3, r4, r5, lr}
 8001f6a:	f641 7469 	movw	r4, #8041	; 0x1f69
 8001f6e:	f6c0 0400 	movt	r4, #2048	; 0x800
 8001f72:	4620      	mov	r0, r4
 8001f74:	4671      	mov	r1, lr
 8001f76:	4675      	mov	r5, lr
 8001f78:	f7fe fe10 	bl	8000b9c <__cyg_profile_func_enter>
    QF_onCleanup();                                     /* cleanup callback */
 8001f7c:	f7fe fabe 	bl	80004fc <QF_onCleanup>
 8001f80:	4620      	mov	r0, r4
 8001f82:	4629      	mov	r1, r5
    /* nothing else to do for the QK preemptive kernel */
}
 8001f84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001f88:	f7fe be70 	b.w	8000c6c <__cyg_profile_func_exit>

08001f8c <QF_init>:

/*..........................................................................*/
static void initialize(void);

/*..........................................................................*/
void QF_init(void) {                                          /* see NOTE01 */
 8001f8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f90:	f641 748d 	movw	r4, #8077	; 0x1f8d
 8001f94:	f6c0 0400 	movt	r4, #2048	; 0x800
 8001f98:	4671      	mov	r1, lr
 8001f9a:	4620      	mov	r0, r4
    QK_intNest_  = (uint_t)0;                           /* no nesting level */
    QK_currPrio_ = (uint8_t)(QF_MAX_ACTIVE + 1);        /* scheduler locked */
#ifndef QK_NO_MUTEX
    QK_ceilingPrio_ = (uint8_t)0;
#endif
    QF_maxPool_  = (uint_t)0;
 8001f9c:	f240 1674 	movw	r6, #372	; 0x174
 8001fa0:	46f0      	mov	r8, lr
 8001fa2:	f2c2 0600 	movt	r6, #8192	; 0x2000
 8001fa6:	f7fe fdf9 	bl	8000b9c <__cyg_profile_func_enter>
/*..........................................................................*/
void QF_init(void) {                                          /* see NOTE01 */
    extern uint_t QF_maxPool_;
    extern QTimeEvt QF_timeEvtHead_[QF_MAX_TICK_RATE];

    QK_intNest_  = (uint_t)0;                           /* no nesting level */
 8001faa:	f240 1730 	movw	r7, #304	; 0x130
    QK_currPrio_ = (uint8_t)(QF_MAX_ACTIVE + 1);        /* scheduler locked */
 8001fae:	f240 1534 	movw	r5, #308	; 0x134
#ifndef QK_NO_MUTEX
    QK_ceilingPrio_ = (uint8_t)0;
 8001fb2:	f240 231c 	movw	r3, #540	; 0x21c
/*..........................................................................*/
void QF_init(void) {                                          /* see NOTE01 */
    extern uint_t QF_maxPool_;
    extern QTimeEvt QF_timeEvtHead_[QF_MAX_TICK_RATE];

    QK_intNest_  = (uint_t)0;                           /* no nesting level */
 8001fb6:	2200      	movs	r2, #0
    QK_currPrio_ = (uint8_t)(QF_MAX_ACTIVE + 1);        /* scheduler locked */
#ifndef QK_NO_MUTEX
    QK_ceilingPrio_ = (uint8_t)0;
 8001fb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
/*..........................................................................*/
void QF_init(void) {                                          /* see NOTE01 */
    extern uint_t QF_maxPool_;
    extern QTimeEvt QF_timeEvtHead_[QF_MAX_TICK_RATE];

    QK_intNest_  = (uint_t)0;                           /* no nesting level */
 8001fbc:	f2c2 0700 	movt	r7, #8192	; 0x2000
    QK_currPrio_ = (uint8_t)(QF_MAX_ACTIVE + 1);        /* scheduler locked */
 8001fc0:	f2c2 0500 	movt	r5, #8192	; 0x2000
#ifndef QK_NO_MUTEX
    QK_ceilingPrio_ = (uint8_t)0;
#endif
    QF_maxPool_  = (uint_t)0;
    QF_bzero(&QK_readySet_,       (uint_t)sizeof(QK_readySet_));
 8001fc4:	f240 1024 	movw	r0, #292	; 0x124
    QK_intNest_  = (uint_t)0;                           /* no nesting level */
    QK_currPrio_ = (uint8_t)(QF_MAX_ACTIVE + 1);        /* scheduler locked */
#ifndef QK_NO_MUTEX
    QK_ceilingPrio_ = (uint8_t)0;
#endif
    QF_maxPool_  = (uint_t)0;
 8001fc8:	6032      	str	r2, [r6, #0]
    QF_bzero(&QK_readySet_,       (uint_t)sizeof(QK_readySet_));
 8001fca:	2109      	movs	r1, #9
 8001fcc:	f2c2 0000 	movt	r0, #8192	; 0x2000
void QF_init(void) {                                          /* see NOTE01 */
    extern uint_t QF_maxPool_;
    extern QTimeEvt QF_timeEvtHead_[QF_MAX_TICK_RATE];

    QK_intNest_  = (uint_t)0;                           /* no nesting level */
    QK_currPrio_ = (uint8_t)(QF_MAX_ACTIVE + 1);        /* scheduler locked */
 8001fd0:	2621      	movs	r6, #33	; 0x21
/*..........................................................................*/
void QF_init(void) {                                          /* see NOTE01 */
    extern uint_t QF_maxPool_;
    extern QTimeEvt QF_timeEvtHead_[QF_MAX_TICK_RATE];

    QK_intNest_  = (uint_t)0;                           /* no nesting level */
 8001fd2:	603a      	str	r2, [r7, #0]
    QK_currPrio_ = (uint8_t)(QF_MAX_ACTIVE + 1);        /* scheduler locked */
 8001fd4:	702e      	strb	r6, [r5, #0]
#ifndef QK_NO_MUTEX
    QK_ceilingPrio_ = (uint8_t)0;
 8001fd6:	701a      	strb	r2, [r3, #0]
#endif
    QF_maxPool_  = (uint_t)0;
    QF_bzero(&QK_readySet_,       (uint_t)sizeof(QK_readySet_));
 8001fd8:	f000 f9ac 	bl	8002334 <QF_bzero>
    QF_bzero(&QF_timeEvtHead_[0], (uint_t)sizeof(QF_timeEvtHead_));
 8001fdc:	f240 1078 	movw	r0, #376	; 0x178
 8001fe0:	2120      	movs	r1, #32
 8001fe2:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001fe6:	f000 f9a5 	bl	8002334 <QF_bzero>
    QF_bzero(&QF_active_[0],      (uint_t)sizeof(QF_active_));
 8001fea:	f240 1098 	movw	r0, #408	; 0x198
 8001fee:	2184      	movs	r1, #132	; 0x84
 8001ff0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001ff4:	f000 f99e 	bl	8002334 <QF_bzero>

    QK_init();                              /* might be defined in assembly */
 8001ff8:	f000 ff72 	bl	8002ee0 <QK_init>
 8001ffc:	4620      	mov	r0, r4
 8001ffe:	4641      	mov	r1, r8
}
 8002000:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002004:	f7fe be32 	b.w	8000c6c <__cyg_profile_func_exit>

08002008 <QF_poolInit>:
uint_t QF_maxPool_;                    /* number of initialized event pools */

/*..........................................................................*/
void QF_poolInit(void * const poolSto, uint_t const poolSize,
                 uint_t const evtSize)
{
 8002008:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
                      /* cannot exceed the number of available memory pools */
    Q_REQUIRE(QF_maxPool_ < (uint_t)Q_DIM(QF_pool_));
 800200c:	4d1a      	ldr	r5, [pc, #104]	; (8002078 <QF_poolInit+0x70>)
uint_t QF_maxPool_;                    /* number of initialized event pools */

/*..........................................................................*/
void QF_poolInit(void * const poolSto, uint_t const poolSize,
                 uint_t const evtSize)
{
 800200e:	4682      	mov	sl, r0
 8002010:	4689      	mov	r9, r1
 8002012:	481a      	ldr	r0, [pc, #104]	; (800207c <QF_poolInit+0x74>)
 8002014:	4671      	mov	r1, lr
 8002016:	4676      	mov	r6, lr
 8002018:	4617      	mov	r7, r2
 800201a:	f7fe fdbf 	bl	8000b9c <__cyg_profile_func_enter>
                      /* cannot exceed the number of available memory pools */
    Q_REQUIRE(QF_maxPool_ < (uint_t)Q_DIM(QF_pool_));
 800201e:	682c      	ldr	r4, [r5, #0]
 8002020:	2c02      	cmp	r4, #2
 8002022:	d822      	bhi.n	800206a <QF_poolInit+0x62>
            /* please initialize event pools in ascending order of evtSize: */
    Q_REQUIRE((QF_maxPool_ == (uint_t)0)
 8002024:	f8df 805c 	ldr.w	r8, [pc, #92]	; 8002084 <QF_poolInit+0x7c>
 8002028:	b13c      	cbz	r4, 800203a <QF_poolInit+0x32>
 800202a:	1e63      	subs	r3, r4, #1
 800202c:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8002030:	eb08 0180 	add.w	r1, r8, r0, lsl #2
 8002034:	898a      	ldrh	r2, [r1, #12]
 8002036:	42ba      	cmp	r2, r7
 8002038:	d211      	bcs.n	800205e <QF_poolInit+0x56>
             || (QF_EPOOL_EVENT_SIZE_(QF_pool_[QF_maxPool_ - (uint_t)1])
                 < evtSize));
                /* perfom the platform-dependent initialization of the pool */
    QF_EPOOL_INIT_(QF_pool_[QF_maxPool_],
 800203a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800203e:	eb08 0083 	add.w	r0, r8, r3, lsl #2
 8002042:	4651      	mov	r1, sl
 8002044:	464a      	mov	r2, r9
 8002046:	463b      	mov	r3, r7
 8002048:	f000 f89c 	bl	8002184 <QMPool_init>
                   poolSto, poolSize, evtSize);
    ++QF_maxPool_;                                         /* one more pool */
 800204c:	6829      	ldr	r1, [r5, #0]
 800204e:	480b      	ldr	r0, [pc, #44]	; (800207c <QF_poolInit+0x74>)
 8002050:	1c4a      	adds	r2, r1, #1
 8002052:	4631      	mov	r1, r6
 8002054:	602a      	str	r2, [r5, #0]
}
 8002056:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800205a:	f7fe be07 	b.w	8000c6c <__cyg_profile_func_exit>
                 uint_t const evtSize)
{
                      /* cannot exceed the number of available memory pools */
    Q_REQUIRE(QF_maxPool_ < (uint_t)Q_DIM(QF_pool_));
            /* please initialize event pools in ascending order of evtSize: */
    Q_REQUIRE((QF_maxPool_ == (uint_t)0)
 800205e:	4808      	ldr	r0, [pc, #32]	; (8002080 <QF_poolInit+0x78>)
 8002060:	213b      	movs	r1, #59	; 0x3b
 8002062:	f7fe fa07 	bl	8000474 <Q_onAssert>
 8002066:	682c      	ldr	r4, [r5, #0]
 8002068:	e7e7      	b.n	800203a <QF_poolInit+0x32>
/*..........................................................................*/
void QF_poolInit(void * const poolSto, uint_t const poolSize,
                 uint_t const evtSize)
{
                      /* cannot exceed the number of available memory pools */
    Q_REQUIRE(QF_maxPool_ < (uint_t)Q_DIM(QF_pool_));
 800206a:	4805      	ldr	r0, [pc, #20]	; (8002080 <QF_poolInit+0x78>)
 800206c:	2137      	movs	r1, #55	; 0x37
 800206e:	f7fe fa01 	bl	8000474 <Q_onAssert>
 8002072:	682c      	ldr	r4, [r5, #0]
 8002074:	e7d6      	b.n	8002024 <QF_poolInit+0x1c>
 8002076:	bf00      	nop
 8002078:	20000174 	.word	0x20000174
 800207c:	08002009 	.word	0x08002009
 8002080:	08002f8c 	.word	0x08002f8c
 8002084:	20000138 	.word	0x20000138

08002088 <QF_noTimeEvtsActiveX>:
        QF_CRIT_ENTRY_();             /* re-enter crit. section to continue */
    }
    QF_CRIT_EXIT_();
}
/*..........................................................................*/
uint8_t QF_noTimeEvtsActiveX(uint8_t const tickRate) {        /* see NOTE03 */
 8002088:	b538      	push	{r3, r4, r5, lr}
 800208a:	4671      	mov	r1, lr
 800208c:	4605      	mov	r5, r0
 800208e:	480e      	ldr	r0, [pc, #56]	; (80020c8 <QF_noTimeEvtsActiveX+0x40>)
 8002090:	4674      	mov	r4, lr
 8002092:	f7fe fd83 	bl	8000b9c <__cyg_profile_func_enter>
    uint8_t inactive;

    Q_REQUIRE(tickRate < (uint8_t)QF_MAX_TICK_RATE);    /* must be in range */
 8002096:	2d01      	cmp	r5, #1
 8002098:	d903      	bls.n	80020a2 <QF_noTimeEvtsActiveX+0x1a>
 800209a:	480c      	ldr	r0, [pc, #48]	; (80020cc <QF_noTimeEvtsActiveX+0x44>)
 800209c:	2187      	movs	r1, #135	; 0x87
 800209e:	f7fe f9e9 	bl	8000474 <Q_onAssert>

    if (QF_timeEvtHead_[tickRate].next != (QTimeEvt *)0) {
 80020a2:	4b0b      	ldr	r3, [pc, #44]	; (80020d0 <QF_noTimeEvtsActiveX+0x48>)
 80020a4:	eb03 1005 	add.w	r0, r3, r5, lsl #4
 80020a8:	6841      	ldr	r1, [r0, #4]
 80020aa:	b131      	cbz	r1, 80020ba <QF_noTimeEvtsActiveX+0x32>
        inactive = (uint8_t)0;
 80020ac:	2500      	movs	r5, #0
 80020ae:	4806      	ldr	r0, [pc, #24]	; (80020c8 <QF_noTimeEvtsActiveX+0x40>)
 80020b0:	4621      	mov	r1, r4
 80020b2:	f7fe fddb 	bl	8000c6c <__cyg_profile_func_exit>
    }
    else {
        inactive = (uint8_t)1;
    }
    return inactive;
}
 80020b6:	4628      	mov	r0, r5
 80020b8:	bd38      	pop	{r3, r4, r5, pc}
    Q_REQUIRE(tickRate < (uint8_t)QF_MAX_TICK_RATE);    /* must be in range */

    if (QF_timeEvtHead_[tickRate].next != (QTimeEvt *)0) {
        inactive = (uint8_t)0;
    }
    else if ((QF_timeEvtHead_[tickRate].act != (void *)0)) {
 80020ba:	6882      	ldr	r2, [r0, #8]
    uint8_t inactive;

    Q_REQUIRE(tickRate < (uint8_t)QF_MAX_TICK_RATE);    /* must be in range */

    if (QF_timeEvtHead_[tickRate].next != (QTimeEvt *)0) {
        inactive = (uint8_t)0;
 80020bc:	f1d2 0501 	rsbs	r5, r2, #1
 80020c0:	bf38      	it	cc
 80020c2:	2500      	movcc	r5, #0
 80020c4:	e7f3      	b.n	80020ae <QF_noTimeEvtsActiveX+0x26>
 80020c6:	bf00      	nop
 80020c8:	08002089 	.word	0x08002089
 80020cc:	08002f94 	.word	0x08002f94
 80020d0:	20000178 	.word	0x20000178

080020d4 <QF_tickX_>:
#ifndef Q_SPY
void QF_tickX_(uint8_t const tickRate)                        /* see NOTE01 */
#else
void QF_tickX_(uint8_t const tickRate, void const * const sender)
#endif
{
 80020d4:	b570      	push	{r4, r5, r6, lr}
 80020d6:	4671      	mov	r1, lr
 80020d8:	4604      	mov	r4, r0
 80020da:	4828      	ldr	r0, [pc, #160]	; (800217c <QF_tickX_+0xa8>)
 80020dc:	4676      	mov	r6, lr
 80020de:	f7fe fd5d 	bl	8000b9c <__cyg_profile_func_enter>
    QTimeEvt *prev = &QF_timeEvtHead_[tickRate];
 80020e2:	4b27      	ldr	r3, [pc, #156]	; (8002180 <QF_tickX_+0xac>)
 80020e4:	eb03 1404 	add.w	r4, r3, r4, lsl #4
    QF_CRIT_STAT_

    QF_CRIT_ENTRY_();
 80020e8:	203f      	movs	r0, #63	; 0x3f
 80020ea:	f380 8811 	msr	BASEPRI, r0
    QS_END_NOCRIT_()

    for ( ; ; ) {
        QTimeEvt *t = prev->next;        /* advance down the time evt. list */
        if (t == (QTimeEvt *)0) {                       /* end of the list? */
            if (QF_timeEvtHead_[tickRate].act != (void *)0) { /* new armed? */
 80020ee:	4625      	mov	r5, r4
 80020f0:	e00c      	b.n	800210c <QF_tickX_+0x38>
                break;          /* all currently armed time evts. processed */
            }
        }

        if (t->ctr == (QTimeEvtCtr)0) { /* time evt. scheduled for removal? */
            prev->next = t->next;
 80020f2:	6848      	ldr	r0, [r1, #4]
 80020f4:	6060      	str	r0, [r4, #4]
            t->super.refCtr_ &= (uint8_t)0x7F;          /* mark as unlinked */
 80020f6:	78ca      	ldrb	r2, [r1, #3]
 80020f8:	f002 037f 	and.w	r3, r2, #127	; 0x7f
 80020fc:	70cb      	strb	r3, [r1, #3]
            /* do NOT advance the prev pointer */
            QF_CRIT_EXIT_();        /* exit crit. section to reduce latency */
 80020fe:	2000      	movs	r0, #0
 8002100:	f380 8811 	msr	BASEPRI, r0
            QF_CRIT_EXIT_NOP();                               /* see NOTE02 */
 8002104:	bf00      	nop
                prev = t;                     /* advance to this time event */
                QF_CRIT_EXIT_();    /* exit crit. section to reduce latency */
                QF_CRIT_EXIT_NOP();                           /* see NOTE02 */
            }
        }
        QF_CRIT_ENTRY_();             /* re-enter crit. section to continue */
 8002106:	203f      	movs	r0, #63	; 0x3f
 8002108:	f380 8811 	msr	BASEPRI, r0
        QS_TEC_((QTimeEvtCtr)(++prev->ctr));                    /* tick ctr */
        QS_U8_(tickRate);                                      /* tick rate */
    QS_END_NOCRIT_()

    for ( ; ; ) {
        QTimeEvt *t = prev->next;        /* advance down the time evt. list */
 800210c:	6861      	ldr	r1, [r4, #4]
        if (t == (QTimeEvt *)0) {                       /* end of the list? */
 800210e:	b1f1      	cbz	r1, 800214e <QF_tickX_+0x7a>
            else {
                break;          /* all currently armed time evts. processed */
            }
        }

        if (t->ctr == (QTimeEvtCtr)0) { /* time evt. scheduled for removal? */
 8002110:	898b      	ldrh	r3, [r1, #12]
 8002112:	b298      	uxth	r0, r3
 8002114:	2800      	cmp	r0, #0
 8002116:	d0ec      	beq.n	80020f2 <QF_tickX_+0x1e>
            /* do NOT advance the prev pointer */
            QF_CRIT_EXIT_();        /* exit crit. section to reduce latency */
            QF_CRIT_EXIT_NOP();                               /* see NOTE02 */
        }
        else {
            --t->ctr;
 8002118:	898a      	ldrh	r2, [r1, #12]
 800211a:	1e53      	subs	r3, r2, #1
 800211c:	b298      	uxth	r0, r3
 800211e:	8188      	strh	r0, [r1, #12]
            if (t->ctr == (QTimeEvtCtr)0) { /* is time evt about to expire? */
 8002120:	898a      	ldrh	r2, [r1, #12]
 8002122:	b293      	uxth	r3, r2
 8002124:	b96b      	cbnz	r3, 8002142 <QF_tickX_+0x6e>
                QActive *act = (QActive *)t->act; /* temporary for volatile */

                if (t->interval != (QTimeEvtCtr)0) {  /* periodic time evt? */
 8002126:	89c8      	ldrh	r0, [r1, #14]
            QF_CRIT_EXIT_NOP();                               /* see NOTE02 */
        }
        else {
            --t->ctr;
            if (t->ctr == (QTimeEvtCtr)0) { /* is time evt about to expire? */
                QActive *act = (QActive *)t->act; /* temporary for volatile */
 8002128:	688b      	ldr	r3, [r1, #8]

                if (t->interval != (QTimeEvtCtr)0) {  /* periodic time evt? */
 800212a:	b1b8      	cbz	r0, 800215c <QF_tickX_+0x88>
                    t->ctr = t->interval;           /* rearm the time event */
 800212c:	8188      	strh	r0, [r1, #12]
 800212e:	460c      	mov	r4, r1
                    QS_SIG_(t->super.sig);     /* signal of this time event */
                    QS_OBJ_(act);                          /* the target AO */
                    QS_U8_(tickRate);                          /* tick rate */
                QS_END_NOCRIT_()

                QF_CRIT_EXIT_();       /* exit crit. section before posting */
 8002130:	2000      	movs	r0, #0
 8002132:	f380 8811 	msr	BASEPRI, r0
                /* QACTIVE_POST() asserts internally if the queue overflows */
                QACTIVE_POST(act, &t->super, sender);
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	4618      	mov	r0, r3
 800213a:	68d3      	ldr	r3, [r2, #12]
 800213c:	2200      	movs	r2, #0
 800213e:	4798      	blx	r3
 8002140:	e7e1      	b.n	8002106 <QF_tickX_+0x32>
            }
            else {
                prev = t;                     /* advance to this time event */
                QF_CRIT_EXIT_();    /* exit crit. section to reduce latency */
 8002142:	2000      	movs	r0, #0
 8002144:	f380 8811 	msr	BASEPRI, r0
                QF_CRIT_EXIT_NOP();                           /* see NOTE02 */
 8002148:	bf00      	nop
 800214a:	460c      	mov	r4, r1
 800214c:	e7db      	b.n	8002106 <QF_tickX_+0x32>
    QS_END_NOCRIT_()

    for ( ; ; ) {
        QTimeEvt *t = prev->next;        /* advance down the time evt. list */
        if (t == (QTimeEvt *)0) {                       /* end of the list? */
            if (QF_timeEvtHead_[tickRate].act != (void *)0) { /* new armed? */
 800214e:	68a8      	ldr	r0, [r5, #8]
 8002150:	b158      	cbz	r0, 800216a <QF_tickX_+0x96>
                Q_ASSERT(prev != (QTimeEvt *)0);            /* sanity check */
                prev->next = QF_timeEvtHead_[tickRate].act;
 8002152:	68aa      	ldr	r2, [r5, #8]
 8002154:	6062      	str	r2, [r4, #4]
                QF_timeEvtHead_[tickRate].act = (void *)0;
 8002156:	60a9      	str	r1, [r5, #8]
                t = prev->next;                   /* switch to the new list */
 8002158:	6861      	ldr	r1, [r4, #4]
 800215a:	e7d9      	b.n	8002110 <QF_tickX_+0x3c>
                if (t->interval != (QTimeEvtCtr)0) {  /* periodic time evt? */
                    t->ctr = t->interval;           /* rearm the time event */
                    prev = t;                 /* advance to this time event */
                }
                else {         /* one-shot time event: automatically disarm */
                    prev->next = t->next;
 800215c:	684a      	ldr	r2, [r1, #4]
 800215e:	6062      	str	r2, [r4, #4]
                    t->super.refCtr_ &= (uint8_t)0x7F;  /* mark as unlinked */
 8002160:	78c8      	ldrb	r0, [r1, #3]
 8002162:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 8002166:	70ca      	strb	r2, [r1, #3]
 8002168:	e7e2      	b.n	8002130 <QF_tickX_+0x5c>
                QF_CRIT_EXIT_NOP();                           /* see NOTE02 */
            }
        }
        QF_CRIT_ENTRY_();             /* re-enter crit. section to continue */
    }
    QF_CRIT_EXIT_();
 800216a:	2000      	movs	r0, #0
 800216c:	f380 8811 	msr	BASEPRI, r0
 8002170:	4802      	ldr	r0, [pc, #8]	; (800217c <QF_tickX_+0xa8>)
 8002172:	4631      	mov	r1, r6
}
 8002174:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8002178:	f7fe bd78 	b.w	8000c6c <__cyg_profile_func_exit>
 800217c:	080020d5 	.word	0x080020d5
 8002180:	20000178 	.word	0x20000178

08002184 <QMPool_init>:
*/

/*..........................................................................*/
void QMPool_init(QMPool * const me, void * const poolSto,
                 uint_t poolSize, uint_t blockSize)
{
 8002184:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002188:	460f      	mov	r7, r1
 800218a:	4681      	mov	r9, r0
 800218c:	4671      	mov	r1, lr
 800218e:	482e      	ldr	r0, [pc, #184]	; (8002248 <QMPool_init+0xc4>)
 8002190:	46f0      	mov	r8, lr
 8002192:	4616      	mov	r6, r2
 8002194:	461d      	mov	r5, r3
 8002196:	f7fe fd01 	bl	8000b9c <__cyg_profile_func_enter>

    /* The memory block must be valid
    * and the poolSize must fit at least one free block
    * and the blockSize must not be too close to the top of the dynamic range
    */
    Q_REQUIRE((poolSto != (void *)0)
 800219a:	b10f      	cbz	r7, 80021a0 <QMPool_init+0x1c>
 800219c:	2e03      	cmp	r6, #3
 800219e:	d848      	bhi.n	8002232 <QMPool_init+0xae>
 80021a0:	482a      	ldr	r0, [pc, #168]	; (800224c <QMPool_init+0xc8>)
 80021a2:	213d      	movs	r1, #61	; 0x3d
 80021a4:	f7fe f966 	bl	8000474 <Q_onAssert>
                    > blockSize));

    me->free_head = poolSto;

     /* round up the blockSize to fit an integer # free blocks, no division */
    me->blockSize = (QMPoolSize)sizeof(QFreeBlock);  /* start with just one */
 80021a8:	2404      	movs	r4, #4
    nblocks = (uint_t)1;      /* # free blocks that fit in one memory block */
    while (me->blockSize < (QMPoolSize)blockSize) {
 80021aa:	b2a8      	uxth	r0, r5
 80021ac:	42a0      	cmp	r0, r4
    Q_REQUIRE((poolSto != (void *)0)
              && (poolSize >= (uint_t)sizeof(QFreeBlock))
              && ((uint_t)(blockSize + (uint_t)sizeof(QFreeBlock))
                    > blockSize));

    me->free_head = poolSto;
 80021ae:	f8c9 7000 	str.w	r7, [r9]

     /* round up the blockSize to fit an integer # free blocks, no division */
    me->blockSize = (QMPoolSize)sizeof(QFreeBlock);  /* start with just one */
 80021b2:	f8a9 400c 	strh.w	r4, [r9, #12]
    nblocks = (uint_t)1;      /* # free blocks that fit in one memory block */
    while (me->blockSize < (QMPoolSize)blockSize) {
 80021b6:	d945      	bls.n	8002244 <QMPool_init+0xc0>
        me->blockSize += (QMPoolSize)sizeof(QFreeBlock);
 80021b8:	2408      	movs	r4, #8
 80021ba:	1f42      	subs	r2, r0, #5
        ++nblocks;
 80021bc:	2502      	movs	r5, #2
    me->free_head = poolSto;

     /* round up the blockSize to fit an integer # free blocks, no division */
    me->blockSize = (QMPoolSize)sizeof(QFreeBlock);  /* start with just one */
    nblocks = (uint_t)1;      /* # free blocks that fit in one memory block */
    while (me->blockSize < (QMPoolSize)blockSize) {
 80021be:	4284      	cmp	r4, r0
 80021c0:	f3c2 0180 	ubfx	r1, r2, #2, #1
 80021c4:	d209      	bcs.n	80021da <QMPool_init+0x56>
 80021c6:	b119      	cbz	r1, 80021d0 <QMPool_init+0x4c>
        me->blockSize += (QMPoolSize)sizeof(QFreeBlock);
 80021c8:	240c      	movs	r4, #12
        ++nblocks;
 80021ca:	2503      	movs	r5, #3
    me->free_head = poolSto;

     /* round up the blockSize to fit an integer # free blocks, no division */
    me->blockSize = (QMPoolSize)sizeof(QFreeBlock);  /* start with just one */
    nblocks = (uint_t)1;      /* # free blocks that fit in one memory block */
    while (me->blockSize < (QMPoolSize)blockSize) {
 80021cc:	4284      	cmp	r4, r0
 80021ce:	d204      	bcs.n	80021da <QMPool_init+0x56>
        me->blockSize += (QMPoolSize)sizeof(QFreeBlock);
 80021d0:	3408      	adds	r4, #8
 80021d2:	b2a4      	uxth	r4, r4
        ++nblocks;
 80021d4:	3502      	adds	r5, #2
    me->free_head = poolSto;

     /* round up the blockSize to fit an integer # free blocks, no division */
    me->blockSize = (QMPoolSize)sizeof(QFreeBlock);  /* start with just one */
    nblocks = (uint_t)1;      /* # free blocks that fit in one memory block */
    while (me->blockSize < (QMPoolSize)blockSize) {
 80021d6:	4284      	cmp	r4, r0
 80021d8:	d3fa      	bcc.n	80021d0 <QMPool_init+0x4c>
 80021da:	f8a9 400c 	strh.w	r4, [r9, #12]
        ++nblocks;
    }
    blockSize = (uint_t)me->blockSize;  /* use rounded-up value from now on */

                  /* the pool buffer must fit at least one rounded-up block */
    Q_ASSERT(poolSize >= blockSize);
 80021de:	42b4      	cmp	r4, r6
 80021e0:	d82b      	bhi.n	800223a <QMPool_init+0xb6>

                             /* chain all blocks together in a free-list... */
    poolSize -= blockSize;                    /* don't count the last block */
 80021e2:	1b32      	subs	r2, r6, r4
    me->nTot  = (QMPoolCtr)1;         /* the last block already in the pool */
 80021e4:	2301      	movs	r3, #1
    fb = (QFreeBlock *)me->free_head; /* start at the head of the free list */
    while (poolSize >= blockSize) {
 80021e6:	4294      	cmp	r4, r2
                  /* the pool buffer must fit at least one rounded-up block */
    Q_ASSERT(poolSize >= blockSize);

                             /* chain all blocks together in a free-list... */
    poolSize -= blockSize;                    /* don't count the last block */
    me->nTot  = (QMPoolCtr)1;         /* the last block already in the pool */
 80021e8:	f8a9 300e 	strh.w	r3, [r9, #14]
    fb = (QFreeBlock *)me->free_head; /* start at the head of the free list */
 80021ec:	f8d9 3000 	ldr.w	r3, [r9]
    while (poolSize >= blockSize) {
 80021f0:	d80d      	bhi.n	800220e <QMPool_init+0x8a>
 80021f2:	00a9      	lsls	r1, r5, #2
 80021f4:	2502      	movs	r5, #2
 80021f6:	e000      	b.n	80021fa <QMPool_init+0x76>
 80021f8:	4635      	mov	r5, r6
        fb->next = &QF_PTR_AT_(fb, nblocks);/*point next link to next block */
 80021fa:	185e      	adds	r6, r3, r1
        fb = fb->next;                         /* advance to the next block */
        poolSize -= blockSize;            /* reduce the available pool size */
 80021fc:	1b12      	subs	r2, r2, r4
                             /* chain all blocks together in a free-list... */
    poolSize -= blockSize;                    /* don't count the last block */
    me->nTot  = (QMPoolCtr)1;         /* the last block already in the pool */
    fb = (QFreeBlock *)me->free_head; /* start at the head of the free list */
    while (poolSize >= blockSize) {
        fb->next = &QF_PTR_AT_(fb, nblocks);/*point next link to next block */
 80021fe:	601e      	str	r6, [r3, #0]
 8002200:	1c68      	adds	r0, r5, #1

                             /* chain all blocks together in a free-list... */
    poolSize -= blockSize;                    /* don't count the last block */
    me->nTot  = (QMPoolCtr)1;         /* the last block already in the pool */
    fb = (QFreeBlock *)me->free_head; /* start at the head of the free list */
    while (poolSize >= blockSize) {
 8002202:	4294      	cmp	r4, r2
        fb->next = &QF_PTR_AT_(fb, nblocks);/*point next link to next block */
        fb = fb->next;                         /* advance to the next block */
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	b286      	uxth	r6, r0

                             /* chain all blocks together in a free-list... */
    poolSize -= blockSize;                    /* don't count the last block */
    me->nTot  = (QMPoolCtr)1;         /* the last block already in the pool */
    fb = (QFreeBlock *)me->free_head; /* start at the head of the free list */
    while (poolSize >= blockSize) {
 8002208:	d9f6      	bls.n	80021f8 <QMPool_init+0x74>
 800220a:	f8a9 500e 	strh.w	r5, [r9, #14]
        poolSize -= blockSize;            /* reduce the available pool size */
        ++me->nTot;                /* increment the number of blocks so far */
    }

    fb->next  = (QFreeBlock *)0;            /* the last link points to NULL */
    me->nFree = me->nTot;                            /* all blocks are free */
 800220e:	f8b9 200e 	ldrh.w	r2, [r9, #14]
 8002212:	480d      	ldr	r0, [pc, #52]	; (8002248 <QMPool_init+0xc4>)
        fb = fb->next;                         /* advance to the next block */
        poolSize -= blockSize;            /* reduce the available pool size */
        ++me->nTot;                /* increment the number of blocks so far */
    }

    fb->next  = (QFreeBlock *)0;            /* the last link points to NULL */
 8002214:	2100      	movs	r1, #0
 8002216:	6019      	str	r1, [r3, #0]
 8002218:	4641      	mov	r1, r8
    me->nFree = me->nTot;                            /* all blocks are free */
 800221a:	f8a9 2010 	strh.w	r2, [r9, #16]
    me->nMin  = me->nTot;              /* the minimum number of free blocks */
 800221e:	f8a9 2012 	strh.w	r2, [r9, #18]
    me->start = poolSto;             /* the original start this pool buffer */
 8002222:	f8c9 7004 	str.w	r7, [r9, #4]
    me->end   = fb;                          /* the last block in this pool */
 8002226:	f8c9 3008 	str.w	r3, [r9, #8]

    QS_BEGIN_(QS_QF_MPOOL_INIT, QS_priv_.mpObjFilter, me->start)
        QS_OBJ_(me->start);              /* the memory managed by this pool */
        QS_MPC_(me->nTot);                    /* the total number of blocks */
    QS_END_()
}
 800222a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800222e:	f7fe bd1d 	b.w	8000c6c <__cyg_profile_func_exit>

    /* The memory block must be valid
    * and the poolSize must fit at least one free block
    * and the blockSize must not be too close to the top of the dynamic range
    */
    Q_REQUIRE((poolSto != (void *)0)
 8002232:	1d2b      	adds	r3, r5, #4
 8002234:	429d      	cmp	r5, r3
 8002236:	d3b7      	bcc.n	80021a8 <QMPool_init+0x24>
 8002238:	e7b2      	b.n	80021a0 <QMPool_init+0x1c>
        ++nblocks;
    }
    blockSize = (uint_t)me->blockSize;  /* use rounded-up value from now on */

                  /* the pool buffer must fit at least one rounded-up block */
    Q_ASSERT(poolSize >= blockSize);
 800223a:	4804      	ldr	r0, [pc, #16]	; (800224c <QMPool_init+0xc8>)
 800223c:	214b      	movs	r1, #75	; 0x4b
 800223e:	f7fe f919 	bl	8000474 <Q_onAssert>
 8002242:	e7ce      	b.n	80021e2 <QMPool_init+0x5e>

    me->free_head = poolSto;

     /* round up the blockSize to fit an integer # free blocks, no division */
    me->blockSize = (QMPoolSize)sizeof(QFreeBlock);  /* start with just one */
    nblocks = (uint_t)1;      /* # free blocks that fit in one memory block */
 8002244:	2501      	movs	r5, #1
 8002246:	e7ca      	b.n	80021de <QMPool_init+0x5a>
 8002248:	08002185 	.word	0x08002185
 800224c:	08002f9c 	.word	0x08002f9c

08002250 <QActive_post_>:
                      uint_t const margin)
#else
uint8_t QActive_post_(QActive * const me, QEvt const * const e,
                      uint_t const margin, void const * const sender)
#endif
{
 8002250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002252:	460d      	mov	r5, r1
 8002254:	4604      	mov	r4, r0
 8002256:	4671      	mov	r1, lr
 8002258:	4830      	ldr	r0, [pc, #192]	; (800231c <QActive_post_+0xcc>)
 800225a:	4676      	mov	r6, lr
 800225c:	4617      	mov	r7, r2
 800225e:	f7fe fc9d 	bl	8000b9c <__cyg_profile_func_enter>
    QEQueueCtr nFree;          /* temporary to avoid UB for volatile access */
    uint8_t status;
    QF_CRIT_STAT_

    Q_REQUIRE(e != (QEvt const *)0);                 /* event must be valid */
 8002262:	2d00      	cmp	r5, #0
 8002264:	d04c      	beq.n	8002300 <QActive_post_+0xb0>

    QF_CRIT_ENTRY_();
 8002266:	203f      	movs	r0, #63	; 0x3f
 8002268:	f380 8811 	msr	BASEPRI, r0
    nFree = me->eQueue.nFree;            /* get volatile into the temporary */
 800226c:	7de3      	ldrb	r3, [r4, #23]
    if (nFree > (QEQueueCtr)margin) {                  /* margin available? */
 800226e:	b2fa      	uxtb	r2, r7
 8002270:	4293      	cmp	r3, r2
 8002272:	d91c      	bls.n	80022ae <QActive_post_+0x5e>
            QS_2U8_(e->poolId_, e->refCtr_);         /* pool Id & ref Count */
            QS_EQC_(nFree);                       /* number of free entries */
            QS_EQC_(me->eQueue.nMin);         /* min number of free entries */
        QS_END_NOCRIT_()

        if (e->poolId_ != (uint8_t)0) {              /* is it a pool event? */
 8002274:	78a8      	ldrb	r0, [r5, #2]
 8002276:	b118      	cbz	r0, 8002280 <QActive_post_+0x30>
            QF_EVT_REF_CTR_INC_(e);      /* increment the reference counter */
 8002278:	78e9      	ldrb	r1, [r5, #3]
 800227a:	1c4a      	adds	r2, r1, #1
 800227c:	b2d0      	uxtb	r0, r2
 800227e:	70e8      	strb	r0, [r5, #3]
        }

        --nFree;                             /* one free entry just used up */
 8002280:	3b01      	subs	r3, #1
 8002282:	b2da      	uxtb	r2, r3
        me->eQueue.nFree = nFree;                    /* update the volatile */
        if (me->eQueue.nMin > nFree) {
 8002284:	7e21      	ldrb	r1, [r4, #24]
        if (e->poolId_ != (uint8_t)0) {              /* is it a pool event? */
            QF_EVT_REF_CTR_INC_(e);      /* increment the reference counter */
        }

        --nFree;                             /* one free entry just used up */
        me->eQueue.nFree = nFree;                    /* update the volatile */
 8002286:	75e2      	strb	r2, [r4, #23]
        if (me->eQueue.nMin > nFree) {
            me->eQueue.nMin = nFree;               /* update minimum so far */
        }

        if (me->eQueue.frontEvt == (QEvt const *)0) {       /* empty queue? */
 8002288:	68e0      	ldr	r0, [r4, #12]
            QF_EVT_REF_CTR_INC_(e);      /* increment the reference counter */
        }

        --nFree;                             /* one free entry just used up */
        me->eQueue.nFree = nFree;                    /* update the volatile */
        if (me->eQueue.nMin > nFree) {
 800228a:	4291      	cmp	r1, r2
            me->eQueue.nMin = nFree;               /* update minimum so far */
 800228c:	bf88      	it	hi
 800228e:	7622      	strbhi	r2, [r4, #24]
        }

        if (me->eQueue.frontEvt == (QEvt const *)0) {       /* empty queue? */
 8002290:	b300      	cbz	r0, 80022d4 <QActive_post_+0x84>
            me->eQueue.frontEvt = e;              /* deliver event directly */
            QACTIVE_EQUEUE_SIGNAL_(me);           /* signal the event queue */
        }
        else {     /* queue is not empty, insert event into the ring-buffer */
                                /* insert event into the ring buffer (FIFO) */
            QF_PTR_AT_(me->eQueue.ring, me->eQueue.head) = e;
 8002292:	7d61      	ldrb	r1, [r4, #21]
 8002294:	6923      	ldr	r3, [r4, #16]
 8002296:	f843 5021 	str.w	r5, [r3, r1, lsl #2]
            if (me->eQueue.head == (QEQueueCtr)0) {   /* need to wrap head? */
 800229a:	7d62      	ldrb	r2, [r4, #21]
 800229c:	b90a      	cbnz	r2, 80022a2 <QActive_post_+0x52>
                me->eQueue.head = me->eQueue.end;            /* wrap around */
 800229e:	7d20      	ldrb	r0, [r4, #20]
 80022a0:	7560      	strb	r0, [r4, #21]
            }
            --me->eQueue.head;      /* advance the head (counter clockwise) */
 80022a2:	7d61      	ldrb	r1, [r4, #21]
 80022a4:	1e4b      	subs	r3, r1, #1
 80022a6:	b2da      	uxtb	r2, r3
 80022a8:	7562      	strb	r2, [r4, #21]
        }
        status = (uint8_t)1;                   /* event posted successfully */
 80022aa:	2401      	movs	r4, #1
 80022ac:	e004      	b.n	80022b8 <QActive_post_+0x68>
    }
    else {
        Q_ASSERT(margin != (uint_t)0);      /* can tollerate dropping evts? */
 80022ae:	b167      	cbz	r7, 80022ca <QActive_post_+0x7a>
            QS_2U8_(e->poolId_, e->refCtr_);         /* pool Id & ref Count */
            QS_EQC_(nFree);                       /* number of free entries */
            QS_EQC_((QEQueueCtr)margin);                /* margin requested */
        QS_END_NOCRIT_()

        QF_gc(e);                      /* recycle the evnet to avoid a leak */
 80022b0:	4628      	mov	r0, r5
 80022b2:	f000 fa79 	bl	80027a8 <QF_gc>
        status = (uint8_t)0;                            /* event not posted */
 80022b6:	2400      	movs	r4, #0
    }
    QF_CRIT_EXIT_();
 80022b8:	2000      	movs	r0, #0
 80022ba:	f380 8811 	msr	BASEPRI, r0
 80022be:	4817      	ldr	r0, [pc, #92]	; (800231c <QActive_post_+0xcc>)
 80022c0:	4631      	mov	r1, r6
 80022c2:	f7fe fcd3 	bl	8000c6c <__cyg_profile_func_exit>

    return status;
}
 80022c6:	4620      	mov	r0, r4
 80022c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            --me->eQueue.head;      /* advance the head (counter clockwise) */
        }
        status = (uint8_t)1;                   /* event posted successfully */
    }
    else {
        Q_ASSERT(margin != (uint_t)0);      /* can tollerate dropping evts? */
 80022ca:	4815      	ldr	r0, [pc, #84]	; (8002320 <QActive_post_+0xd0>)
 80022cc:	2167      	movs	r1, #103	; 0x67
 80022ce:	f7fe f8d1 	bl	8000474 <Q_onAssert>
 80022d2:	e7ed      	b.n	80022b0 <QActive_post_+0x60>
            me->eQueue.nMin = nFree;               /* update minimum so far */
        }

        if (me->eQueue.frontEvt == (QEvt const *)0) {       /* empty queue? */
            me->eQueue.frontEvt = e;              /* deliver event directly */
            QACTIVE_EQUEUE_SIGNAL_(me);           /* signal the event queue */
 80022d4:	7f27      	ldrb	r7, [r4, #28]
 80022d6:	4813      	ldr	r0, [pc, #76]	; (8002324 <QActive_post_+0xd4>)
 80022d8:	4b13      	ldr	r3, [pc, #76]	; (8002328 <QActive_post_+0xd8>)
 80022da:	5dc1      	ldrb	r1, [r0, r7]
 80022dc:	4813      	ldr	r0, [pc, #76]	; (800232c <QActive_post_+0xdc>)
        if (me->eQueue.nMin > nFree) {
            me->eQueue.nMin = nFree;               /* update minimum so far */
        }

        if (me->eQueue.frontEvt == (QEvt const *)0) {       /* empty queue? */
            me->eQueue.frontEvt = e;              /* deliver event directly */
 80022de:	60e5      	str	r5, [r4, #12]
            QACTIVE_EQUEUE_SIGNAL_(me);           /* signal the event queue */
 80022e0:	185a      	adds	r2, r3, r1
 80022e2:	5dc4      	ldrb	r4, [r0, r7]
 80022e4:	7855      	ldrb	r5, [r2, #1]
 80022e6:	1841      	adds	r1, r0, r1
 80022e8:	432c      	orrs	r4, r5
 80022ea:	7054      	strb	r4, [r2, #1]
 80022ec:	7818      	ldrb	r0, [r3, #0]
 80022ee:	784a      	ldrb	r2, [r1, #1]
 80022f0:	ea40 0402 	orr.w	r4, r0, r2
 80022f4:	701c      	strb	r4, [r3, #0]
 80022f6:	4b0e      	ldr	r3, [pc, #56]	; (8002330 <QActive_post_+0xe0>)
 80022f8:	6819      	ldr	r1, [r3, #0]
 80022fa:	b131      	cbz	r1, 800230a <QActive_post_+0xba>
            if (me->eQueue.head == (QEQueueCtr)0) {   /* need to wrap head? */
                me->eQueue.head = me->eQueue.end;            /* wrap around */
            }
            --me->eQueue.head;      /* advance the head (counter clockwise) */
        }
        status = (uint8_t)1;                   /* event posted successfully */
 80022fc:	2401      	movs	r4, #1
 80022fe:	e7db      	b.n	80022b8 <QActive_post_+0x68>
{
    QEQueueCtr nFree;          /* temporary to avoid UB for volatile access */
    uint8_t status;
    QF_CRIT_STAT_

    Q_REQUIRE(e != (QEvt const *)0);                 /* event must be valid */
 8002300:	4807      	ldr	r0, [pc, #28]	; (8002320 <QActive_post_+0xd0>)
 8002302:	213e      	movs	r1, #62	; 0x3e
 8002304:	f7fe f8b6 	bl	8000474 <Q_onAssert>
 8002308:	e7ad      	b.n	8002266 <QActive_post_+0x16>
            me->eQueue.nMin = nFree;               /* update minimum so far */
        }

        if (me->eQueue.frontEvt == (QEvt const *)0) {       /* empty queue? */
            me->eQueue.frontEvt = e;              /* deliver event directly */
            QACTIVE_EQUEUE_SIGNAL_(me);           /* signal the event queue */
 800230a:	f000 fbdb 	bl	8002ac4 <QK_schedPrio_>
 800230e:	2800      	cmp	r0, #0
 8002310:	d0f4      	beq.n	80022fc <QActive_post_+0xac>
 8002312:	f000 fb7b 	bl	8002a0c <QK_sched_>
            if (me->eQueue.head == (QEQueueCtr)0) {   /* need to wrap head? */
                me->eQueue.head = me->eQueue.end;            /* wrap around */
            }
            --me->eQueue.head;      /* advance the head (counter clockwise) */
        }
        status = (uint8_t)1;                   /* event posted successfully */
 8002316:	2401      	movs	r4, #1
 8002318:	e7ce      	b.n	80022b8 <QActive_post_+0x68>
 800231a:	bf00      	nop
 800231c:	08002251 	.word	0x08002251
 8002320:	08002fa8 	.word	0x08002fa8
 8002324:	08002fd4 	.word	0x08002fd4
 8002328:	20000124 	.word	0x20000124
 800232c:	0800305c 	.word	0x0800305c
 8002330:	20000130 	.word	0x20000130

08002334 <QF_bzero>:
* MISRA-C:2004 required rule 17.4 (pointer arithmetic used).
*/
#define QF_PTR_INC_(p_) (++(p_))

/*..........................................................................*/
void QF_bzero(void * const start, uint_t len) {
 8002334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002336:	460d      	mov	r5, r1
 8002338:	4606      	mov	r6, r0
 800233a:	4671      	mov	r1, lr
 800233c:	4810      	ldr	r0, [pc, #64]	; (8002380 <QF_bzero+0x4c>)
 800233e:	4677      	mov	r7, lr
 8002340:	f7fe fc2c 	bl	8000b9c <__cyg_profile_func_enter>
    uint8_t *ptr = (uint8_t *)start;
    while (len != (uint_t)0) {
 8002344:	b1b5      	cbz	r5, 8002374 <QF_bzero+0x40>
        *ptr = (uint8_t)0;
 8002346:	4633      	mov	r3, r6
 8002348:	2400      	movs	r4, #0
 800234a:	f803 4b01 	strb.w	r4, [r3], #1
* MISRA-C:2004 required rule 17.4 (pointer arithmetic used).
*/
#define QF_PTR_INC_(p_) (++(p_))

/*..........................................................................*/
void QF_bzero(void * const start, uint_t len) {
 800234e:	1975      	adds	r5, r6, r5
 8002350:	43f6      	mvns	r6, r6
 8002352:	19a8      	adds	r0, r5, r6
    uint8_t *ptr = (uint8_t *)start;
    while (len != (uint_t)0) {
 8002354:	42ab      	cmp	r3, r5
 8002356:	f000 0601 	and.w	r6, r0, #1
 800235a:	d00b      	beq.n	8002374 <QF_bzero+0x40>
 800235c:	b11e      	cbz	r6, 8002366 <QF_bzero+0x32>
        *ptr = (uint8_t)0;
 800235e:	f803 4b01 	strb.w	r4, [r3], #1
#define QF_PTR_INC_(p_) (++(p_))

/*..........................................................................*/
void QF_bzero(void * const start, uint_t len) {
    uint8_t *ptr = (uint8_t *)start;
    while (len != (uint_t)0) {
 8002362:	42ab      	cmp	r3, r5
 8002364:	d006      	beq.n	8002374 <QF_bzero+0x40>
        *ptr = (uint8_t)0;
 8002366:	461a      	mov	r2, r3
 8002368:	f802 4b01 	strb.w	r4, [r2], #1
 800236c:	705c      	strb	r4, [r3, #1]
        QF_PTR_INC_(ptr);
 800236e:	1c53      	adds	r3, r2, #1
#define QF_PTR_INC_(p_) (++(p_))

/*..........................................................................*/
void QF_bzero(void * const start, uint_t len) {
    uint8_t *ptr = (uint8_t *)start;
    while (len != (uint_t)0) {
 8002370:	42ab      	cmp	r3, r5
 8002372:	d1f8      	bne.n	8002366 <QF_bzero+0x32>
 8002374:	4802      	ldr	r0, [pc, #8]	; (8002380 <QF_bzero+0x4c>)
 8002376:	4639      	mov	r1, r7
        *ptr = (uint8_t)0;
        QF_PTR_INC_(ptr);
        --len;
    }
}
 8002378:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800237c:	f7fe bc76 	b.w	8000c6c <__cyg_profile_func_exit>
 8002380:	08002335 	.word	0x08002335

08002384 <QF_remove_>:
    QS_END_NOCRIT_()

    QF_CRIT_EXIT_();
}
/*..........................................................................*/
void QF_remove_(QActive const * const a) {
 8002384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002386:	4607      	mov	r7, r0
 8002388:	4671      	mov	r1, lr
 800238a:	4810      	ldr	r0, [pc, #64]	; (80023cc <QF_remove_+0x48>)
 800238c:	4e10      	ldr	r6, [pc, #64]	; (80023d0 <QF_remove_+0x4c>)
 800238e:	4675      	mov	r5, lr
 8002390:	f7fe fc04 	bl	8000b9c <__cyg_profile_func_enter>
    uint8_t p = a->prio;
 8002394:	7f3c      	ldrb	r4, [r7, #28]
    QF_CRIT_STAT_

    Q_REQUIRE(((uint8_t)0 < p) && (p <= (uint8_t)QF_MAX_ACTIVE)
 8002396:	1e63      	subs	r3, r4, #1
 8002398:	2b1f      	cmp	r3, #31
 800239a:	d803      	bhi.n	80023a4 <QF_remove_+0x20>
 800239c:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80023a0:	42b8      	cmp	r0, r7
 80023a2:	d003      	beq.n	80023ac <QF_remove_+0x28>
 80023a4:	480b      	ldr	r0, [pc, #44]	; (80023d4 <QF_remove_+0x50>)
 80023a6:	214b      	movs	r1, #75	; 0x4b
 80023a8:	f7fe f864 	bl	8000474 <Q_onAssert>
              && (QF_active_[p] == a));

    QF_CRIT_ENTRY_();
 80023ac:	203f      	movs	r0, #63	; 0x3f
 80023ae:	f380 8811 	msr	BASEPRI, r0

    QF_active_[p] = (QActive *)0;             /* free-up the priority level */
 80023b2:	2100      	movs	r1, #0
 80023b4:	f846 1024 	str.w	r1, [r6, r4, lsl #2]
        QS_TIME_();                                            /* timestamp */
        QS_OBJ_(a);                                    /* the active object */
        QS_U8_(p);                     /* the priority of the active object */
    QS_END_NOCRIT_()

    QF_CRIT_EXIT_();
 80023b8:	2000      	movs	r0, #0
 80023ba:	f380 8811 	msr	BASEPRI, r0
 80023be:	4803      	ldr	r0, [pc, #12]	; (80023cc <QF_remove_+0x48>)
 80023c0:	4629      	mov	r1, r5
}
 80023c2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80023c6:	f7fe bc51 	b.w	8000c6c <__cyg_profile_func_exit>
 80023ca:	bf00      	nop
 80023cc:	08002385 	.word	0x08002385
 80023d0:	20000198 	.word	0x20000198
 80023d4:	08002fb0 	.word	0x08002fb0

080023d8 <QF_add_>:

/* public objects ----------------------------------------------------------*/
QActive *QF_active_[QF_MAX_ACTIVE + 1];      /* to be used by QF ports only */

/*..........................................................................*/
void QF_add_(QActive * const a) {
 80023d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023da:	4606      	mov	r6, r0
 80023dc:	4671      	mov	r1, lr
 80023de:	480f      	ldr	r0, [pc, #60]	; (800241c <QF_add_+0x44>)
 80023e0:	4f0f      	ldr	r7, [pc, #60]	; (8002420 <QF_add_+0x48>)
 80023e2:	4675      	mov	r5, lr
 80023e4:	f7fe fbda 	bl	8000b9c <__cyg_profile_func_enter>
    uint8_t p = a->prio;
 80023e8:	7f34      	ldrb	r4, [r6, #28]
    QF_CRIT_STAT_

    Q_REQUIRE(((uint8_t)0 < p) && (p <= (uint8_t)QF_MAX_ACTIVE)
 80023ea:	1e63      	subs	r3, r4, #1
 80023ec:	2b1f      	cmp	r3, #31
 80023ee:	d802      	bhi.n	80023f6 <QF_add_+0x1e>
 80023f0:	f857 0024 	ldr.w	r0, [r7, r4, lsl #2]
 80023f4:	b118      	cbz	r0, 80023fe <QF_add_+0x26>
 80023f6:	480b      	ldr	r0, [pc, #44]	; (8002424 <QF_add_+0x4c>)
 80023f8:	2137      	movs	r1, #55	; 0x37
 80023fa:	f7fe f83b 	bl	8000474 <Q_onAssert>
              && (QF_active_[p] == (QActive *)0));

    QF_CRIT_ENTRY_();
 80023fe:	203f      	movs	r0, #63	; 0x3f
 8002400:	f380 8811 	msr	BASEPRI, r0

    QF_active_[p] = a;       /* register the active object at this priority */
 8002404:	f847 6024 	str.w	r6, [r7, r4, lsl #2]
        QS_TIME_();                                            /* timestamp */
        QS_OBJ_(a);                                    /* the active object */
        QS_U8_(p);                     /* the priority of the active object */
    QS_END_NOCRIT_()

    QF_CRIT_EXIT_();
 8002408:	2000      	movs	r0, #0
 800240a:	f380 8811 	msr	BASEPRI, r0
 800240e:	4803      	ldr	r0, [pc, #12]	; (800241c <QF_add_+0x44>)
 8002410:	4629      	mov	r1, r5
}
 8002412:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002416:	f7fe bc29 	b.w	8000c6c <__cyg_profile_func_exit>
 800241a:	bf00      	nop
 800241c:	080023d9 	.word	0x080023d9
 8002420:	20000198 	.word	0x20000198
 8002424:	08002fb0 	.word	0x08002fb0

08002428 <QHsm_tran_>:
}

/*..........................................................................*/
static int_t QHsm_tran_(QHsm * const me,
                        QStateHandler path[QEP_MAX_NEST_DEPTH_])
{
 8002428:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800242c:	468a      	mov	sl, r1
 800242e:	4604      	mov	r4, r0
 8002430:	4671      	mov	r1, lr
 8002432:	4857      	ldr	r0, [pc, #348]	; (8002590 <QHsm_tran_+0x168>)
 8002434:	4677      	mov	r7, lr
 8002436:	f7fe fbb1 	bl	8000b9c <__cyg_profile_func_enter>
    int_t ip = (int_t)(-1);                  /* transition entry path index */
    int_t iq;                         /* helper transition entry path index */
    QStateHandler t = path[0];
 800243a:	f8da 3000 	ldr.w	r3, [sl]
    QStateHandler s = path[2];
 800243e:	f8da 9008 	ldr.w	r9, [sl, #8]
    QState r;
    QS_CRIT_STAT_

    if (s == t) {          /* (a) check source==target (transition to self) */
 8002442:	4599      	cmp	r9, r3
        QEP_EXIT_(s);                                    /* exit the source */
 8002444:	4620      	mov	r0, r4
    QStateHandler t = path[0];
    QStateHandler s = path[2];
    QState r;
    QS_CRIT_STAT_

    if (s == t) {          /* (a) check source==target (transition to self) */
 8002446:	d042      	beq.n	80024ce <QHsm_tran_+0xa6>
        QEP_EXIT_(s);                                    /* exit the source */
        ip = (int_t)0;                                  /* enter the target */
    }
    else {
        (void)QEP_TRIG_(t, QEP_EMPTY_SIG_);         /* superstate of target */
 8002448:	4952      	ldr	r1, [pc, #328]	; (8002594 <QHsm_tran_+0x16c>)
 800244a:	4798      	blx	r3

        t = me->temp.fun;
 800244c:	68a6      	ldr	r6, [r4, #8]
        if (s == t) {                    /* (b) check source==target->super */
 800244e:	45b1      	cmp	r9, r6
 8002450:	d039      	beq.n	80024c6 <QHsm_tran_+0x9e>
            ip = (int_t)0;                              /* enter the target */
        }
        else {
            (void)QEP_TRIG_(s, QEP_EMPTY_SIG_);        /* superstate of src */
 8002452:	4620      	mov	r0, r4
 8002454:	494f      	ldr	r1, [pc, #316]	; (8002594 <QHsm_tran_+0x16c>)
 8002456:	47c8      	blx	r9

                                  /* (c) check source->super==target->super */
            if (me->temp.fun == t) {
 8002458:	68a0      	ldr	r0, [r4, #8]
 800245a:	42b0      	cmp	r0, r6
 800245c:	d036      	beq.n	80024cc <QHsm_tran_+0xa4>
                QEP_EXIT_(s);                            /* exit the source */
                ip = (int_t)0;                          /* enter the target */
            }
            else {
                                         /* (d) check source->super==target */
                if (me->temp.fun == path[0]) {
 800245e:	f8da 2000 	ldr.w	r2, [sl]
 8002462:	4290      	cmp	r0, r2
 8002464:	f000 808d 	beq.w	8002582 <QHsm_tran_+0x15a>
                else { /* (e) check rest of source==target->super->super..
                        * and store the entry path along the way
                        */
                    iq = (int_t)0;           /* indicate that LCA not found */
                    ip = (int_t)1;       /* enter target and its superstate */
                    path[1] = t;           /* save the superstate of target */
 8002468:	f8ca 6004 	str.w	r6, [sl, #4]
                    t = me->temp.fun;                 /* save source->super */
                                               /* find target->super->super */
                    r = QEP_TRIG_(path[1], QEP_EMPTY_SIG_);
 800246c:	4620      	mov	r0, r4
 800246e:	4949      	ldr	r1, [pc, #292]	; (8002594 <QHsm_tran_+0x16c>)
                        * and store the entry path along the way
                        */
                    iq = (int_t)0;           /* indicate that LCA not found */
                    ip = (int_t)1;       /* enter target and its superstate */
                    path[1] = t;           /* save the superstate of target */
                    t = me->temp.fun;                 /* save source->super */
 8002470:	68a5      	ldr	r5, [r4, #8]
                                               /* find target->super->super */
                    r = QEP_TRIG_(path[1], QEP_EMPTY_SIG_);
 8002472:	47b0      	blx	r6
                    while (r == (QState)Q_RET_SUPER) {
 8002474:	2800      	cmp	r0, #0
 8002476:	d12f      	bne.n	80024d8 <QHsm_tran_+0xb0>
    me->state.fun = t;                   /* change the current active state */
    me->temp.fun  = t;                  /* mark the configuration as stable */
}

/*..........................................................................*/
static int_t QHsm_tran_(QHsm * const me,
 8002478:	f10a 0b04 	add.w	fp, sl, #4
                }
                else { /* (e) check rest of source==target->super->super..
                        * and store the entry path along the way
                        */
                    iq = (int_t)0;           /* indicate that LCA not found */
                    ip = (int_t)1;       /* enter target and its superstate */
 800247c:	f04f 0801 	mov.w	r8, #1
                    t = me->temp.fun;                 /* save source->super */
                                               /* find target->super->super */
                    r = QEP_TRIG_(path[1], QEP_EMPTY_SIG_);
                    while (r == (QState)Q_RET_SUPER) {
                        ++ip;
                        path[ip] = me->temp.fun;    /* store the entry path */
 8002480:	68a6      	ldr	r6, [r4, #8]
                            Q_ASSERT(ip < (int_t)QEP_MAX_NEST_DEPTH_);
                            --ip;                /* do not enter the source */
                            r = (QState)Q_RET_HANDLED;    /* terminate loop */
                        }
                        else {       /* it is not the source, keep going up */
                            r = QEP_TRIG_(me->temp.fun, QEP_EMPTY_SIG_);
 8002482:	4944      	ldr	r1, [pc, #272]	; (8002594 <QHsm_tran_+0x16c>)
                    t = me->temp.fun;                 /* save source->super */
                                               /* find target->super->super */
                    r = QEP_TRIG_(path[1], QEP_EMPTY_SIG_);
                    while (r == (QState)Q_RET_SUPER) {
                        ++ip;
                        path[ip] = me->temp.fun;    /* store the entry path */
 8002484:	f84b 6f04 	str.w	r6, [fp, #4]!
                        if (me->temp.fun == s) {       /* is it the source? */
 8002488:	68a3      	ldr	r3, [r4, #8]
 800248a:	454b      	cmp	r3, r9
                            Q_ASSERT(ip < (int_t)QEP_MAX_NEST_DEPTH_);
                            --ip;                /* do not enter the source */
                            r = (QState)Q_RET_HANDLED;    /* terminate loop */
                        }
                        else {       /* it is not the source, keep going up */
                            r = QEP_TRIG_(me->temp.fun, QEP_EMPTY_SIG_);
 800248c:	4620      	mov	r0, r4
                    path[1] = t;           /* save the superstate of target */
                    t = me->temp.fun;                 /* save source->super */
                                               /* find target->super->super */
                    r = QEP_TRIG_(path[1], QEP_EMPTY_SIG_);
                    while (r == (QState)Q_RET_SUPER) {
                        ++ip;
 800248e:	f108 0601 	add.w	r6, r8, #1
                        path[ip] = me->temp.fun;    /* store the entry path */
                        if (me->temp.fun == s) {       /* is it the source? */
 8002492:	d00a      	beq.n	80024aa <QHsm_tran_+0x82>
                            Q_ASSERT(ip < (int_t)QEP_MAX_NEST_DEPTH_);
                            --ip;                /* do not enter the source */
                            r = (QState)Q_RET_HANDLED;    /* terminate loop */
                        }
                        else {       /* it is not the source, keep going up */
                            r = QEP_TRIG_(me->temp.fun, QEP_EMPTY_SIG_);
 8002494:	4798      	blx	r3
                    path[1] = t;           /* save the superstate of target */
                    t = me->temp.fun;                 /* save source->super */
                                               /* find target->super->super */
                    r = QEP_TRIG_(path[1], QEP_EMPTY_SIG_);
                    while (r == (QState)Q_RET_SUPER) {
                        ++ip;
 8002496:	46b0      	mov	r8, r6
                    ip = (int_t)1;       /* enter target and its superstate */
                    path[1] = t;           /* save the superstate of target */
                    t = me->temp.fun;                 /* save source->super */
                                               /* find target->super->super */
                    r = QEP_TRIG_(path[1], QEP_EMPTY_SIG_);
                    while (r == (QState)Q_RET_SUPER) {
 8002498:	2800      	cmp	r0, #0
 800249a:	d0f1      	beq.n	8002480 <QHsm_tran_+0x58>
                        }
                    }
                    if (iq == (int_t)0) {         /* the LCA not found yet? */

                                            /* entry path must not overflow */
                        Q_ASSERT(ip < (int_t)QEP_MAX_NEST_DEPTH_);
 800249c:	2e05      	cmp	r6, #5
 800249e:	dd1c      	ble.n	80024da <QHsm_tran_+0xb2>
 80024a0:	483d      	ldr	r0, [pc, #244]	; (8002598 <QHsm_tran_+0x170>)
 80024a2:	21f1      	movs	r1, #241	; 0xf1
 80024a4:	f7fd ffe6 	bl	8000474 <Q_onAssert>
 80024a8:	e017      	b.n	80024da <QHsm_tran_+0xb2>
                        ++ip;
                        path[ip] = me->temp.fun;    /* store the entry path */
                        if (me->temp.fun == s) {       /* is it the source? */
                            iq = (int_t)1;       /* indicate that LCA found */
                                            /* entry path must not overflow */
                            Q_ASSERT(ip < (int_t)QEP_MAX_NEST_DEPTH_);
 80024aa:	2e05      	cmp	r6, #5
 80024ac:	dc06      	bgt.n	80024bc <QHsm_tran_+0x94>
 80024ae:	4838      	ldr	r0, [pc, #224]	; (8002590 <QHsm_tran_+0x168>)
 80024b0:	4639      	mov	r1, r7
 80024b2:	f7fe fbdb 	bl	8000c6c <__cyg_profile_func_exit>
                }
            }
        }
    }
    return ip;
}
 80024b6:	4640      	mov	r0, r8
 80024b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                        ++ip;
                        path[ip] = me->temp.fun;    /* store the entry path */
                        if (me->temp.fun == s) {       /* is it the source? */
                            iq = (int_t)1;       /* indicate that LCA found */
                                            /* entry path must not overflow */
                            Q_ASSERT(ip < (int_t)QEP_MAX_NEST_DEPTH_);
 80024bc:	4836      	ldr	r0, [pc, #216]	; (8002598 <QHsm_tran_+0x170>)
 80024be:	21e6      	movs	r1, #230	; 0xe6
 80024c0:	f7fd ffd8 	bl	8000474 <Q_onAssert>
 80024c4:	e7f3      	b.n	80024ae <QHsm_tran_+0x86>
    else {
        (void)QEP_TRIG_(t, QEP_EMPTY_SIG_);         /* superstate of target */

        t = me->temp.fun;
        if (s == t) {                    /* (b) check source==target->super */
            ip = (int_t)0;                              /* enter the target */
 80024c6:	f04f 0800 	mov.w	r8, #0
 80024ca:	e7f0      	b.n	80024ae <QHsm_tran_+0x86>
        else {
            (void)QEP_TRIG_(s, QEP_EMPTY_SIG_);        /* superstate of src */

                                  /* (c) check source->super==target->super */
            if (me->temp.fun == t) {
                QEP_EXIT_(s);                            /* exit the source */
 80024cc:	4620      	mov	r0, r4
 80024ce:	4933      	ldr	r1, [pc, #204]	; (800259c <QHsm_tran_+0x174>)
 80024d0:	47c8      	blx	r9
                ip = (int_t)0;                          /* enter the target */
 80024d2:	f04f 0800 	mov.w	r8, #0
 80024d6:	e7ea      	b.n	80024ae <QHsm_tran_+0x86>
                }
                else { /* (e) check rest of source==target->super->super..
                        * and store the entry path along the way
                        */
                    iq = (int_t)0;           /* indicate that LCA not found */
                    ip = (int_t)1;       /* enter target and its superstate */
 80024d8:	2601      	movs	r6, #1
                    if (iq == (int_t)0) {         /* the LCA not found yet? */

                                            /* entry path must not overflow */
                        Q_ASSERT(ip < (int_t)QEP_MAX_NEST_DEPTH_);

                        QEP_EXIT_(s);                    /* exit the source */
 80024da:	4930      	ldr	r1, [pc, #192]	; (800259c <QHsm_tran_+0x174>)
 80024dc:	4620      	mov	r0, r4
 80024de:	47c8      	blx	r9
    me->state.fun = t;                   /* change the current active state */
    me->temp.fun  = t;                  /* mark the configuration as stable */
}

/*..........................................................................*/
static int_t QHsm_tran_(QHsm * const me,
 80024e0:	1c71      	adds	r1, r6, #1
 80024e2:	eb0a 0a81 	add.w	sl, sl, r1, lsl #2
 80024e6:	4650      	mov	r0, sl
 80024e8:	46b0      	mov	r8, r6
                        *                  == target->super->super...
                        */
                        iq = ip;
                        r = (QState)Q_RET_IGNORED;         /* LCA NOT found */
                        do {
                            if (t == path[iq]) {        /* is this the LCA? */
 80024ea:	f850 2d04 	ldr.w	r2, [r0, #-4]!
 80024ee:	42aa      	cmp	r2, r5
 80024f0:	f006 0301 	and.w	r3, r6, #1
 80024f4:	d017      	beq.n	8002526 <QHsm_tran_+0xfe>
                                iq = (int_t)(-1);     /* terminate the loop */
                            }
                            else {
                                --iq;     /* try lower superstate of target */
                            }
                        } while (iq >= (int_t)0);
 80024f6:	f1b6 0801 	subs.w	r8, r6, #1
 80024fa:	d417      	bmi.n	800252c <QHsm_tran_+0x104>
 80024fc:	b133      	cbz	r3, 800250c <QHsm_tran_+0xe4>
                        *                  == target->super->super...
                        */
                        iq = ip;
                        r = (QState)Q_RET_IGNORED;         /* LCA NOT found */
                        do {
                            if (t == path[iq]) {        /* is this the LCA? */
 80024fe:	f850 1d04 	ldr.w	r1, [r0, #-4]!
 8002502:	42a9      	cmp	r1, r5
 8002504:	d00f      	beq.n	8002526 <QHsm_tran_+0xfe>
                                iq = (int_t)(-1);     /* terminate the loop */
                            }
                            else {
                                --iq;     /* try lower superstate of target */
                            }
                        } while (iq >= (int_t)0);
 8002506:	f1b8 0801 	subs.w	r8, r8, #1
 800250a:	d40f      	bmi.n	800252c <QHsm_tran_+0x104>
                        *                  == target->super->super...
                        */
                        iq = ip;
                        r = (QState)Q_RET_IGNORED;         /* LCA NOT found */
                        do {
                            if (t == path[iq]) {        /* is this the LCA? */
 800250c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8002510:	1f02      	subs	r2, r0, #4
 8002512:	42ab      	cmp	r3, r5
 8002514:	f1a2 0004 	sub.w	r0, r2, #4
 8002518:	d005      	beq.n	8002526 <QHsm_tran_+0xfe>
 800251a:	f852 1c04 	ldr.w	r1, [r2, #-4]
 800251e:	42a9      	cmp	r1, r5
                                                        /* do not enter LCA */
                                ip = (int_t)(iq - (int_t)1);
                                iq = (int_t)(-1);     /* terminate the loop */
                            }
                            else {
                                --iq;     /* try lower superstate of target */
 8002520:	f108 38ff 	add.w	r8, r8, #4294967295
                        *                  == target->super->super...
                        */
                        iq = ip;
                        r = (QState)Q_RET_IGNORED;         /* LCA NOT found */
                        do {
                            if (t == path[iq]) {        /* is this the LCA? */
 8002524:	d1ef      	bne.n	8002506 <QHsm_tran_+0xde>
                                r = (QState)Q_RET_HANDLED;     /* LCA found */
                                                        /* do not enter LCA */
                                ip = (int_t)(iq - (int_t)1);
 8002526:	f108 38ff 	add.w	r8, r8, #4294967295
 800252a:	e7c0      	b.n	80024ae <QHsm_tran_+0x86>
                            * for each target->super...
                            */
                            r = (QState)Q_RET_IGNORED;      /* keep looping */
                            do {
                                                       /* exit t unhandled? */
                                if (QEP_TRIG_(t, Q_EXIT_SIG)
 800252c:	4620      	mov	r0, r4
 800252e:	491b      	ldr	r1, [pc, #108]	; (800259c <QHsm_tran_+0x174>)
 8002530:	47a8      	blx	r5
 8002532:	2801      	cmp	r0, #1
 8002534:	d021      	beq.n	800257a <QHsm_tran_+0x152>
                                        QS_FUN_(t);
                                    QS_END_()

                                    (void)QEP_TRIG_(t, QEP_EMPTY_SIG_);
                                }
                                t = me->temp.fun;     /*  set to super of t */
 8002536:	68a5      	ldr	r5, [r4, #8]
                                iq = ip;
                                do {
                                    if (t == path[iq]) {/* is this LCA? */
 8002538:	f85a 1c04 	ldr.w	r1, [sl, #-4]
 800253c:	42a9      	cmp	r1, r5
                                    QS_END_()

                                    (void)QEP_TRIG_(t, QEP_EMPTY_SIG_);
                                }
                                t = me->temp.fun;     /*  set to super of t */
                                iq = ip;
 800253e:	4633      	mov	r3, r6
 8002540:	f006 0001 	and.w	r0, r6, #1
 8002544:	f1aa 0204 	sub.w	r2, sl, #4
                                do {
                                    if (t == path[iq]) {/* is this LCA? */
 8002548:	d014      	beq.n	8002574 <QHsm_tran_+0x14c>
                                        r = (QState)Q_RET_HANDLED;
                                    }
                                    else {
                                        --iq;
                                    }
                                } while (iq >= (int_t)0);
 800254a:	1e73      	subs	r3, r6, #1
 800254c:	d4ee      	bmi.n	800252c <QHsm_tran_+0x104>
 800254e:	b128      	cbz	r0, 800255c <QHsm_tran_+0x134>
                                    (void)QEP_TRIG_(t, QEP_EMPTY_SIG_);
                                }
                                t = me->temp.fun;     /*  set to super of t */
                                iq = ip;
                                do {
                                    if (t == path[iq]) {/* is this LCA? */
 8002550:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8002554:	42a9      	cmp	r1, r5
 8002556:	d00d      	beq.n	8002574 <QHsm_tran_+0x14c>
                                        r = (QState)Q_RET_HANDLED;
                                    }
                                    else {
                                        --iq;
                                    }
                                } while (iq >= (int_t)0);
 8002558:	3b01      	subs	r3, #1
 800255a:	d4e7      	bmi.n	800252c <QHsm_tran_+0x104>
                                    (void)QEP_TRIG_(t, QEP_EMPTY_SIG_);
                                }
                                t = me->temp.fun;     /*  set to super of t */
                                iq = ip;
                                do {
                                    if (t == path[iq]) {/* is this LCA? */
 800255c:	f852 1c04 	ldr.w	r1, [r2, #-4]
 8002560:	1f10      	subs	r0, r2, #4
 8002562:	42a9      	cmp	r1, r5
 8002564:	f1a0 0204 	sub.w	r2, r0, #4
 8002568:	d004      	beq.n	8002574 <QHsm_tran_+0x14c>
 800256a:	f850 1c04 	ldr.w	r1, [r0, #-4]
                                        ip = (int_t)(iq - (int_t)1);
                                        iq = (int_t)(-1);    /* break inner */
                                        r = (QState)Q_RET_HANDLED;
                                    }
                                    else {
                                        --iq;
 800256e:	3b01      	subs	r3, #1
                                    (void)QEP_TRIG_(t, QEP_EMPTY_SIG_);
                                }
                                t = me->temp.fun;     /*  set to super of t */
                                iq = ip;
                                do {
                                    if (t == path[iq]) {/* is this LCA? */
 8002570:	42a9      	cmp	r1, r5
 8002572:	d1f1      	bne.n	8002558 <QHsm_tran_+0x130>
                                                        /* do not enter LCA */
                                        ip = (int_t)(iq - (int_t)1);
 8002574:	f103 38ff 	add.w	r8, r3, #4294967295
 8002578:	e799      	b.n	80024ae <QHsm_tran_+0x86>
                                              QS_priv_.smObjFilter, me)
                                        QS_OBJ_(me);
                                        QS_FUN_(t);
                                    QS_END_()

                                    (void)QEP_TRIG_(t, QEP_EMPTY_SIG_);
 800257a:	4620      	mov	r0, r4
 800257c:	4905      	ldr	r1, [pc, #20]	; (8002594 <QHsm_tran_+0x16c>)
 800257e:	47a8      	blx	r5
 8002580:	e7d9      	b.n	8002536 <QHsm_tran_+0x10e>
                ip = (int_t)0;                          /* enter the target */
            }
            else {
                                         /* (d) check source->super==target */
                if (me->temp.fun == path[0]) {
                    QEP_EXIT_(s);                        /* exit the source */
 8002582:	4620      	mov	r0, r4
 8002584:	4905      	ldr	r1, [pc, #20]	; (800259c <QHsm_tran_+0x174>)
 8002586:	47c8      	blx	r9

/*..........................................................................*/
static int_t QHsm_tran_(QHsm * const me,
                        QStateHandler path[QEP_MAX_NEST_DEPTH_])
{
    int_t ip = (int_t)(-1);                  /* transition entry path index */
 8002588:	f04f 38ff 	mov.w	r8, #4294967295
 800258c:	e78f      	b.n	80024ae <QHsm_tran_+0x86>
 800258e:	bf00      	nop
 8002590:	08002429 	.word	0x08002429
 8002594:	080030c8 	.word	0x080030c8
 8002598:	08002fb8 	.word	0x08002fb8
 800259c:	080030d0 	.word	0x080030d0

080025a0 <QHsm_dispatch_>:

static int_t QHsm_tran_(QHsm * const me,
                        QStateHandler path[QEP_MAX_NEST_DEPTH_]);

/*..........................................................................*/
void QHsm_dispatch_(QHsm * const me, QEvt const * const e) {
 80025a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80025a4:	4604      	mov	r4, r0
 80025a6:	b087      	sub	sp, #28
 80025a8:	460f      	mov	r7, r1
 80025aa:	4858      	ldr	r0, [pc, #352]	; (800270c <QHsm_dispatch_+0x16c>)
 80025ac:	4671      	mov	r1, lr
 80025ae:	46f0      	mov	r8, lr
 80025b0:	f7fe faf4 	bl	8000b9c <__cyg_profile_func_enter>
    QStateHandler t = me->state.fun;
 80025b4:	6866      	ldr	r6, [r4, #4]
    QStateHandler s;
    QState r;
    QS_CRIT_STAT_

    Q_REQUIRE(t == me->temp.fun); /* the state configuration must be stable */
 80025b6:	68a5      	ldr	r5, [r4, #8]
 80025b8:	42b5      	cmp	r5, r6
 80025ba:	d004      	beq.n	80025c6 <QHsm_dispatch_+0x26>
 80025bc:	4854      	ldr	r0, [pc, #336]	; (8002710 <QHsm_dispatch_+0x170>)
 80025be:	2139      	movs	r1, #57	; 0x39
 80025c0:	f7fd ff58 	bl	8000474 <Q_onAssert>
 80025c4:	68a5      	ldr	r5, [r4, #8]
        QS_FUN_(t);                                    /* the current state */
    QS_END_()

    do {                             /* process the event hierarchically... */
        s = me->temp.fun;
        r = (*s)(me, e);                          /* invoke state handler s */
 80025c6:	4639      	mov	r1, r7
 80025c8:	4620      	mov	r0, r4
 80025ca:	47a8      	blx	r5

        if (r == (QState)Q_RET_UNHANDLED) {    /* unhandled due to a guard? */
 80025cc:	2802      	cmp	r0, #2
 80025ce:	d00c      	beq.n	80025ea <QHsm_dispatch_+0x4a>
                QS_FUN_(s);                            /* the current state */
            QS_END_()

            r = QEP_TRIG_(s, QEP_EMPTY_SIG_);       /* find superstate of s */
        }
    } while (r == (QState)Q_RET_SUPER);
 80025d0:	2800      	cmp	r0, #0
 80025d2:	d0f7      	beq.n	80025c4 <QHsm_dispatch_+0x24>

    if (r == (QState)Q_RET_TRAN) {                     /* transition taken? */
 80025d4:	2804      	cmp	r0, #4
 80025d6:	d00e      	beq.n	80025f6 <QHsm_dispatch_+0x56>

        }
#endif
    }

    me->state.fun = t;                   /* change the current active state */
 80025d8:	6066      	str	r6, [r4, #4]
    me->temp.fun  = t;                  /* mark the configuration as stable */
 80025da:	60a6      	str	r6, [r4, #8]
 80025dc:	484b      	ldr	r0, [pc, #300]	; (800270c <QHsm_dispatch_+0x16c>)
 80025de:	4641      	mov	r1, r8
 80025e0:	f7fe fb44 	bl	8000c6c <__cyg_profile_func_exit>
}
 80025e4:	b007      	add	sp, #28
 80025e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                QS_SIG_(e->sig);                 /* the signal of the event */
                QS_OBJ_(me);                   /* this state machine object */
                QS_FUN_(s);                            /* the current state */
            QS_END_()

            r = QEP_TRIG_(s, QEP_EMPTY_SIG_);       /* find superstate of s */
 80025ea:	4620      	mov	r0, r4
 80025ec:	4949      	ldr	r1, [pc, #292]	; (8002714 <QHsm_dispatch_+0x174>)
 80025ee:	47a8      	blx	r5
        }
    } while (r == (QState)Q_RET_SUPER);
 80025f0:	2800      	cmp	r0, #0
 80025f2:	d0e7      	beq.n	80025c4 <QHsm_dispatch_+0x24>
 80025f4:	e7ee      	b.n	80025d4 <QHsm_dispatch_+0x34>

    if (r == (QState)Q_RET_TRAN) {                     /* transition taken? */
        QStateHandler path[QEP_MAX_NEST_DEPTH_];
        int_t ip;

        path[0] = me->temp.fun;        /* save the target of the transition */
 80025f6:	68a3      	ldr	r3, [r4, #8]
        path[1] = t;
        path[2] = s;
 80025f8:	9502      	str	r5, [sp, #8]

        while (t != s) {    /* exit current state to transition source s... */
 80025fa:	42ae      	cmp	r6, r5

    if (r == (QState)Q_RET_TRAN) {                     /* transition taken? */
        QStateHandler path[QEP_MAX_NEST_DEPTH_];
        int_t ip;

        path[0] = me->temp.fun;        /* save the target of the transition */
 80025fc:	e88d 0048 	stmia.w	sp, {r3, r6}
        path[1] = t;
        path[2] = s;

        while (t != s) {    /* exit current state to transition source s... */
 8002600:	d103      	bne.n	800260a <QHsm_dispatch_+0x6a>
 8002602:	e00d      	b.n	8002620 <QHsm_dispatch_+0x80>
                    QS_FUN_(t);                         /* the exited state */
                QS_END_()

                (void)QEP_TRIG_(t, QEP_EMPTY_SIG_); /* find superstate of t */
            }
            t = me->temp.fun;              /* me->temp holds the superstate */
 8002604:	68a6      	ldr	r6, [r4, #8]

        path[0] = me->temp.fun;        /* save the target of the transition */
        path[1] = t;
        path[2] = s;

        while (t != s) {    /* exit current state to transition source s... */
 8002606:	42b5      	cmp	r5, r6
 8002608:	d00a      	beq.n	8002620 <QHsm_dispatch_+0x80>
            if (QEP_TRIG_(t, Q_EXIT_SIG) == (QState)Q_RET_HANDLED) {
 800260a:	4943      	ldr	r1, [pc, #268]	; (8002718 <QHsm_dispatch_+0x178>)
 800260c:	4620      	mov	r0, r4
 800260e:	47b0      	blx	r6
 8002610:	2801      	cmp	r0, #1
 8002612:	d1f7      	bne.n	8002604 <QHsm_dispatch_+0x64>
                QS_BEGIN_(QS_QEP_STATE_EXIT, QS_priv_.smObjFilter, me)
                    QS_OBJ_(me);               /* this state machine object */
                    QS_FUN_(t);                         /* the exited state */
                QS_END_()

                (void)QEP_TRIG_(t, QEP_EMPTY_SIG_); /* find superstate of t */
 8002614:	4620      	mov	r0, r4
 8002616:	493f      	ldr	r1, [pc, #252]	; (8002714 <QHsm_dispatch_+0x174>)
 8002618:	47b0      	blx	r6
            }
            t = me->temp.fun;              /* me->temp holds the superstate */
 800261a:	68a6      	ldr	r6, [r4, #8]

        path[0] = me->temp.fun;        /* save the target of the transition */
        path[1] = t;
        path[2] = s;

        while (t != s) {    /* exit current state to transition source s... */
 800261c:	42b5      	cmp	r5, r6
 800261e:	d1f4      	bne.n	800260a <QHsm_dispatch_+0x6a>
                (void)QEP_TRIG_(t, QEP_EMPTY_SIG_); /* find superstate of t */
            }
            t = me->temp.fun;              /* me->temp holds the superstate */
        }

        ip = QHsm_tran_(me, path);
 8002620:	4620      	mov	r0, r4
 8002622:	4669      	mov	r1, sp
 8002624:	f7ff ff00 	bl	8002428 <QHsm_tran_>

                    /* retrace the entry path in reverse (desired) order... */
        for (; ip >= (int_t)0; --ip) {
 8002628:	1e07      	subs	r7, r0, #0
 800262a:	db28      	blt.n	800267e <QHsm_dispatch_+0xde>
 800262c:	aa00      	add	r2, sp, #0

static int_t QHsm_tran_(QHsm * const me,
                        QStateHandler path[QEP_MAX_NEST_DEPTH_]);

/*..........................................................................*/
void QHsm_dispatch_(QHsm * const me, QEvt const * const e) {
 800262e:	1c7d      	adds	r5, r7, #1
 8002630:	eb02 0585 	add.w	r5, r2, r5, lsl #2

        ip = QHsm_tran_(me, path);

                    /* retrace the entry path in reverse (desired) order... */
        for (; ip >= (int_t)0; --ip) {
            QEP_ENTER_(path[ip]);                         /* enter path[ip] */
 8002634:	4620      	mov	r0, r4
 8002636:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800263a:	4938      	ldr	r1, [pc, #224]	; (800271c <QHsm_dispatch_+0x17c>)
 800263c:	f007 0901 	and.w	r9, r7, #1
 8002640:	4798      	blx	r3
        }

        ip = QHsm_tran_(me, path);

                    /* retrace the entry path in reverse (desired) order... */
        for (; ip >= (int_t)0; --ip) {
 8002642:	1e7e      	subs	r6, r7, #1
 8002644:	b1df      	cbz	r7, 800267e <QHsm_dispatch_+0xde>
 8002646:	f1b9 0f00 	cmp.w	r9, #0
 800264a:	d007      	beq.n	800265c <QHsm_dispatch_+0xbc>
            QEP_ENTER_(path[ip]);                         /* enter path[ip] */
 800264c:	f855 2d04 	ldr.w	r2, [r5, #-4]!
 8002650:	4932      	ldr	r1, [pc, #200]	; (800271c <QHsm_dispatch_+0x17c>)
 8002652:	4620      	mov	r0, r4
        }

        ip = QHsm_tran_(me, path);

                    /* retrace the entry path in reverse (desired) order... */
        for (; ip >= (int_t)0; --ip) {
 8002654:	3e01      	subs	r6, #1
            QEP_ENTER_(path[ip]);                         /* enter path[ip] */
 8002656:	4790      	blx	r2
        }

        ip = QHsm_tran_(me, path);

                    /* retrace the entry path in reverse (desired) order... */
        for (; ip >= (int_t)0; --ip) {
 8002658:	1c73      	adds	r3, r6, #1
 800265a:	d010      	beq.n	800267e <QHsm_dispatch_+0xde>
            QEP_ENTER_(path[ip]);                         /* enter path[ip] */
 800265c:	f855 7c04 	ldr.w	r7, [r5, #-4]
 8002660:	492e      	ldr	r1, [pc, #184]	; (800271c <QHsm_dispatch_+0x17c>)
 8002662:	4620      	mov	r0, r4
 8002664:	47b8      	blx	r7
 8002666:	f855 3c08 	ldr.w	r3, [r5, #-8]
 800266a:	492c      	ldr	r1, [pc, #176]	; (800271c <QHsm_dispatch_+0x17c>)
        }

        ip = QHsm_tran_(me, path);

                    /* retrace the entry path in reverse (desired) order... */
        for (; ip >= (int_t)0; --ip) {
 800266c:	1e77      	subs	r7, r6, #1
            QEP_ENTER_(path[ip]);                         /* enter path[ip] */
 800266e:	4620      	mov	r0, r4
 8002670:	f1a5 0904 	sub.w	r9, r5, #4
 8002674:	4798      	blx	r3
 8002676:	3d08      	subs	r5, #8
        }

        ip = QHsm_tran_(me, path);

                    /* retrace the entry path in reverse (desired) order... */
        for (; ip >= (int_t)0; --ip) {
 8002678:	3e02      	subs	r6, #2
 800267a:	2f00      	cmp	r7, #0
 800267c:	d1ee      	bne.n	800265c <QHsm_dispatch_+0xbc>
            QEP_ENTER_(path[ip]);                         /* enter path[ip] */
        }
        t = path[0];                      /* stick the target into register */
 800267e:	9e00      	ldr	r6, [sp, #0]
        me->temp.fun = t;                          /* update the next state */
 8002680:	60a6      	str	r6, [r4, #8]

                                      /* drill into the target hierarchy... */
        while (QEP_TRIG_(t, Q_INIT_SIG) == (QState)Q_RET_TRAN) {
 8002682:	4620      	mov	r0, r4
 8002684:	4926      	ldr	r1, [pc, #152]	; (8002720 <QHsm_dispatch_+0x180>)
 8002686:	47b0      	blx	r6
 8002688:	2804      	cmp	r0, #4
 800268a:	d1a5      	bne.n	80025d8 <QHsm_dispatch_+0x38>
                QS_FUN_(t);                     /* the source (pseudo)state */
                QS_FUN_(me->temp.fun);      /* the target of the transition */
            QS_END_()

            ip = (int_t)0;
            path[0] = me->temp.fun;
 800268c:	68a5      	ldr	r5, [r4, #8]

            (void)QEP_TRIG_(me->temp.fun, QEP_EMPTY_SIG_);/*find superstate */
 800268e:	4921      	ldr	r1, [pc, #132]	; (8002714 <QHsm_dispatch_+0x174>)
                QS_FUN_(t);                     /* the source (pseudo)state */
                QS_FUN_(me->temp.fun);      /* the target of the transition */
            QS_END_()

            ip = (int_t)0;
            path[0] = me->temp.fun;
 8002690:	9500      	str	r5, [sp, #0]

            (void)QEP_TRIG_(me->temp.fun, QEP_EMPTY_SIG_);/*find superstate */
 8002692:	4620      	mov	r0, r4
 8002694:	47a8      	blx	r5

            while (me->temp.fun != t) {
 8002696:	68a2      	ldr	r2, [r4, #8]
 8002698:	42b2      	cmp	r2, r6
 800269a:	d032      	beq.n	8002702 <QHsm_dispatch_+0x162>
 800269c:	466f      	mov	r7, sp
                QS_OBJ_(me);                   /* this state machine object */
                QS_FUN_(t);                     /* the source (pseudo)state */
                QS_FUN_(me->temp.fun);      /* the target of the transition */
            QS_END_()

            ip = (int_t)0;
 800269e:	2500      	movs	r5, #0

            (void)QEP_TRIG_(me->temp.fun, QEP_EMPTY_SIG_);/*find superstate */

            while (me->temp.fun != t) {
                ++ip;
                path[ip] = me->temp.fun;
 80026a0:	f847 2f04 	str.w	r2, [r7, #4]!
                (void)QEP_TRIG_(me->temp.fun, QEP_EMPTY_SIG_);/* find super */
 80026a4:	4620      	mov	r0, r4
 80026a6:	491b      	ldr	r1, [pc, #108]	; (8002714 <QHsm_dispatch_+0x174>)
 80026a8:	4790      	blx	r2
            ip = (int_t)0;
            path[0] = me->temp.fun;

            (void)QEP_TRIG_(me->temp.fun, QEP_EMPTY_SIG_);/*find superstate */

            while (me->temp.fun != t) {
 80026aa:	68a2      	ldr	r2, [r4, #8]
                ++ip;
 80026ac:	3501      	adds	r5, #1
            ip = (int_t)0;
            path[0] = me->temp.fun;

            (void)QEP_TRIG_(me->temp.fun, QEP_EMPTY_SIG_);/*find superstate */

            while (me->temp.fun != t) {
 80026ae:	42b2      	cmp	r2, r6
 80026b0:	d1f6      	bne.n	80026a0 <QHsm_dispatch_+0x100>
                ++ip;
                path[ip] = me->temp.fun;
                (void)QEP_TRIG_(me->temp.fun, QEP_EMPTY_SIG_);/* find super */
            }
            me->temp.fun = path[0];
 80026b2:	9900      	ldr	r1, [sp, #0]
                                            /* entry path must not overflow */
            Q_ASSERT(ip < (int_t)QEP_MAX_NEST_DEPTH_);
 80026b4:	2d05      	cmp	r5, #5
            while (me->temp.fun != t) {
                ++ip;
                path[ip] = me->temp.fun;
                (void)QEP_TRIG_(me->temp.fun, QEP_EMPTY_SIG_);/* find super */
            }
            me->temp.fun = path[0];
 80026b6:	60a1      	str	r1, [r4, #8]
                                            /* entry path must not overflow */
            Q_ASSERT(ip < (int_t)QEP_MAX_NEST_DEPTH_);
 80026b8:	dd03      	ble.n	80026c2 <QHsm_dispatch_+0x122>
 80026ba:	4815      	ldr	r0, [pc, #84]	; (8002710 <QHsm_dispatch_+0x170>)
 80026bc:	2184      	movs	r1, #132	; 0x84
 80026be:	f7fd fed9 	bl	8000474 <Q_onAssert>
 80026c2:	00a8      	lsls	r0, r5, #2
 80026c4:	ae06      	add	r6, sp, #24
 80026c6:	1833      	adds	r3, r6, r0
 80026c8:	f853 3c18 	ldr.w	r3, [r3, #-24]

static int_t QHsm_tran_(QHsm * const me,
                        QStateHandler path[QEP_MAX_NEST_DEPTH_]);

/*..........................................................................*/
void QHsm_dispatch_(QHsm * const me, QEvt const * const e) {
 80026cc:	aa00      	add	r2, sp, #0
 80026ce:	1816      	adds	r6, r2, r0
 80026d0:	07ea      	lsls	r2, r5, #31
 80026d2:	d50f      	bpl.n	80026f4 <QHsm_dispatch_+0x154>
            me->temp.fun = path[0];
                                            /* entry path must not overflow */
            Q_ASSERT(ip < (int_t)QEP_MAX_NEST_DEPTH_);

            do {    /* retrace the entry path in reverse (correct) order... */
                QEP_ENTER_(path[ip]);                     /* enter path[ip] */
 80026d4:	4620      	mov	r0, r4
 80026d6:	4911      	ldr	r1, [pc, #68]	; (800271c <QHsm_dispatch_+0x17c>)
 80026d8:	4798      	blx	r3
                --ip;
            } while (ip >= (int_t)0);
 80026da:	3d01      	subs	r5, #1
 80026dc:	d40f      	bmi.n	80026fe <QHsm_dispatch_+0x15e>
 80026de:	f856 3d04 	ldr.w	r3, [r6, #-4]!
 80026e2:	e007      	b.n	80026f4 <QHsm_dispatch_+0x154>
 80026e4:	f856 2d04 	ldr.w	r2, [r6, #-4]!
            me->temp.fun = path[0];
                                            /* entry path must not overflow */
            Q_ASSERT(ip < (int_t)QEP_MAX_NEST_DEPTH_);

            do {    /* retrace the entry path in reverse (correct) order... */
                QEP_ENTER_(path[ip]);                     /* enter path[ip] */
 80026e8:	490c      	ldr	r1, [pc, #48]	; (800271c <QHsm_dispatch_+0x17c>)
 80026ea:	4620      	mov	r0, r4
 80026ec:	4790      	blx	r2
 80026ee:	f856 3d04 	ldr.w	r3, [r6, #-4]!
                --ip;
 80026f2:	3d01      	subs	r5, #1
            me->temp.fun = path[0];
                                            /* entry path must not overflow */
            Q_ASSERT(ip < (int_t)QEP_MAX_NEST_DEPTH_);

            do {    /* retrace the entry path in reverse (correct) order... */
                QEP_ENTER_(path[ip]);                     /* enter path[ip] */
 80026f4:	4620      	mov	r0, r4
 80026f6:	4909      	ldr	r1, [pc, #36]	; (800271c <QHsm_dispatch_+0x17c>)
 80026f8:	4798      	blx	r3
                --ip;
            } while (ip >= (int_t)0);
 80026fa:	3d01      	subs	r5, #1
 80026fc:	d5f2      	bpl.n	80026e4 <QHsm_dispatch_+0x144>

            t = path[0];
 80026fe:	9e00      	ldr	r6, [sp, #0]
 8002700:	e7bf      	b.n	8002682 <QHsm_dispatch_+0xe2>
            while (me->temp.fun != t) {
                ++ip;
                path[ip] = me->temp.fun;
                (void)QEP_TRIG_(me->temp.fun, QEP_EMPTY_SIG_);/* find super */
            }
            me->temp.fun = path[0];
 8002702:	9b00      	ldr	r3, [sp, #0]
                QS_OBJ_(me);                   /* this state machine object */
                QS_FUN_(t);                     /* the source (pseudo)state */
                QS_FUN_(me->temp.fun);      /* the target of the transition */
            QS_END_()

            ip = (int_t)0;
 8002704:	2500      	movs	r5, #0
            while (me->temp.fun != t) {
                ++ip;
                path[ip] = me->temp.fun;
                (void)QEP_TRIG_(me->temp.fun, QEP_EMPTY_SIG_);/* find super */
            }
            me->temp.fun = path[0];
 8002706:	60a3      	str	r3, [r4, #8]
 8002708:	4628      	mov	r0, r5
 800270a:	e7df      	b.n	80026cc <QHsm_dispatch_+0x12c>
 800270c:	080025a1 	.word	0x080025a1
 8002710:	08002fb8 	.word	0x08002fb8
 8002714:	080030c8 	.word	0x080030c8
 8002718:	080030d0 	.word	0x080030d0
 800271c:	080030cc 	.word	0x080030cc
 8002720:	080030d4 	.word	0x080030d4

08002724 <QK_mutexUnlock>:

    QF_CRIT_EXIT_();
    return mutex;
}
/*..........................................................................*/
void QK_mutexUnlock(QMutex mutex) {
 8002724:	b538      	push	{r3, r4, r5, lr}
 8002726:	4671      	mov	r1, lr
 8002728:	4605      	mov	r5, r0
 800272a:	480e      	ldr	r0, [pc, #56]	; (8002764 <QK_mutexUnlock+0x40>)
 800272c:	4674      	mov	r4, lr
 800272e:	f7fe fa35 	bl	8000b9c <__cyg_profile_func_enter>
    QF_CRIT_STAT_
    QF_CRIT_ENTRY_();
 8002732:	203f      	movs	r0, #63	; 0x3f
 8002734:	f380 8811 	msr	BASEPRI, r0
        QS_TIME_();                                            /* timestamp */
        QS_U8_(mutex);                             /* the original priority */
        QS_U8_(QK_ceilingPrio_);            /* the current priority ceiling */
    QS_END_NOCRIT_()

    if (QK_ceilingPrio_ > mutex) {
 8002738:	4b0b      	ldr	r3, [pc, #44]	; (8002768 <QK_mutexUnlock+0x44>)
 800273a:	781a      	ldrb	r2, [r3, #0]
 800273c:	42aa      	cmp	r2, r5
 800273e:	d808      	bhi.n	8002752 <QK_mutexUnlock+0x2e>
        mutex = QK_schedPrio_();          /* reuse 'mutex' to hold priority */
        if (mutex != (uint8_t)0) {
            QK_sched_(mutex);
        }
    }
    QF_CRIT_EXIT_();
 8002740:	2000      	movs	r0, #0
 8002742:	f380 8811 	msr	BASEPRI, r0
 8002746:	4807      	ldr	r0, [pc, #28]	; (8002764 <QK_mutexUnlock+0x40>)
 8002748:	4621      	mov	r1, r4
}
 800274a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800274e:	f7fe ba8d 	b.w	8000c6c <__cyg_profile_func_exit>
        QS_U8_(mutex);                             /* the original priority */
        QS_U8_(QK_ceilingPrio_);            /* the current priority ceiling */
    QS_END_NOCRIT_()

    if (QK_ceilingPrio_ > mutex) {
        QK_ceilingPrio_ = mutex;      /* restore the saved priority ceiling */
 8002752:	701d      	strb	r5, [r3, #0]
        mutex = QK_schedPrio_();          /* reuse 'mutex' to hold priority */
 8002754:	f000 f9b6 	bl	8002ac4 <QK_schedPrio_>
        if (mutex != (uint8_t)0) {
 8002758:	2800      	cmp	r0, #0
 800275a:	d0f1      	beq.n	8002740 <QK_mutexUnlock+0x1c>
            QK_sched_(mutex);
 800275c:	f000 f956 	bl	8002a0c <QK_sched_>
 8002760:	e7ee      	b.n	8002740 <QK_mutexUnlock+0x1c>
 8002762:	bf00      	nop
 8002764:	08002725 	.word	0x08002725
 8002768:	2000021c 	.word	0x2000021c

0800276c <QK_mutexLock>:

/* package-scope objects ---------------------------------------------------*/
uint8_t volatile QK_ceilingPrio_;            /* ceiling priority of a mutex */

/*..........................................................................*/
QMutex QK_mutexLock(uint8_t prioCeiling) {
 800276c:	b570      	push	{r4, r5, r6, lr}
 800276e:	4671      	mov	r1, lr
 8002770:	4605      	mov	r5, r0
 8002772:	480b      	ldr	r0, [pc, #44]	; (80027a0 <QK_mutexLock+0x34>)
 8002774:	4674      	mov	r4, lr
 8002776:	f7fe fa11 	bl	8000b9c <__cyg_profile_func_enter>
    uint8_t mutex;
    QF_CRIT_STAT_
    QF_CRIT_ENTRY_();
 800277a:	203f      	movs	r0, #63	; 0x3f
 800277c:	f380 8811 	msr	BASEPRI, r0
    mutex = QK_ceilingPrio_;  /* the original QK priority ceiling to return */
 8002780:	4b08      	ldr	r3, [pc, #32]	; (80027a4 <QK_mutexLock+0x38>)
 8002782:	781e      	ldrb	r6, [r3, #0]
    if (QK_ceilingPrio_ < prioCeiling) {
 8002784:	781a      	ldrb	r2, [r3, #0]
 8002786:	42aa      	cmp	r2, r5
        QK_ceilingPrio_ = prioCeiling;     /* raise the QK priority ceiling */
 8002788:	bf38      	it	cc
 800278a:	701d      	strbcc	r5, [r3, #0]
        QS_TIME_();                                            /* timestamp */
        QS_U8_(mutex);                             /* the original priority */
        QS_U8_(QK_ceilingPrio_);            /* the current priority ceiling */
    QS_END_NOCRIT_()

    QF_CRIT_EXIT_();
 800278c:	2000      	movs	r0, #0
 800278e:	f380 8811 	msr	BASEPRI, r0
 8002792:	4803      	ldr	r0, [pc, #12]	; (80027a0 <QK_mutexLock+0x34>)
 8002794:	4621      	mov	r1, r4
 8002796:	f7fe fa69 	bl	8000c6c <__cyg_profile_func_exit>
    return mutex;
}
 800279a:	4630      	mov	r0, r6
 800279c:	bd70      	pop	{r4, r5, r6, pc}
 800279e:	bf00      	nop
 80027a0:	0800276d 	.word	0x0800276d
 80027a4:	2000021c 	.word	0x2000021c

080027a8 <QF_gc>:
* \ingroup qf
* \brief QF_gc() implementation.
*/

/*..........................................................................*/
void QF_gc(QEvt const * const e) {
 80027a8:	b570      	push	{r4, r5, r6, lr}
 80027aa:	4604      	mov	r4, r0
 80027ac:	4671      	mov	r1, lr
 80027ae:	4817      	ldr	r0, [pc, #92]	; (800280c <QF_gc+0x64>)
 80027b0:	4675      	mov	r5, lr
 80027b2:	f7fe f9f3 	bl	8000b9c <__cyg_profile_func_enter>
    if (e->poolId_ != (uint8_t)0) {               /* is it a dynamic event? */
 80027b6:	78a3      	ldrb	r3, [r4, #2]
 80027b8:	b163      	cbz	r3, 80027d4 <QF_gc+0x2c>
        QF_CRIT_STAT_
        QF_CRIT_ENTRY_();
 80027ba:	203f      	movs	r0, #63	; 0x3f
 80027bc:	f380 8811 	msr	BASEPRI, r0

        if (e->refCtr_ > (uint8_t)1) {          /* isn't this the last ref? */
 80027c0:	78e2      	ldrb	r2, [r4, #3]
 80027c2:	2a01      	cmp	r2, #1
 80027c4:	d90c      	bls.n	80027e0 <QF_gc+0x38>
            QF_EVT_REF_CTR_DEC_(e);           /* decrements the ref counter */
 80027c6:	78e2      	ldrb	r2, [r4, #3]
 80027c8:	1e50      	subs	r0, r2, #1
 80027ca:	b2c1      	uxtb	r1, r0
 80027cc:	70e1      	strb	r1, [r4, #3]
                QS_TIME_();                                    /* timestamp */
                QS_SIG_(e->sig);                 /* the signal of the event */
                QS_2U8_(e->poolId_, e->refCtr_);     /* pool Id & ref Count */
            QS_END_NOCRIT_()

            QF_CRIT_EXIT_();
 80027ce:	2000      	movs	r0, #0
 80027d0:	f380 8811 	msr	BASEPRI, r0
 80027d4:	480d      	ldr	r0, [pc, #52]	; (800280c <QF_gc+0x64>)
 80027d6:	4629      	mov	r1, r5

            QF_EPOOL_PUT_(QF_pool_[idx], (QEvt *)e);    /* cast const away, */
                          /* which is legitimate, because it's a pool event */
        }
    }
}
 80027d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80027dc:	f7fe ba46 	b.w	8000c6c <__cyg_profile_func_exit>

            QF_CRIT_EXIT_();
        }
        else {      /* this is the last reference to this event, recycle it */
                                                      /* cannot wrap around */
            uint_t idx = (uint_t)e->poolId_ - (uint_t)1;
 80027e0:	1e5e      	subs	r6, r3, #1
                QS_TIME_();                                    /* timestamp */
                QS_SIG_(e->sig);                 /* the signal of the event */
                QS_2U8_(e->poolId_, e->refCtr_);     /* pool Id & ref Count */
            QS_END_NOCRIT_()

            QF_CRIT_EXIT_();
 80027e2:	2000      	movs	r0, #0
 80027e4:	f380 8811 	msr	BASEPRI, r0

            Q_ASSERT(idx < QF_maxPool_);
 80027e8:	4809      	ldr	r0, [pc, #36]	; (8002810 <QF_gc+0x68>)
 80027ea:	6801      	ldr	r1, [r0, #0]
 80027ec:	428e      	cmp	r6, r1
 80027ee:	d208      	bcs.n	8002802 <QF_gc+0x5a>

            QF_EPOOL_PUT_(QF_pool_[idx], (QEvt *)e);    /* cast const away, */
 80027f0:	4b08      	ldr	r3, [pc, #32]	; (8002814 <QF_gc+0x6c>)
 80027f2:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 80027f6:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 80027fa:	4621      	mov	r1, r4
 80027fc:	f000 fa32 	bl	8002c64 <QMPool_put>
 8002800:	e7e8      	b.n	80027d4 <QF_gc+0x2c>
                QS_2U8_(e->poolId_, e->refCtr_);     /* pool Id & ref Count */
            QS_END_NOCRIT_()

            QF_CRIT_EXIT_();

            Q_ASSERT(idx < QF_maxPool_);
 8002802:	4805      	ldr	r0, [pc, #20]	; (8002818 <QF_gc+0x70>)
 8002804:	214b      	movs	r1, #75	; 0x4b
 8002806:	f7fd fe35 	bl	8000474 <Q_onAssert>
 800280a:	e7f1      	b.n	80027f0 <QF_gc+0x48>
 800280c:	080027a9 	.word	0x080027a9
 8002810:	20000174 	.word	0x20000174
 8002814:	20000138 	.word	0x20000138
 8002818:	08002fc4 	.word	0x08002fc4

0800281c <QActive_postLIFO_>:
* \note this source file is only included in the QF library when the native
* QF active object queue is used (instead of a message queue of an RTOS).
*/

/*..........................................................................*/
void QActive_postLIFO_(QActive * const me, QEvt const * const e) {
 800281c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800281e:	4604      	mov	r4, r0
 8002820:	460d      	mov	r5, r1
 8002822:	4829      	ldr	r0, [pc, #164]	; (80028c8 <QActive_postLIFO_+0xac>)
 8002824:	4671      	mov	r1, lr
 8002826:	4676      	mov	r6, lr
 8002828:	f7fe f9b8 	bl	8000b9c <__cyg_profile_func_enter>
    QEvt const *frontEvt;      /* temporary to avoid UB for volatile access */
    QEQueueCtr nFree;          /* temporary to avoid UB for volatile access */
    QF_CRIT_STAT_

    QF_CRIT_ENTRY_();
 800282c:	203f      	movs	r0, #63	; 0x3f
 800282e:	f380 8811 	msr	BASEPRI, r0
    nFree = me->eQueue.nFree;            /* get volatile into the temporary */
 8002832:	7de7      	ldrb	r7, [r4, #23]

            /* the queue must be able to accept the event (cannot overflow) */
    Q_ASSERT(nFree != (QEQueueCtr)0);
 8002834:	2f00      	cmp	r7, #0
 8002836:	d024      	beq.n	8002882 <QActive_postLIFO_+0x66>
        QS_2U8_(e->poolId_, e->refCtr_);/* pool Id & ref Count of the event */
        QS_EQC_(nFree);                           /* number of free entries */
        QS_EQC_(me->eQueue.nMin);             /* min number of free entries */
    QS_END_NOCRIT_()

    if (e->poolId_ != (uint8_t)0) {                  /* is it a pool event? */
 8002838:	78ab      	ldrb	r3, [r5, #2]
 800283a:	b11b      	cbz	r3, 8002844 <QActive_postLIFO_+0x28>
        QF_EVT_REF_CTR_INC_(e);          /* increment the reference counter */
 800283c:	78e8      	ldrb	r0, [r5, #3]
 800283e:	1c41      	adds	r1, r0, #1
 8002840:	b2ca      	uxtb	r2, r1
 8002842:	70ea      	strb	r2, [r5, #3]
    }

    --nFree;                                 /* one free entry just used up */
 8002844:	1e7b      	subs	r3, r7, #1
 8002846:	b2d9      	uxtb	r1, r3
    me->eQueue.nFree = nFree;                        /* update the volatile */
    if (me->eQueue.nMin > nFree) {
 8002848:	7e20      	ldrb	r0, [r4, #24]
    if (e->poolId_ != (uint8_t)0) {                  /* is it a pool event? */
        QF_EVT_REF_CTR_INC_(e);          /* increment the reference counter */
    }

    --nFree;                                 /* one free entry just used up */
    me->eQueue.nFree = nFree;                        /* update the volatile */
 800284a:	75e1      	strb	r1, [r4, #23]
    if (me->eQueue.nMin > nFree) {
        me->eQueue.nMin = nFree;                   /* update minimum so far */
    }

    frontEvt = me->eQueue.frontEvt;     /* read volatile into the temporary */
 800284c:	68e3      	ldr	r3, [r4, #12]
    me->eQueue.frontEvt = e;     /* deliver the event directly to the front */
 800284e:	60e5      	str	r5, [r4, #12]
        QF_EVT_REF_CTR_INC_(e);          /* increment the reference counter */
    }

    --nFree;                                 /* one free entry just used up */
    me->eQueue.nFree = nFree;                        /* update the volatile */
    if (me->eQueue.nMin > nFree) {
 8002850:	4288      	cmp	r0, r1
        me->eQueue.nMin = nFree;                   /* update minimum so far */
 8002852:	bf88      	it	hi
 8002854:	7621      	strbhi	r1, [r4, #24]
    }

    frontEvt = me->eQueue.frontEvt;     /* read volatile into the temporary */
    me->eQueue.frontEvt = e;     /* deliver the event directly to the front */
    if (frontEvt == (QEvt const *)0) {              /* was the queue empty? */
 8002856:	b1e3      	cbz	r3, 8002892 <QActive_postLIFO_+0x76>
        QACTIVE_EQUEUE_SIGNAL_(me);               /* signal the event queue */
    }
    else {       /* queue was not empty, leave the event in the ring-buffer */
        ++me->eQueue.tail;
 8002858:	7da2      	ldrb	r2, [r4, #22]
        if (me->eQueue.tail == me->eQueue.end) {  /* need to wrap the tail? */
 800285a:	7d20      	ldrb	r0, [r4, #20]
    me->eQueue.frontEvt = e;     /* deliver the event directly to the front */
    if (frontEvt == (QEvt const *)0) {              /* was the queue empty? */
        QACTIVE_EQUEUE_SIGNAL_(me);               /* signal the event queue */
    }
    else {       /* queue was not empty, leave the event in the ring-buffer */
        ++me->eQueue.tail;
 800285c:	1c51      	adds	r1, r2, #1
 800285e:	b2ca      	uxtb	r2, r1
 8002860:	75a2      	strb	r2, [r4, #22]
        if (me->eQueue.tail == me->eQueue.end) {  /* need to wrap the tail? */
 8002862:	7da1      	ldrb	r1, [r4, #22]
 8002864:	4288      	cmp	r0, r1
 8002866:	d011      	beq.n	800288c <QActive_postLIFO_+0x70>
            me->eQueue.tail = (QEQueueCtr)0;                 /* wrap around */
        }

        QF_PTR_AT_(me->eQueue.ring, me->eQueue.tail) = frontEvt;
 8002868:	7da1      	ldrb	r1, [r4, #22]
 800286a:	6922      	ldr	r2, [r4, #16]
 800286c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    }
    QF_CRIT_EXIT_();
 8002870:	2000      	movs	r0, #0
 8002872:	f380 8811 	msr	BASEPRI, r0
 8002876:	4814      	ldr	r0, [pc, #80]	; (80028c8 <QActive_postLIFO_+0xac>)
 8002878:	4631      	mov	r1, r6
}
 800287a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800287e:	f7fe b9f5 	b.w	8000c6c <__cyg_profile_func_exit>

    QF_CRIT_ENTRY_();
    nFree = me->eQueue.nFree;            /* get volatile into the temporary */

            /* the queue must be able to accept the event (cannot overflow) */
    Q_ASSERT(nFree != (QEQueueCtr)0);
 8002882:	4812      	ldr	r0, [pc, #72]	; (80028cc <QActive_postLIFO_+0xb0>)
 8002884:	213b      	movs	r1, #59	; 0x3b
 8002886:	f7fd fdf5 	bl	8000474 <Q_onAssert>
 800288a:	e7d5      	b.n	8002838 <QActive_postLIFO_+0x1c>
        QACTIVE_EQUEUE_SIGNAL_(me);               /* signal the event queue */
    }
    else {       /* queue was not empty, leave the event in the ring-buffer */
        ++me->eQueue.tail;
        if (me->eQueue.tail == me->eQueue.end) {  /* need to wrap the tail? */
            me->eQueue.tail = (QEQueueCtr)0;                 /* wrap around */
 800288c:	2000      	movs	r0, #0
 800288e:	75a0      	strb	r0, [r4, #22]
 8002890:	e7ea      	b.n	8002868 <QActive_postLIFO_+0x4c>
    }

    frontEvt = me->eQueue.frontEvt;     /* read volatile into the temporary */
    me->eQueue.frontEvt = e;     /* deliver the event directly to the front */
    if (frontEvt == (QEvt const *)0) {              /* was the queue empty? */
        QACTIVE_EQUEUE_SIGNAL_(me);               /* signal the event queue */
 8002892:	7f24      	ldrb	r4, [r4, #28]
 8002894:	480e      	ldr	r0, [pc, #56]	; (80028d0 <QActive_postLIFO_+0xb4>)
 8002896:	4b0f      	ldr	r3, [pc, #60]	; (80028d4 <QActive_postLIFO_+0xb8>)
 8002898:	5d01      	ldrb	r1, [r0, r4]
 800289a:	480f      	ldr	r0, [pc, #60]	; (80028d8 <QActive_postLIFO_+0xbc>)
 800289c:	185a      	adds	r2, r3, r1
 800289e:	5d04      	ldrb	r4, [r0, r4]
 80028a0:	1841      	adds	r1, r0, r1
 80028a2:	7850      	ldrb	r0, [r2, #1]
 80028a4:	7849      	ldrb	r1, [r1, #1]
 80028a6:	4320      	orrs	r0, r4
 80028a8:	7050      	strb	r0, [r2, #1]
 80028aa:	781a      	ldrb	r2, [r3, #0]
 80028ac:	430a      	orrs	r2, r1
 80028ae:	701a      	strb	r2, [r3, #0]
 80028b0:	4b0a      	ldr	r3, [pc, #40]	; (80028dc <QActive_postLIFO_+0xc0>)
 80028b2:	6818      	ldr	r0, [r3, #0]
 80028b4:	2800      	cmp	r0, #0
 80028b6:	d1db      	bne.n	8002870 <QActive_postLIFO_+0x54>
 80028b8:	f000 f904 	bl	8002ac4 <QK_schedPrio_>
 80028bc:	2800      	cmp	r0, #0
 80028be:	d0d7      	beq.n	8002870 <QActive_postLIFO_+0x54>
 80028c0:	f000 f8a4 	bl	8002a0c <QK_sched_>
 80028c4:	e7d4      	b.n	8002870 <QActive_postLIFO_+0x54>
 80028c6:	bf00      	nop
 80028c8:	0800281d 	.word	0x0800281d
 80028cc:	08002fcc 	.word	0x08002fcc
 80028d0:	08002fd4 	.word	0x08002fd4
 80028d4:	20000124 	.word	0x20000124
 80028d8:	0800305c 	.word	0x0800305c
 80028dc:	20000130 	.word	0x20000130

080028e0 <QHsm_init_>:
    me->vptr  = &vtbl;
    me->state.fun = Q_STATE_CAST(&QHsm_top);
    me->temp.fun  = initial;
}
/*..........................................................................*/
void QHsm_init_(QHsm * const me, QEvt const * const e) {
 80028e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80028e4:	4606      	mov	r6, r0
 80028e6:	b086      	sub	sp, #24
 80028e8:	460c      	mov	r4, r1
 80028ea:	4834      	ldr	r0, [pc, #208]	; (80029bc <QHsm_init_+0xdc>)
 80028ec:	4671      	mov	r1, lr
 80028ee:	46f1      	mov	r9, lr
 80028f0:	f7fe f954 	bl	8000b9c <__cyg_profile_func_enter>
    QStateHandler t = me->state.fun;
 80028f4:	e896 0408 	ldmia.w	r6, {r3, sl}
    QS_CRIT_STAT_

    Q_REQUIRE((me->vptr != (QMsmVtbl const *)0)    /* ctor must be executed */
 80028f8:	b123      	cbz	r3, 8002904 <QHsm_init_+0x24>
 80028fa:	68b3      	ldr	r3, [r6, #8]
 80028fc:	b113      	cbz	r3, 8002904 <QHsm_init_+0x24>
 80028fe:	4a30      	ldr	r2, [pc, #192]	; (80029c0 <QHsm_init_+0xe0>)
 8002900:	4592      	cmp	sl, r2
 8002902:	d004      	beq.n	800290e <QHsm_init_+0x2e>
 8002904:	482f      	ldr	r0, [pc, #188]	; (80029c4 <QHsm_init_+0xe4>)
 8002906:	2140      	movs	r1, #64	; 0x40
 8002908:	f7fd fdb4 	bl	8000474 <Q_onAssert>
 800290c:	68b3      	ldr	r3, [r6, #8]
              && (me->temp.fun != Q_STATE_CAST(0)) /* ctor must be executed */
              && (t == Q_STATE_CAST(&QHsm_top))); /*initial tran. NOT taken */

                           /* the top-most initial transition must be taken */
    Q_ALLEGE((*me->temp.fun)(me, e) == (QState)Q_RET_TRAN);
 800290e:	4630      	mov	r0, r6
 8002910:	4621      	mov	r1, r4
 8002912:	4798      	blx	r3
 8002914:	2804      	cmp	r0, #4
 8002916:	d003      	beq.n	8002920 <QHsm_init_+0x40>
 8002918:	482a      	ldr	r0, [pc, #168]	; (80029c4 <QHsm_init_+0xe4>)
 800291a:	2143      	movs	r1, #67	; 0x43
 800291c:	f7fd fdaa 	bl	8000474 <Q_onAssert>
 8002920:	46e8      	mov	r8, sp
            QS_OBJ_(me);                       /* this state machine object */
            QS_FUN_(t);                                 /* the source state */
            QS_FUN_(me->temp.fun);  /* the target of the initial transition */
        QS_END_()

        path[0] = me->temp.fun;
 8002922:	68b7      	ldr	r7, [r6, #8]
        (void)QEP_TRIG_(me->temp.fun, QEP_EMPTY_SIG_);
 8002924:	4928      	ldr	r1, [pc, #160]	; (80029c8 <QHsm_init_+0xe8>)
            QS_OBJ_(me);                       /* this state machine object */
            QS_FUN_(t);                                 /* the source state */
            QS_FUN_(me->temp.fun);  /* the target of the initial transition */
        QS_END_()

        path[0] = me->temp.fun;
 8002926:	9700      	str	r7, [sp, #0]
        (void)QEP_TRIG_(me->temp.fun, QEP_EMPTY_SIG_);
 8002928:	4630      	mov	r0, r6
 800292a:	47b8      	blx	r7
        while (me->temp.fun != t) {
 800292c:	68b5      	ldr	r5, [r6, #8]
 800292e:	4555      	cmp	r5, sl
 8002930:	d03f      	beq.n	80029b2 <QHsm_init_+0xd2>
 8002932:	466f      	mov	r7, sp
                           /* the top-most initial transition must be taken */
    Q_ALLEGE((*me->temp.fun)(me, e) == (QState)Q_RET_TRAN);

    do {                                        /* drill into the target... */
        QStateHandler path[QEP_MAX_NEST_DEPTH_];
        int_t ip = (int_t)0;                 /* transition entry path index */
 8002934:	2400      	movs	r4, #0
 8002936:	e000      	b.n	800293a <QHsm_init_+0x5a>
            QS_FUN_(me->temp.fun);  /* the target of the initial transition */
        QS_END_()

        path[0] = me->temp.fun;
        (void)QEP_TRIG_(me->temp.fun, QEP_EMPTY_SIG_);
        while (me->temp.fun != t) {
 8002938:	4605      	mov	r5, r0
            ++ip;
            path[ip] = me->temp.fun;
 800293a:	f847 5f04 	str.w	r5, [r7, #4]!
            (void)QEP_TRIG_(me->temp.fun, QEP_EMPTY_SIG_);
 800293e:	4630      	mov	r0, r6
 8002940:	4921      	ldr	r1, [pc, #132]	; (80029c8 <QHsm_init_+0xe8>)
 8002942:	47a8      	blx	r5
            QS_FUN_(me->temp.fun);  /* the target of the initial transition */
        QS_END_()

        path[0] = me->temp.fun;
        (void)QEP_TRIG_(me->temp.fun, QEP_EMPTY_SIG_);
        while (me->temp.fun != t) {
 8002944:	68b0      	ldr	r0, [r6, #8]
            ++ip;
 8002946:	3401      	adds	r4, #1
            QS_FUN_(me->temp.fun);  /* the target of the initial transition */
        QS_END_()

        path[0] = me->temp.fun;
        (void)QEP_TRIG_(me->temp.fun, QEP_EMPTY_SIG_);
        while (me->temp.fun != t) {
 8002948:	4550      	cmp	r0, sl
 800294a:	d1f5      	bne.n	8002938 <QHsm_init_+0x58>
            ++ip;
            path[ip] = me->temp.fun;
            (void)QEP_TRIG_(me->temp.fun, QEP_EMPTY_SIG_);
        }
        me->temp.fun = path[0];
 800294c:	9900      	ldr	r1, [sp, #0]
                                            /* entry path must not overflow */
        Q_ASSERT(ip < (int_t)QEP_MAX_NEST_DEPTH_);
 800294e:	2c05      	cmp	r4, #5
        while (me->temp.fun != t) {
            ++ip;
            path[ip] = me->temp.fun;
            (void)QEP_TRIG_(me->temp.fun, QEP_EMPTY_SIG_);
        }
        me->temp.fun = path[0];
 8002950:	60b1      	str	r1, [r6, #8]
                                            /* entry path must not overflow */
        Q_ASSERT(ip < (int_t)QEP_MAX_NEST_DEPTH_);
 8002952:	dd03      	ble.n	800295c <QHsm_init_+0x7c>
 8002954:	481b      	ldr	r0, [pc, #108]	; (80029c4 <QHsm_init_+0xe4>)
 8002956:	2158      	movs	r1, #88	; 0x58
 8002958:	f7fd fd8c 	bl	8000474 <Q_onAssert>
 800295c:	07e3      	lsls	r3, r4, #31
    me->vptr  = &vtbl;
    me->state.fun = Q_STATE_CAST(&QHsm_top);
    me->temp.fun  = initial;
}
/*..........................................................................*/
void QHsm_init_(QHsm * const me, QEvt const * const e) {
 800295e:	eb08 0784 	add.w	r7, r8, r4, lsl #2
 8002962:	d50f      	bpl.n	8002984 <QHsm_init_+0xa4>
        me->temp.fun = path[0];
                                            /* entry path must not overflow */
        Q_ASSERT(ip < (int_t)QEP_MAX_NEST_DEPTH_);

        do {        /* retrace the entry path in reverse (desired) order... */
            QEP_ENTER_(path[ip]);                         /* enter path[ip] */
 8002964:	4630      	mov	r0, r6
 8002966:	4919      	ldr	r1, [pc, #100]	; (80029cc <QHsm_init_+0xec>)
 8002968:	47a8      	blx	r5
            --ip;
        } while (ip >= (int_t)0);
 800296a:	3c01      	subs	r4, #1
 800296c:	d40f      	bmi.n	800298e <QHsm_init_+0xae>
 800296e:	f857 5d04 	ldr.w	r5, [r7, #-4]!
 8002972:	e007      	b.n	8002984 <QHsm_init_+0xa4>
 8002974:	f857 5d04 	ldr.w	r5, [r7, #-4]!
        me->temp.fun = path[0];
                                            /* entry path must not overflow */
        Q_ASSERT(ip < (int_t)QEP_MAX_NEST_DEPTH_);

        do {        /* retrace the entry path in reverse (desired) order... */
            QEP_ENTER_(path[ip]);                         /* enter path[ip] */
 8002978:	4914      	ldr	r1, [pc, #80]	; (80029cc <QHsm_init_+0xec>)
 800297a:	4630      	mov	r0, r6
 800297c:	47a8      	blx	r5
 800297e:	f857 5d04 	ldr.w	r5, [r7, #-4]!
            --ip;
 8002982:	3c01      	subs	r4, #1
        me->temp.fun = path[0];
                                            /* entry path must not overflow */
        Q_ASSERT(ip < (int_t)QEP_MAX_NEST_DEPTH_);

        do {        /* retrace the entry path in reverse (desired) order... */
            QEP_ENTER_(path[ip]);                         /* enter path[ip] */
 8002984:	4630      	mov	r0, r6
 8002986:	4911      	ldr	r1, [pc, #68]	; (80029cc <QHsm_init_+0xec>)
 8002988:	47a8      	blx	r5
            --ip;
        } while (ip >= (int_t)0);
 800298a:	3c01      	subs	r4, #1
 800298c:	d5f2      	bpl.n	8002974 <QHsm_init_+0x94>

        t = path[0];                /* current state becomes the new source */
 800298e:	f8dd a000 	ldr.w	sl, [sp]
    } while (QEP_TRIG_(t, Q_INIT_SIG) == (QState)Q_RET_TRAN);
 8002992:	490f      	ldr	r1, [pc, #60]	; (80029d0 <QHsm_init_+0xf0>)
 8002994:	4630      	mov	r0, r6
 8002996:	47d0      	blx	sl
 8002998:	2804      	cmp	r0, #4
 800299a:	d0c2      	beq.n	8002922 <QHsm_init_+0x42>
        QS_TIME_();                                           /* time stamp */
        QS_OBJ_(me);                           /* this state machine object */
        QS_FUN_(t);                                 /* the new active state */
    QS_END_()

    me->state.fun = t;                   /* change the current active state */
 800299c:	f8c6 a004 	str.w	sl, [r6, #4]
    me->temp.fun  = t;                  /* mark the configuration as stable */
 80029a0:	f8c6 a008 	str.w	sl, [r6, #8]
 80029a4:	4805      	ldr	r0, [pc, #20]	; (80029bc <QHsm_init_+0xdc>)
 80029a6:	4649      	mov	r1, r9
 80029a8:	f7fe f960 	bl	8000c6c <__cyg_profile_func_exit>
}
 80029ac:	b006      	add	sp, #24
 80029ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        while (me->temp.fun != t) {
            ++ip;
            path[ip] = me->temp.fun;
            (void)QEP_TRIG_(me->temp.fun, QEP_EMPTY_SIG_);
        }
        me->temp.fun = path[0];
 80029b2:	60b7      	str	r7, [r6, #8]
 80029b4:	463d      	mov	r5, r7
                           /* the top-most initial transition must be taken */
    Q_ALLEGE((*me->temp.fun)(me, e) == (QState)Q_RET_TRAN);

    do {                                        /* drill into the target... */
        QStateHandler path[QEP_MAX_NEST_DEPTH_];
        int_t ip = (int_t)0;                 /* transition entry path index */
 80029b6:	2400      	movs	r4, #0
 80029b8:	e7d0      	b.n	800295c <QHsm_init_+0x7c>
 80029ba:	bf00      	nop
 80029bc:	080028e1 	.word	0x080028e1
 80029c0:	08002bb5 	.word	0x08002bb5
 80029c4:	080030a0 	.word	0x080030a0
 80029c8:	080030c8 	.word	0x080030c8
 80029cc:	080030cc 	.word	0x080030cc
 80029d0:	080030d4 	.word	0x080030d4

080029d4 <QHsm_ctor>:
* \ingroup qep
* \brief QHsm_ctor() and QHsm_init_() implementation.
*/

/*..........................................................................*/
void QHsm_ctor(QHsm * const me, QStateHandler initial) {
 80029d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029d6:	f642 14d5 	movw	r4, #10709	; 0x29d5
 80029da:	f6c0 0400 	movt	r4, #2048	; 0x800
 80029de:	4605      	mov	r5, r0
 80029e0:	460f      	mov	r7, r1
 80029e2:	4620      	mov	r0, r4
 80029e4:	4671      	mov	r1, lr
 80029e6:	4676      	mov	r6, lr
 80029e8:	f7fe f8d8 	bl	8000b9c <__cyg_profile_func_enter>
        &QHsm_init_,
        &QHsm_dispatch_
    };
    /* do not call the QMsm_ctor() here, see NOTE01 */
    me->vptr  = &vtbl;
    me->state.fun = Q_STATE_CAST(&QHsm_top);
 80029ec:	f642 30b5 	movw	r0, #11189	; 0x2bb5
    static QMsmVtbl const vtbl = {                    /* QHsm virtual table */
        &QHsm_init_,
        &QHsm_dispatch_
    };
    /* do not call the QMsm_ctor() here, see NOTE01 */
    me->vptr  = &vtbl;
 80029f0:	4b05      	ldr	r3, [pc, #20]	; (8002a08 <QHsm_ctor+0x34>)
    me->state.fun = Q_STATE_CAST(&QHsm_top);
    me->temp.fun  = initial;
 80029f2:	60af      	str	r7, [r5, #8]
        &QHsm_init_,
        &QHsm_dispatch_
    };
    /* do not call the QMsm_ctor() here, see NOTE01 */
    me->vptr  = &vtbl;
    me->state.fun = Q_STATE_CAST(&QHsm_top);
 80029f4:	f6c0 0000 	movt	r0, #2048	; 0x800
 80029f8:	6068      	str	r0, [r5, #4]
 80029fa:	4631      	mov	r1, r6
 80029fc:	4620      	mov	r0, r4
    static QMsmVtbl const vtbl = {                    /* QHsm virtual table */
        &QHsm_init_,
        &QHsm_dispatch_
    };
    /* do not call the QMsm_ctor() here, see NOTE01 */
    me->vptr  = &vtbl;
 80029fe:	602b      	str	r3, [r5, #0]
    me->state.fun = Q_STATE_CAST(&QHsm_top);
    me->temp.fun  = initial;
}
 8002a00:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002a04:	f7fe b932 	b.w	8000c6c <__cyg_profile_func_exit>
 8002a08:	080030ac 	.word	0x080030ac

08002a0c <QK_sched_>:
#endif
    return p;
}
/*..........................................................................*/
/* NOTE: the QK scheduler is entered and exited with interrupts DISABLED    */
void QK_sched_(uint8_t p) {
 8002a0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint8_t pin = QK_currPrio_;                /* save the initial priority */
 8002a10:	4c27      	ldr	r4, [pc, #156]	; (8002ab0 <QK_sched_+0xa4>)
 8002a12:	4d28      	ldr	r5, [pc, #160]	; (8002ab4 <QK_sched_+0xa8>)
 8002a14:	4f28      	ldr	r7, [pc, #160]	; (8002ab8 <QK_sched_+0xac>)

        if (p <= pin) {          /* below the current preemption threshold? */
            p = (uint8_t)0;
        }
#ifndef QK_NO_MUTEX
        else if (p <= QK_ceilingPrio_) {        /* below the mutex ceiling? */
 8002a16:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8002ac0 <QK_sched_+0xb4>
#endif
    return p;
}
/*..........................................................................*/
/* NOTE: the QK scheduler is entered and exited with interrupts DISABLED    */
void QK_sched_(uint8_t p) {
 8002a1a:	b085      	sub	sp, #20
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	4671      	mov	r1, lr
 8002a20:	4826      	ldr	r0, [pc, #152]	; (8002abc <QK_sched_+0xb0>)
 8002a22:	f8cd e008 	str.w	lr, [sp, #8]
 8002a26:	9201      	str	r2, [sp, #4]
 8002a28:	f7fe f8b8 	bl	8000b9c <__cyg_profile_func_enter>
    uint8_t pin = QK_currPrio_;                /* save the initial priority */
 8002a2c:	f894 b000 	ldrb.w	fp, [r4]
        QF_INT_DISABLE();                             /* disable interrupts */

#if (QF_MAX_ACTIVE <= 8)                /* new highest-prio AO ready to run */
        QPSet8_findMax(&QK_readySet_, p);
#else
        QPSet64_findMax(&QK_readySet_, p);
 8002a30:	9801      	ldr	r0, [sp, #4]
    return p;
}
/*..........................................................................*/
/* NOTE: the QK scheduler is entered and exited with interrupts DISABLED    */
void QK_sched_(uint8_t p) {
    uint8_t pin = QK_currPrio_;                /* save the initial priority */
 8002a32:	f88d b00f 	strb.w	fp, [sp, #15]
 8002a36:	fa5f f88b 	uxtb.w	r8, fp
        QF_INT_DISABLE();                             /* disable interrupts */

#if (QF_MAX_ACTIVE <= 8)                /* new highest-prio AO ready to run */
        QPSet8_findMax(&QK_readySet_, p);
#else
        QPSet64_findMax(&QK_readySet_, p);
 8002a3a:	462e      	mov	r6, r5
#ifdef QK_TLS                                 /* thread-local storage used? */
    uint8_t pprev = pin;
#endif
    do {
        QEvt const *e;
        a = QF_active_[p];                  /* obtain the pointer to the AO */
 8002a3c:	f857 b020 	ldr.w	fp, [r7, r0, lsl #2]

        QK_currPrio_ = p;         /* this becomes the current task priority */
 8002a40:	7020      	strb	r0, [r4, #0]
            QS_TIME_();                                        /* timestamp */
            QS_U8_(p);                            /* the priority of the AO */
            QS_U8_(pin);                          /* the preempted priority */
        QS_END_NOCRIT_()

        QF_INT_ENABLE();               /* unconditionally enable interrupts */
 8002a42:	2000      	movs	r0, #0
 8002a44:	f380 8811 	msr	BASEPRI, r0

        e = QActive_get_(a);              /* get the next event for this AO */
 8002a48:	4658      	mov	r0, fp
 8002a4a:	f000 f967 	bl	8002d1c <QActive_get_>
 8002a4e:	4682      	mov	sl, r0
        QMSM_DISPATCH(&a->super, e);                  /* dispatch to the AO */
 8002a50:	f8db 0000 	ldr.w	r0, [fp]
 8002a54:	4651      	mov	r1, sl
 8002a56:	6843      	ldr	r3, [r0, #4]
 8002a58:	4658      	mov	r0, fp
 8002a5a:	4798      	blx	r3
        QF_gc(e);                /* garbage collect the event, if necessary */
 8002a5c:	4650      	mov	r0, sl
 8002a5e:	f7ff fea3 	bl	80027a8 <QF_gc>

        QF_INT_DISABLE();                             /* disable interrupts */
 8002a62:	203f      	movs	r0, #63	; 0x3f
 8002a64:	f380 8811 	msr	BASEPRI, r0

#if (QF_MAX_ACTIVE <= 8)                /* new highest-prio AO ready to run */
        QPSet8_findMax(&QK_readySet_, p);
#else
        QPSet64_findMax(&QK_readySet_, p);
 8002a68:	7829      	ldrb	r1, [r5, #0]
 8002a6a:	b949      	cbnz	r1, 8002a80 <QK_sched_+0x74>
            /* empty */
        }
#endif
    } while (p != (uint8_t)0);

    QK_currPrio_ = pin;                     /* restore the initial priority */
 8002a6c:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8002a70:	4812      	ldr	r0, [pc, #72]	; (8002abc <QK_sched_+0xb0>)
 8002a72:	9902      	ldr	r1, [sp, #8]
 8002a74:	7022      	strb	r2, [r4, #0]
    if (pin != (uint8_t)0) {       /* no extended context for the idle loop */
        a = QF_active_[pin];             /* the pointer to the preempted AO */
        QK_TLS(a);                              /* restore the original TLS */
    }
#endif
}
 8002a76:	b005      	add	sp, #20
 8002a78:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a7c:	f7fe b8f6 	b.w	8000c6c <__cyg_profile_func_exit>
        QF_INT_DISABLE();                             /* disable interrupts */

#if (QF_MAX_ACTIVE <= 8)                /* new highest-prio AO ready to run */
        QPSet8_findMax(&QK_readySet_, p);
#else
        QPSet64_findMax(&QK_readySet_, p);
 8002a80:	7832      	ldrb	r2, [r6, #0]
 8002a82:	fab2 f082 	clz	r0, r2
 8002a86:	f1c0 031f 	rsb	r3, r0, #31
 8002a8a:	b2d9      	uxtb	r1, r3
 8002a8c:	1872      	adds	r2, r6, r1
 8002a8e:	7850      	ldrb	r0, [r2, #1]
 8002a90:	fab0 f380 	clz	r3, r0
 8002a94:	f1c3 0220 	rsb	r2, r3, #32
 8002a98:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8002a9c:	f001 00ff 	and.w	r0, r1, #255	; 0xff
#endif

        if (p <= pin) {          /* below the current preemption threshold? */
 8002aa0:	4580      	cmp	r8, r0
 8002aa2:	d2e3      	bcs.n	8002a6c <QK_sched_+0x60>
            p = (uint8_t)0;
        }
#ifndef QK_NO_MUTEX
        else if (p <= QK_ceilingPrio_) {        /* below the mutex ceiling? */
 8002aa4:	f899 3000 	ldrb.w	r3, [r9]
 8002aa8:	4298      	cmp	r0, r3
 8002aaa:	d8c7      	bhi.n	8002a3c <QK_sched_+0x30>
 8002aac:	e7de      	b.n	8002a6c <QK_sched_+0x60>
 8002aae:	bf00      	nop
 8002ab0:	20000134 	.word	0x20000134
 8002ab4:	20000124 	.word	0x20000124
 8002ab8:	20000198 	.word	0x20000198
 8002abc:	08002a0d 	.word	0x08002a0d
 8002ac0:	2000021c 	.word	0x2000021c

08002ac4 <QK_schedPrio_>:
* \brief QK_schedPrio_() and QK_sched_() implementation.
*/

/*..........................................................................*/
/* NOTE: QK schedPrio_() is entered and exited with interrupts DISABLED     */
uint8_t QK_schedPrio_(void) {
 8002ac4:	b538      	push	{r3, r4, r5, lr}
 8002ac6:	4816      	ldr	r0, [pc, #88]	; (8002b20 <QK_schedPrio_+0x5c>)
 8002ac8:	4671      	mov	r1, lr
 8002aca:	4675      	mov	r5, lr
 8002acc:	f7fe f866 	bl	8000b9c <__cyg_profile_func_enter>
    uint8_t p;               /* highest-priority active object ready to run */

#if (QF_MAX_ACTIVE <= 8)  /* determine the highest-priority AO ready to run */
    QPSet8_findMax(&QK_readySet_, p);
#else
    QPSet64_findMax(&QK_readySet_, p);
 8002ad0:	4b14      	ldr	r3, [pc, #80]	; (8002b24 <QK_schedPrio_+0x60>)
 8002ad2:	781c      	ldrb	r4, [r3, #0]
 8002ad4:	b1f4      	cbz	r4, 8002b14 <QK_schedPrio_+0x50>
 8002ad6:	781a      	ldrb	r2, [r3, #0]
 8002ad8:	fab2 f182 	clz	r1, r2
 8002adc:	f1c1 041f 	rsb	r4, r1, #31
 8002ae0:	b2e0      	uxtb	r0, r4
 8002ae2:	181b      	adds	r3, r3, r0
#endif

    if (p <= QK_currPrio_) {     /* below the current preemption threshold? */
 8002ae4:	4910      	ldr	r1, [pc, #64]	; (8002b28 <QK_schedPrio_+0x64>)
    uint8_t p;               /* highest-priority active object ready to run */

#if (QF_MAX_ACTIVE <= 8)  /* determine the highest-priority AO ready to run */
    QPSet8_findMax(&QK_readySet_, p);
#else
    QPSet64_findMax(&QK_readySet_, p);
 8002ae6:	785a      	ldrb	r2, [r3, #1]
#endif

    if (p <= QK_currPrio_) {     /* below the current preemption threshold? */
 8002ae8:	780b      	ldrb	r3, [r1, #0]
    uint8_t p;               /* highest-priority active object ready to run */

#if (QF_MAX_ACTIVE <= 8)  /* determine the highest-priority AO ready to run */
    QPSet8_findMax(&QK_readySet_, p);
#else
    QPSet64_findMax(&QK_readySet_, p);
 8002aea:	fab2 f482 	clz	r4, r2
 8002aee:	f1c4 0220 	rsb	r2, r4, #32
 8002af2:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8002af6:	f000 04ff 	and.w	r4, r0, #255	; 0xff
#endif

    if (p <= QK_currPrio_) {     /* below the current preemption threshold? */
 8002afa:	429c      	cmp	r4, r3
 8002afc:	d90d      	bls.n	8002b1a <QK_schedPrio_+0x56>
        p = (uint8_t)0;
    }
#ifndef QK_NO_MUTEX
    else if (p <= QK_ceilingPrio_) {            /* below the mutex ceiling? */
 8002afe:	490b      	ldr	r1, [pc, #44]	; (8002b2c <QK_schedPrio_+0x68>)
 8002b00:	780b      	ldrb	r3, [r1, #0]
#else
    QPSet64_findMax(&QK_readySet_, p);
#endif

    if (p <= QK_currPrio_) {     /* below the current preemption threshold? */
        p = (uint8_t)0;
 8002b02:	429c      	cmp	r4, r3
 8002b04:	bf98      	it	ls
 8002b06:	2400      	movls	r4, #0
 8002b08:	4805      	ldr	r0, [pc, #20]	; (8002b20 <QK_schedPrio_+0x5c>)
 8002b0a:	4629      	mov	r1, r5
 8002b0c:	f7fe f8ae 	bl	8000c6c <__cyg_profile_func_exit>
    else {
        /* empty */
    }
#endif
    return p;
}
 8002b10:	4620      	mov	r0, r4
 8002b12:	bd38      	pop	{r3, r4, r5, pc}
    QPSet8_findMax(&QK_readySet_, p);
#else
    QPSet64_findMax(&QK_readySet_, p);
#endif

    if (p <= QK_currPrio_) {     /* below the current preemption threshold? */
 8002b14:	4804      	ldr	r0, [pc, #16]	; (8002b28 <QK_schedPrio_+0x64>)
 8002b16:	7803      	ldrb	r3, [r0, #0]
 8002b18:	e7f6      	b.n	8002b08 <QK_schedPrio_+0x44>
        p = (uint8_t)0;
 8002b1a:	2400      	movs	r4, #0
 8002b1c:	e7f4      	b.n	8002b08 <QK_schedPrio_+0x44>
 8002b1e:	bf00      	nop
 8002b20:	08002ac5 	.word	0x08002ac5
 8002b24:	20000124 	.word	0x20000124
 8002b28:	20000134 	.word	0x20000134
 8002b2c:	2000021c 	.word	0x2000021c

08002b30 <QTimeEvt_armX>:
*/

/*..........................................................................*/
void QTimeEvt_armX(QTimeEvt * const me,
                   QTimeEvtCtr const nTicks, QTimeEvtCtr const interval)
{
 8002b30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b34:	4604      	mov	r4, r0
 8002b36:	460e      	mov	r6, r1
 8002b38:	481b      	ldr	r0, [pc, #108]	; (8002ba8 <QTimeEvt_armX+0x78>)
 8002b3a:	4671      	mov	r1, lr
 8002b3c:	4690      	mov	r8, r2
 8002b3e:	4675      	mov	r5, lr
 8002b40:	f7fe f82c 	bl	8000b9c <__cyg_profile_func_enter>
    uint8_t tickRate = (uint8_t)(me->super.refCtr_ & (uint8_t)0x7F);
 8002b44:	78e7      	ldrb	r7, [r4, #3]
    QTimeEvtCtr ctr = me->ctr;
 8002b46:	89a1      	ldrh	r1, [r4, #12]
    QF_CRIT_STAT_

    Q_REQUIRE((me->act != (void *)0)                    /* AO must be valid */
 8002b48:	68a2      	ldr	r2, [r4, #8]

/*..........................................................................*/
void QTimeEvt_armX(QTimeEvt * const me,
                   QTimeEvtCtr const nTicks, QTimeEvtCtr const interval)
{
    uint8_t tickRate = (uint8_t)(me->super.refCtr_ & (uint8_t)0x7F);
 8002b4a:	f007 077f 	and.w	r7, r7, #127	; 0x7f
    QTimeEvtCtr ctr = me->ctr;
 8002b4e:	b288      	uxth	r0, r1
    QF_CRIT_STAT_

    Q_REQUIRE((me->act != (void *)0)                    /* AO must be valid */
 8002b50:	b10a      	cbz	r2, 8002b56 <QTimeEvt_armX+0x26>
 8002b52:	2800      	cmp	r0, #0
 8002b54:	d01f      	beq.n	8002b96 <QTimeEvt_armX+0x66>
 8002b56:	4815      	ldr	r0, [pc, #84]	; (8002bac <QTimeEvt_armX+0x7c>)
 8002b58:	213b      	movs	r1, #59	; 0x3b
 8002b5a:	f7fd fc8b 	bl	8000474 <Q_onAssert>
              && (ctr == (QTimeEvtCtr)0)                /* must be disarmed */
              && (nTicks != (QTimeEvtCtr)0)      /* cannot arm with 0 ticks */
              && (tickRate < (uint8_t)QF_MAX_TICK_RATE) /* must be in range */
              && (me->super.sig >= (QSignal)Q_USER_SIG));   /* valid signal */

    QF_CRIT_ENTRY_();
 8002b5e:	203f      	movs	r0, #63	; 0x3f
 8002b60:	f380 8811 	msr	BASEPRI, r0
    me->ctr = nTicks;
 8002b64:	81a6      	strh	r6, [r4, #12]
    me->interval = interval;
                                 /* is the time event unlinked?, see NOTE01 */
    if ((me->super.refCtr_ & (uint8_t)0x80) == (uint8_t)0) {
 8002b66:	78e1      	ldrb	r1, [r4, #3]
              && (tickRate < (uint8_t)QF_MAX_TICK_RATE) /* must be in range */
              && (me->super.sig >= (QSignal)Q_USER_SIG));   /* valid signal */

    QF_CRIT_ENTRY_();
    me->ctr = nTicks;
    me->interval = interval;
 8002b68:	f8a4 800e 	strh.w	r8, [r4, #14]
                                 /* is the time event unlinked?, see NOTE01 */
    if ((me->super.refCtr_ & (uint8_t)0x80) == (uint8_t)0) {
 8002b6c:	060b      	lsls	r3, r1, #24
 8002b6e:	d409      	bmi.n	8002b84 <QTimeEvt_armX+0x54>
        me->super.refCtr_ |= (uint8_t)0x80;               /* mark as linked */
 8002b70:	78e2      	ldrb	r2, [r4, #3]
        me->next = QF_timeEvtHead_[tickRate].act;             /* see NOTE02 */
 8002b72:	4b0f      	ldr	r3, [pc, #60]	; (8002bb0 <QTimeEvt_armX+0x80>)
    QF_CRIT_ENTRY_();
    me->ctr = nTicks;
    me->interval = interval;
                                 /* is the time event unlinked?, see NOTE01 */
    if ((me->super.refCtr_ & (uint8_t)0x80) == (uint8_t)0) {
        me->super.refCtr_ |= (uint8_t)0x80;               /* mark as linked */
 8002b74:	f042 0080 	orr.w	r0, r2, #128	; 0x80
        me->next = QF_timeEvtHead_[tickRate].act;             /* see NOTE02 */
 8002b78:	eb03 1107 	add.w	r1, r3, r7, lsl #4
    QF_CRIT_ENTRY_();
    me->ctr = nTicks;
    me->interval = interval;
                                 /* is the time event unlinked?, see NOTE01 */
    if ((me->super.refCtr_ & (uint8_t)0x80) == (uint8_t)0) {
        me->super.refCtr_ |= (uint8_t)0x80;               /* mark as linked */
 8002b7c:	70e0      	strb	r0, [r4, #3]
        me->next = QF_timeEvtHead_[tickRate].act;             /* see NOTE02 */
 8002b7e:	688a      	ldr	r2, [r1, #8]
 8002b80:	6062      	str	r2, [r4, #4]
        QF_timeEvtHead_[tickRate].act = me;
 8002b82:	608c      	str	r4, [r1, #8]
        QS_TEC_(nTicks);                             /* the number of ticks */
        QS_TEC_(interval);                                  /* the interval */
        QS_U8_(tickRate);                                      /* tick rate */
    QS_END_NOCRIT_()

    QF_CRIT_EXIT_();
 8002b84:	2000      	movs	r0, #0
 8002b86:	f380 8811 	msr	BASEPRI, r0
 8002b8a:	4807      	ldr	r0, [pc, #28]	; (8002ba8 <QTimeEvt_armX+0x78>)
 8002b8c:	4629      	mov	r1, r5
}
 8002b8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002b92:	f7fe b86b 	b.w	8000c6c <__cyg_profile_func_exit>
{
    uint8_t tickRate = (uint8_t)(me->super.refCtr_ & (uint8_t)0x7F);
    QTimeEvtCtr ctr = me->ctr;
    QF_CRIT_STAT_

    Q_REQUIRE((me->act != (void *)0)                    /* AO must be valid */
 8002b96:	2e00      	cmp	r6, #0
 8002b98:	d0dd      	beq.n	8002b56 <QTimeEvt_armX+0x26>
 8002b9a:	2f01      	cmp	r7, #1
 8002b9c:	d8db      	bhi.n	8002b56 <QTimeEvt_armX+0x26>
 8002b9e:	8823      	ldrh	r3, [r4, #0]
 8002ba0:	2b03      	cmp	r3, #3
 8002ba2:	d8dc      	bhi.n	8002b5e <QTimeEvt_armX+0x2e>
 8002ba4:	e7d7      	b.n	8002b56 <QTimeEvt_armX+0x26>
 8002ba6:	bf00      	nop
 8002ba8:	08002b31 	.word	0x08002b31
 8002bac:	080030b4 	.word	0x080030b4
 8002bb0:	20000178 	.word	0x20000178

08002bb4 <QHsm_top>:
* \ingroup qep
* \brief QHsm_top() implementation.
*/

/*..........................................................................*/
QState QHsm_top(void const * const me, QEvt const * const e) {
 8002bb4:	b538      	push	{r3, r4, r5, lr}
 8002bb6:	f642 34b5 	movw	r4, #11189	; 0x2bb5
 8002bba:	f6c0 0400 	movt	r4, #2048	; 0x800
 8002bbe:	4675      	mov	r5, lr
 8002bc0:	4671      	mov	r1, lr
 8002bc2:	4620      	mov	r0, r4
 8002bc4:	f7fd ffea 	bl	8000b9c <__cyg_profile_func_enter>
 8002bc8:	4620      	mov	r0, r4
 8002bca:	4629      	mov	r1, r5
 8002bcc:	f7fe f84e 	bl	8000c6c <__cyg_profile_func_exit>
    (void)me;            /* suppress the "unused argument" compiler warning */
    (void)e;             /* suppress the "unused argument" compiler warning */
    return Q_IGNORED();                 /* the top state ignores all events */
}
 8002bd0:	2003      	movs	r0, #3
 8002bd2:	bd38      	pop	{r3, r4, r5, pc}

08002bd4 <QTimeEvt_ctorX>:
*/

/*..........................................................................*/
void QTimeEvt_ctorX(QTimeEvt * const me, QActive * const act,
                    enum_t const sig, uint8_t tickRate)
{
 8002bd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002bd8:	4616      	mov	r6, r2
 8002bda:	4604      	mov	r4, r0
 8002bdc:	4688      	mov	r8, r1
 8002bde:	480e      	ldr	r0, [pc, #56]	; (8002c18 <QTimeEvt_ctorX+0x44>)
 8002be0:	4671      	mov	r1, lr
 8002be2:	4675      	mov	r5, lr
 8002be4:	461f      	mov	r7, r3
 8002be6:	f7fd ffd9 	bl	8000b9c <__cyg_profile_func_enter>
    Q_REQUIRE((sig >= (enum_t)Q_USER_SIG)           /* signal must be valid */
 8002bea:	2e03      	cmp	r6, #3
 8002bec:	dd01      	ble.n	8002bf2 <QTimeEvt_ctorX+0x1e>
 8002bee:	2f01      	cmp	r7, #1
 8002bf0:	d903      	bls.n	8002bfa <QTimeEvt_ctorX+0x26>
 8002bf2:	480a      	ldr	r0, [pc, #40]	; (8002c1c <QTimeEvt_ctorX+0x48>)
 8002bf4:	2133      	movs	r1, #51	; 0x33
 8002bf6:	f7fd fc3d 	bl	8000474 <Q_onAssert>
        && (tickRate < (uint8_t)QF_MAX_TICK_RATE));   /* tick rate in range */

    me->next      = (QTimeEvt *)0;
 8002bfa:	2000      	movs	r0, #0
 8002bfc:	6060      	str	r0, [r4, #4]
    me->ctr       = (QTimeEvtCtr)0;
    me->interval  = (QTimeEvtCtr)0;
 8002bfe:	81e0      	strh	r0, [r4, #14]
{
    Q_REQUIRE((sig >= (enum_t)Q_USER_SIG)           /* signal must be valid */
        && (tickRate < (uint8_t)QF_MAX_TICK_RATE));   /* tick rate in range */

    me->next      = (QTimeEvt *)0;
    me->ctr       = (QTimeEvtCtr)0;
 8002c00:	81a0      	strh	r0, [r4, #12]
    me->interval  = (QTimeEvtCtr)0;
    me->super.sig = (QSignal)sig;
    me->act       = act;                                      /* see NOTE01 */
                                   /* time event must be static, see NOTE02 */
    me->super.poolId_ = (uint8_t)0;              /* not from any event pool */
 8002c02:	70a0      	strb	r0, [r4, #2]
 8002c04:	4804      	ldr	r0, [pc, #16]	; (8002c18 <QTimeEvt_ctorX+0x44>)

    me->next      = (QTimeEvt *)0;
    me->ctr       = (QTimeEvtCtr)0;
    me->interval  = (QTimeEvtCtr)0;
    me->super.sig = (QSignal)sig;
    me->act       = act;                                      /* see NOTE01 */
 8002c06:	f8c4 8008 	str.w	r8, [r4, #8]
 8002c0a:	4629      	mov	r1, r5
        && (tickRate < (uint8_t)QF_MAX_TICK_RATE));   /* tick rate in range */

    me->next      = (QTimeEvt *)0;
    me->ctr       = (QTimeEvtCtr)0;
    me->interval  = (QTimeEvtCtr)0;
    me->super.sig = (QSignal)sig;
 8002c0c:	8026      	strh	r6, [r4, #0]
    me->act       = act;                                      /* see NOTE01 */
                                   /* time event must be static, see NOTE02 */
    me->super.poolId_ = (uint8_t)0;              /* not from any event pool */
    me->super.refCtr_ = tickRate;                             /* see NOTE03 */
 8002c0e:	70e7      	strb	r7, [r4, #3]
}
 8002c10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002c14:	f7fe b82a 	b.w	8000c6c <__cyg_profile_func_exit>
 8002c18:	08002bd5 	.word	0x08002bd5
 8002c1c:	080030bc 	.word	0x080030bc

08002c20 <QEQueue_init>:
*/

/*..........................................................................*/
void QEQueue_init(QEQueue * const me, QEvt const *qSto[],
                  uint_t const qLen)
{
 8002c20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c24:	f642 4521 	movw	r5, #11297	; 0x2c21
 8002c28:	f6c0 0500 	movt	r5, #2048	; 0x800
 8002c2c:	4604      	mov	r4, r0
 8002c2e:	460f      	mov	r7, r1
 8002c30:	4690      	mov	r8, r2
 8002c32:	4628      	mov	r0, r5
 8002c34:	4671      	mov	r1, lr
 8002c36:	4676      	mov	r6, lr
 8002c38:	f7fd ffb0 	bl	8000b9c <__cyg_profile_func_enter>
    QS_CRIT_STAT_

    me->frontEvt = (QEvt const *)0;               /* no events in the queue */
    me->ring     = &qSto[0];            /* the beginning of the ring buffer */
    me->end      = (QEQueueCtr)qLen;
 8002c3c:	fa5f f288 	uxtb.w	r2, r8
    me->head     = (QEQueueCtr)0;
    me->tail     = (QEQueueCtr)0;
    me->nFree    = (QEQueueCtr)(qLen + (uint_t)1);   /* +1 for the frontEvt */
 8002c40:	1c51      	adds	r1, r2, #1
void QEQueue_init(QEQueue * const me, QEvt const *qSto[],
                  uint_t const qLen)
{
    QS_CRIT_STAT_

    me->frontEvt = (QEvt const *)0;               /* no events in the queue */
 8002c42:	2300      	movs	r3, #0
    me->ring     = &qSto[0];            /* the beginning of the ring buffer */
    me->end      = (QEQueueCtr)qLen;
    me->head     = (QEQueueCtr)0;
    me->tail     = (QEQueueCtr)0;
    me->nFree    = (QEQueueCtr)(qLen + (uint_t)1);   /* +1 for the frontEvt */
 8002c44:	b2c8      	uxtb	r0, r1
void QEQueue_init(QEQueue * const me, QEvt const *qSto[],
                  uint_t const qLen)
{
    QS_CRIT_STAT_

    me->frontEvt = (QEvt const *)0;               /* no events in the queue */
 8002c46:	6023      	str	r3, [r4, #0]
    me->ring     = &qSto[0];            /* the beginning of the ring buffer */
    me->end      = (QEQueueCtr)qLen;
    me->head     = (QEQueueCtr)0;
 8002c48:	7263      	strb	r3, [r4, #9]
    me->tail     = (QEQueueCtr)0;
 8002c4a:	72a3      	strb	r3, [r4, #10]
    me->nFree    = (QEQueueCtr)(qLen + (uint_t)1);   /* +1 for the frontEvt */
 8002c4c:	72e0      	strb	r0, [r4, #11]
    me->nMin     = me->nFree;
 8002c4e:	7ae1      	ldrb	r1, [r4, #11]
                  uint_t const qLen)
{
    QS_CRIT_STAT_

    me->frontEvt = (QEvt const *)0;               /* no events in the queue */
    me->ring     = &qSto[0];            /* the beginning of the ring buffer */
 8002c50:	6067      	str	r7, [r4, #4]
    me->end      = (QEQueueCtr)qLen;
    me->head     = (QEQueueCtr)0;
    me->tail     = (QEQueueCtr)0;
    me->nFree    = (QEQueueCtr)(qLen + (uint_t)1);   /* +1 for the frontEvt */
    me->nMin     = me->nFree;
 8002c52:	7321      	strb	r1, [r4, #12]
 8002c54:	4628      	mov	r0, r5
 8002c56:	4631      	mov	r1, r6
{
    QS_CRIT_STAT_

    me->frontEvt = (QEvt const *)0;               /* no events in the queue */
    me->ring     = &qSto[0];            /* the beginning of the ring buffer */
    me->end      = (QEQueueCtr)qLen;
 8002c58:	7222      	strb	r2, [r4, #8]

    QS_BEGIN_(QS_QF_EQUEUE_INIT, QS_priv_.eqObjFilter, me)
        QS_OBJ_(me);                                 /* this QEQueue object */
        QS_EQC_(me->end);                        /* the length of the queue */
    QS_END_()
}
 8002c5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002c5e:	f7fe b805 	b.w	8000c6c <__cyg_profile_func_exit>
 8002c62:	bf00      	nop

08002c64 <QMPool_put>:
* disable the warnings for this particular case.
*/
#define QF_PTR_RANGE_(x_, min_, max_)  (((min_) <= (x_)) && ((x_) <= (max_)))

/*..........................................................................*/
void QMPool_put(QMPool * const me, void *b) {
 8002c64:	b570      	push	{r4, r5, r6, lr}
 8002c66:	4604      	mov	r4, r0
 8002c68:	460d      	mov	r5, r1
 8002c6a:	4816      	ldr	r0, [pc, #88]	; (8002cc4 <QMPool_put+0x60>)
 8002c6c:	4671      	mov	r1, lr
 8002c6e:	4676      	mov	r6, lr
 8002c70:	f7fd ff94 	bl	8000b9c <__cyg_profile_func_enter>
    QF_CRIT_STAT_

    Q_REQUIRE(me->nFree < me->nTot);  /* adding one free so, # free < total */
 8002c74:	8a23      	ldrh	r3, [r4, #16]
 8002c76:	89e2      	ldrh	r2, [r4, #14]
 8002c78:	b298      	uxth	r0, r3
 8002c7a:	4282      	cmp	r2, r0
 8002c7c:	d91c      	bls.n	8002cb8 <QMPool_put+0x54>
    Q_REQUIRE(QF_PTR_RANGE_(b, me->start, me->end));  /* b must be in range */
 8002c7e:	6861      	ldr	r1, [r4, #4]
 8002c80:	42a9      	cmp	r1, r5
 8002c82:	d802      	bhi.n	8002c8a <QMPool_put+0x26>
 8002c84:	68a3      	ldr	r3, [r4, #8]
 8002c86:	429d      	cmp	r5, r3
 8002c88:	d903      	bls.n	8002c92 <QMPool_put+0x2e>
 8002c8a:	480f      	ldr	r0, [pc, #60]	; (8002cc8 <QMPool_put+0x64>)
 8002c8c:	213b      	movs	r1, #59	; 0x3b
 8002c8e:	f7fd fbf1 	bl	8000474 <Q_onAssert>

    QF_CRIT_ENTRY_();
 8002c92:	203f      	movs	r0, #63	; 0x3f
 8002c94:	f380 8811 	msr	BASEPRI, r0
    ((QFreeBlock *)b)->next = (QFreeBlock *)me->free_head;/* link into list */
 8002c98:	6822      	ldr	r2, [r4, #0]
 8002c9a:	602a      	str	r2, [r5, #0]
    me->free_head = b;                  /* set as new head of the free list */
 8002c9c:	6025      	str	r5, [r4, #0]
    ++me->nFree;                        /* one more free block in this pool */
 8002c9e:	8a20      	ldrh	r0, [r4, #16]
 8002ca0:	1c41      	adds	r1, r0, #1
 8002ca2:	b28b      	uxth	r3, r1
 8002ca4:	8223      	strh	r3, [r4, #16]
        QS_TIME_();                                            /* timestamp */
        QS_OBJ_(me->start);              /* the memory managed by this pool */
        QS_MPC_(me->nFree);        /* the number of free blocks in the pool */
    QS_END_NOCRIT_()

    QF_CRIT_EXIT_();
 8002ca6:	2000      	movs	r0, #0
 8002ca8:	f380 8811 	msr	BASEPRI, r0
 8002cac:	4805      	ldr	r0, [pc, #20]	; (8002cc4 <QMPool_put+0x60>)
 8002cae:	4631      	mov	r1, r6
}
 8002cb0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8002cb4:	f7fd bfda 	b.w	8000c6c <__cyg_profile_func_exit>

/*..........................................................................*/
void QMPool_put(QMPool * const me, void *b) {
    QF_CRIT_STAT_

    Q_REQUIRE(me->nFree < me->nTot);  /* adding one free so, # free < total */
 8002cb8:	4803      	ldr	r0, [pc, #12]	; (8002cc8 <QMPool_put+0x64>)
 8002cba:	213a      	movs	r1, #58	; 0x3a
 8002cbc:	f7fd fbda 	bl	8000474 <Q_onAssert>
 8002cc0:	e7dd      	b.n	8002c7e <QMPool_put+0x1a>
 8002cc2:	bf00      	nop
 8002cc4:	08002c65 	.word	0x08002c65
 8002cc8:	080030d8 	.word	0x080030d8

08002ccc <QF_getQueueMin>:
    }
    QF_CRIT_EXIT_();
    return e;
}
/*..........................................................................*/
uint_t QF_getQueueMin(uint8_t const prio) {
 8002ccc:	b570      	push	{r4, r5, r6, lr}
 8002cce:	4671      	mov	r1, lr
 8002cd0:	4604      	mov	r4, r0
 8002cd2:	480f      	ldr	r0, [pc, #60]	; (8002d10 <QF_getQueueMin+0x44>)
 8002cd4:	4e0f      	ldr	r6, [pc, #60]	; (8002d14 <QF_getQueueMin+0x48>)
 8002cd6:	4675      	mov	r5, lr
 8002cd8:	f7fd ff60 	bl	8000b9c <__cyg_profile_func_enter>
    uint_t min;
    QF_CRIT_STAT_

    Q_REQUIRE((prio <= (uint8_t)QF_MAX_ACTIVE)
 8002cdc:	2c20      	cmp	r4, #32
 8002cde:	d80f      	bhi.n	8002d00 <QF_getQueueMin+0x34>
 8002ce0:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 8002ce4:	b163      	cbz	r3, 8002d00 <QF_getQueueMin+0x34>
              && (QF_active_[prio] != (QActive *)0));

    QF_CRIT_ENTRY_();
 8002ce6:	203f      	movs	r0, #63	; 0x3f
 8002ce8:	f380 8811 	msr	BASEPRI, r0
    min = (uint_t)QF_active_[prio]->eQueue.nMin;
 8002cec:	7e1c      	ldrb	r4, [r3, #24]
    QF_CRIT_EXIT_();
 8002cee:	2000      	movs	r0, #0
 8002cf0:	f380 8811 	msr	BASEPRI, r0
 8002cf4:	4806      	ldr	r0, [pc, #24]	; (8002d10 <QF_getQueueMin+0x44>)
 8002cf6:	4629      	mov	r1, r5
 8002cf8:	f7fd ffb8 	bl	8000c6c <__cyg_profile_func_exit>

    return min;
}
 8002cfc:	4620      	mov	r0, r4
 8002cfe:	bd70      	pop	{r4, r5, r6, pc}
/*..........................................................................*/
uint_t QF_getQueueMin(uint8_t const prio) {
    uint_t min;
    QF_CRIT_STAT_

    Q_REQUIRE((prio <= (uint8_t)QF_MAX_ACTIVE)
 8002d00:	4805      	ldr	r0, [pc, #20]	; (8002d18 <QF_getQueueMin+0x4c>)
 8002d02:	2166      	movs	r1, #102	; 0x66
 8002d04:	f7fd fbb6 	bl	8000474 <Q_onAssert>
 8002d08:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 8002d0c:	e7eb      	b.n	8002ce6 <QF_getQueueMin+0x1a>
 8002d0e:	bf00      	nop
 8002d10:	08002ccd 	.word	0x08002ccd
 8002d14:	20000198 	.word	0x20000198
 8002d18:	080030e0 	.word	0x080030e0

08002d1c <QActive_get_>:
* \note this source file is only included in the QF library when the native
* QF active object queue is used (instead of a message queue of an RTOS).
*/

/*..........................................................................*/
QEvt const *QActive_get_(QActive * const me) {
 8002d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d1e:	4671      	mov	r1, lr
 8002d20:	4604      	mov	r4, r0
 8002d22:	4823      	ldr	r0, [pc, #140]	; (8002db0 <QActive_get_+0x94>)
 8002d24:	4675      	mov	r5, lr
 8002d26:	f7fd ff39 	bl	8000b9c <__cyg_profile_func_enter>
    QEQueueCtr nFree;
    QEvt const *e;
    QF_CRIT_STAT_
    QF_CRIT_ENTRY_();
 8002d2a:	203f      	movs	r0, #63	; 0x3f
 8002d2c:	f380 8811 	msr	BASEPRI, r0

    QACTIVE_EQUEUE_WAIT_(me);          /* wait for event to arrive directly */
 8002d30:	68e3      	ldr	r3, [r4, #12]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d037      	beq.n	8002da6 <QActive_get_+0x8a>

    e = me->eQueue.frontEvt; /* always remove event from the front location */
 8002d36:	68e6      	ldr	r6, [r4, #12]
    nFree= me->eQueue.nFree + (QEQueueCtr)1;       /* get volatile into tmp */
 8002d38:	7de0      	ldrb	r0, [r4, #23]
    me->eQueue.nFree = nFree;                   /* upate the number of free */

    if (nFree <= me->eQueue.end) {        /* any events in the ring buffer? */
 8002d3a:	7d22      	ldrb	r2, [r4, #20]
    QF_CRIT_ENTRY_();

    QACTIVE_EQUEUE_WAIT_(me);          /* wait for event to arrive directly */

    e = me->eQueue.frontEvt; /* always remove event from the front location */
    nFree= me->eQueue.nFree + (QEQueueCtr)1;       /* get volatile into tmp */
 8002d3c:	1c41      	adds	r1, r0, #1
 8002d3e:	b2cb      	uxtb	r3, r1
    me->eQueue.nFree = nFree;                   /* upate the number of free */

    if (nFree <= me->eQueue.end) {        /* any events in the ring buffer? */
 8002d40:	4293      	cmp	r3, r2

    QACTIVE_EQUEUE_WAIT_(me);          /* wait for event to arrive directly */

    e = me->eQueue.frontEvt; /* always remove event from the front location */
    nFree= me->eQueue.nFree + (QEQueueCtr)1;       /* get volatile into tmp */
    me->eQueue.nFree = nFree;                   /* upate the number of free */
 8002d42:	75e3      	strb	r3, [r4, #23]

    if (nFree <= me->eQueue.end) {        /* any events in the ring buffer? */
 8002d44:	d814      	bhi.n	8002d70 <QActive_get_+0x54>
                                              /* remove event from the tail */
        me->eQueue.frontEvt = QF_PTR_AT_(me->eQueue.ring, me->eQueue.tail);
 8002d46:	7da0      	ldrb	r0, [r4, #22]
 8002d48:	6923      	ldr	r3, [r4, #16]
 8002d4a:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
 8002d4e:	60e1      	str	r1, [r4, #12]
        if (me->eQueue.tail == (QEQueueCtr)0) {   /* need to wrap the tail? */
 8002d50:	7da0      	ldrb	r0, [r4, #22]
 8002d52:	b900      	cbnz	r0, 8002d56 <QActive_get_+0x3a>
            me->eQueue.tail = me->eQueue.end;                /* wrap around */
 8002d54:	75a2      	strb	r2, [r4, #22]
        }
        --me->eQueue.tail;
 8002d56:	7da2      	ldrb	r2, [r4, #22]
 8002d58:	1e53      	subs	r3, r2, #1
 8002d5a:	b2d9      	uxtb	r1, r3
 8002d5c:	75a1      	strb	r1, [r4, #22]
            QS_SIG_(e->sig);                    /* the signal of this event */
            QS_OBJ_(me);                              /* this active object */
            QS_2U8_(e->poolId_, e->refCtr_);         /* pool Id & ref Count */
        QS_END_NOCRIT_()
    }
    QF_CRIT_EXIT_();
 8002d5e:	2000      	movs	r0, #0
 8002d60:	f380 8811 	msr	BASEPRI, r0
 8002d64:	4812      	ldr	r0, [pc, #72]	; (8002db0 <QActive_get_+0x94>)
 8002d66:	4629      	mov	r1, r5
 8002d68:	f7fd ff80 	bl	8000c6c <__cyg_profile_func_exit>
    return e;
}
 8002d6c:	4630      	mov	r0, r6
 8002d6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    else {
        me->eQueue.frontEvt = (QEvt const *)0;       /* queue becomes empty */

                  /* all entries in the queue must be free (+1 for fronEvt) */
        Q_ASSERT(nFree == (me->eQueue.end + (QEQueueCtr)1));
 8002d70:	1c57      	adds	r7, r2, #1
            QS_2U8_(e->poolId_, e->refCtr_);         /* pool Id & ref Count */
            QS_EQC_(nFree);                       /* number of free entries */
        QS_END_NOCRIT_()
    }
    else {
        me->eQueue.frontEvt = (QEvt const *)0;       /* queue becomes empty */
 8002d72:	2000      	movs	r0, #0

                  /* all entries in the queue must be free (+1 for fronEvt) */
        Q_ASSERT(nFree == (me->eQueue.end + (QEQueueCtr)1));
 8002d74:	42bb      	cmp	r3, r7
            QS_2U8_(e->poolId_, e->refCtr_);         /* pool Id & ref Count */
            QS_EQC_(nFree);                       /* number of free entries */
        QS_END_NOCRIT_()
    }
    else {
        me->eQueue.frontEvt = (QEvt const *)0;       /* queue becomes empty */
 8002d76:	60e0      	str	r0, [r4, #12]

                  /* all entries in the queue must be free (+1 for fronEvt) */
        Q_ASSERT(nFree == (me->eQueue.end + (QEQueueCtr)1));
 8002d78:	d003      	beq.n	8002d82 <QActive_get_+0x66>
 8002d7a:	480e      	ldr	r0, [pc, #56]	; (8002db4 <QActive_get_+0x98>)
 8002d7c:	2152      	movs	r1, #82	; 0x52
 8002d7e:	f7fd fb79 	bl	8000474 <Q_onAssert>

        QACTIVE_EQUEUE_ONEMPTY_(me);
 8002d82:	7f22      	ldrb	r2, [r4, #28]
 8002d84:	4c0c      	ldr	r4, [pc, #48]	; (8002db8 <QActive_get_+0x9c>)
 8002d86:	4b0d      	ldr	r3, [pc, #52]	; (8002dbc <QActive_get_+0xa0>)
 8002d88:	5ca0      	ldrb	r0, [r4, r2]
 8002d8a:	4c0d      	ldr	r4, [pc, #52]	; (8002dc0 <QActive_get_+0xa4>)
 8002d8c:	1819      	adds	r1, r3, r0
 8002d8e:	5ca2      	ldrb	r2, [r4, r2]
 8002d90:	784f      	ldrb	r7, [r1, #1]
 8002d92:	403a      	ands	r2, r7
 8002d94:	704a      	strb	r2, [r1, #1]
 8002d96:	2a00      	cmp	r2, #0
 8002d98:	d1e1      	bne.n	8002d5e <QActive_get_+0x42>
 8002d9a:	1820      	adds	r0, r4, r0
 8002d9c:	7819      	ldrb	r1, [r3, #0]
 8002d9e:	7842      	ldrb	r2, [r0, #1]
 8002da0:	400a      	ands	r2, r1
 8002da2:	701a      	strb	r2, [r3, #0]
 8002da4:	e7db      	b.n	8002d5e <QActive_get_+0x42>
    QEQueueCtr nFree;
    QEvt const *e;
    QF_CRIT_STAT_
    QF_CRIT_ENTRY_();

    QACTIVE_EQUEUE_WAIT_(me);          /* wait for event to arrive directly */
 8002da6:	4803      	ldr	r0, [pc, #12]	; (8002db4 <QActive_get_+0x98>)
 8002da8:	2138      	movs	r1, #56	; 0x38
 8002daa:	f7fd fb63 	bl	8000474 <Q_onAssert>
 8002dae:	e7c2      	b.n	8002d36 <QActive_get_+0x1a>
 8002db0:	08002d1d 	.word	0x08002d1d
 8002db4:	080030e0 	.word	0x080030e0
 8002db8:	08002fd4 	.word	0x08002fd4
 8002dbc:	20000124 	.word	0x20000124
 8002dc0:	08003018 	.word	0x08003018

08002dc4 <__register_exitproc>:
 8002dc4:	b510      	push	{r4, lr}
 8002dc6:	4c03      	ldr	r4, [pc, #12]	; (8002dd4 <__register_exitproc+0x10>)
 8002dc8:	b114      	cbz	r4, 8002dd0 <__register_exitproc+0xc>
 8002dca:	f3af 8000 	nop.w
 8002dce:	bd10      	pop	{r4, pc}
 8002dd0:	4620      	mov	r0, r4
 8002dd2:	bd10      	pop	{r4, pc}
 8002dd4:	00000000 	.word	0x00000000

08002dd8 <exit>:
 8002dd8:	b508      	push	{r3, lr}
 8002dda:	4b08      	ldr	r3, [pc, #32]	; (8002dfc <exit+0x24>)
 8002ddc:	4604      	mov	r4, r0
 8002dde:	b11b      	cbz	r3, 8002de8 <exit+0x10>
 8002de0:	2100      	movs	r1, #0
 8002de2:	f3af 8000 	nop.w
 8002de6:	e001      	b.n	8002dec <exit+0x14>
 8002de8:	f000 f80c 	bl	8002e04 <__libc_fini_array>
 8002dec:	4804      	ldr	r0, [pc, #16]	; (8002e00 <exit+0x28>)
 8002dee:	6800      	ldr	r0, [r0, #0]
 8002df0:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8002df2:	b101      	cbz	r1, 8002df6 <exit+0x1e>
 8002df4:	4788      	blx	r1
 8002df6:	4620      	mov	r0, r4
 8002df8:	f000 f848 	bl	8002e8c <_exit>
 8002dfc:	00000000 	.word	0x00000000
 8002e00:	080030ec 	.word	0x080030ec

08002e04 <__libc_fini_array>:
 8002e04:	b570      	push	{r4, r5, r6, lr}
 8002e06:	4b08      	ldr	r3, [pc, #32]	; (8002e28 <__libc_fini_array+0x24>)
 8002e08:	4c08      	ldr	r4, [pc, #32]	; (8002e2c <__libc_fini_array+0x28>)
 8002e0a:	1ae0      	subs	r0, r4, r3
 8002e0c:	1084      	asrs	r4, r0, #2
 8002e0e:	eb03 0684 	add.w	r6, r3, r4, lsl #2
 8002e12:	2500      	movs	r5, #0
 8002e14:	3d04      	subs	r5, #4
 8002e16:	b11c      	cbz	r4, 8002e20 <__libc_fini_array+0x1c>
 8002e18:	5972      	ldr	r2, [r6, r5]
 8002e1a:	4790      	blx	r2
 8002e1c:	3c01      	subs	r4, #1
 8002e1e:	e7f9      	b.n	8002e14 <__libc_fini_array+0x10>
 8002e20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8002e24:	f000 b96a 	b.w	80030fc <_fini>
 8002e28:	08003118 	.word	0x08003118
 8002e2c:	0800311c 	.word	0x0800311c

08002e30 <__libc_init_array>:
 8002e30:	b538      	push	{r3, r4, r5, lr}
 8002e32:	4d0e      	ldr	r5, [pc, #56]	; (8002e6c <__libc_init_array+0x3c>)
 8002e34:	4b0e      	ldr	r3, [pc, #56]	; (8002e70 <__libc_init_array+0x40>)
 8002e36:	1ae8      	subs	r0, r5, r3
 8002e38:	1085      	asrs	r5, r0, #2
 8002e3a:	2400      	movs	r4, #0
 8002e3c:	42ac      	cmp	r4, r5
 8002e3e:	d005      	beq.n	8002e4c <__libc_init_array+0x1c>
 8002e40:	490b      	ldr	r1, [pc, #44]	; (8002e70 <__libc_init_array+0x40>)
 8002e42:	f851 2024 	ldr.w	r2, [r1, r4, lsl #2]
 8002e46:	4790      	blx	r2
 8002e48:	3401      	adds	r4, #1
 8002e4a:	e7f7      	b.n	8002e3c <__libc_init_array+0xc>
 8002e4c:	f000 f950 	bl	80030f0 <_init>
 8002e50:	4908      	ldr	r1, [pc, #32]	; (8002e74 <__libc_init_array+0x44>)
 8002e52:	4a09      	ldr	r2, [pc, #36]	; (8002e78 <__libc_init_array+0x48>)
 8002e54:	1a54      	subs	r4, r2, r1
 8002e56:	10a5      	asrs	r5, r4, #2
 8002e58:	2400      	movs	r4, #0
 8002e5a:	42ac      	cmp	r4, r5
 8002e5c:	d005      	beq.n	8002e6a <__libc_init_array+0x3a>
 8002e5e:	4b05      	ldr	r3, [pc, #20]	; (8002e74 <__libc_init_array+0x44>)
 8002e60:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8002e64:	4780      	blx	r0
 8002e66:	3401      	adds	r4, #1
 8002e68:	e7f7      	b.n	8002e5a <__libc_init_array+0x2a>
 8002e6a:	bd38      	pop	{r3, r4, r5, pc}
 8002e6c:	08003114 	.word	0x08003114
 8002e70:	08003114 	.word	0x08003114
 8002e74:	08003114 	.word	0x08003114
 8002e78:	08003118 	.word	0x08003118

08002e7c <memset>:
 8002e7c:	1882      	adds	r2, r0, r2
 8002e7e:	4603      	mov	r3, r0
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d002      	beq.n	8002e8a <memset+0xe>
 8002e84:	f803 1b01 	strb.w	r1, [r3], #1
 8002e88:	e7fa      	b.n	8002e80 <memset+0x4>
 8002e8a:	4770      	bx	lr

08002e8c <_exit>:
 8002e8c:	e7fe      	b.n	8002e8c <_exit>
 8002e8e:	bf00      	nop

08002e90 <Reset_Handler>:
 8002e90:	2100      	movs	r1, #0
 8002e92:	f000 b804 	b.w	8002e9e <LoopCopyDataInit>

08002e96 <CopyDataInit>:
 8002e96:	4b0c      	ldr	r3, [pc, #48]	; (8002ec8 <LoopFillZerobss+0x12>)
 8002e98:	585b      	ldr	r3, [r3, r1]
 8002e9a:	5043      	str	r3, [r0, r1]
 8002e9c:	3104      	adds	r1, #4

08002e9e <LoopCopyDataInit>:
 8002e9e:	480b      	ldr	r0, [pc, #44]	; (8002ecc <LoopFillZerobss+0x16>)
 8002ea0:	4b0b      	ldr	r3, [pc, #44]	; (8002ed0 <LoopFillZerobss+0x1a>)
 8002ea2:	1842      	adds	r2, r0, r1
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	f4ff aff6 	bcc.w	8002e96 <CopyDataInit>
 8002eaa:	4a0a      	ldr	r2, [pc, #40]	; (8002ed4 <LoopFillZerobss+0x1e>)
 8002eac:	f000 b803 	b.w	8002eb6 <LoopFillZerobss>

08002eb0 <FillZerobss>:
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	f842 3b04 	str.w	r3, [r2], #4

08002eb6 <LoopFillZerobss>:
 8002eb6:	4b08      	ldr	r3, [pc, #32]	; (8002ed8 <LoopFillZerobss+0x22>)
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	f4ff aff9 	bcc.w	8002eb0 <FillZerobss>
 8002ebe:	f7fd fa33 	bl	8000328 <SystemInit>
 8002ec2:	f7fd fc0f 	bl	80006e4 <main>
 8002ec6:	4770      	bx	lr
 8002ec8:	0800311c 	.word	0x0800311c
 8002ecc:	20000000 	.word	0x20000000
 8002ed0:	200000a8 	.word	0x200000a8
 8002ed4:	200000ac 	.word	0x200000ac
 8002ed8:	20000220 	.word	0x20000220

08002edc <ADC1_IRQHandler>:
 8002edc:	f7ff bffe 	b.w	8002edc <ADC1_IRQHandler>

08002ee0 <QK_init>:
    .section .text.QK_init
    .global QK_init
    .type   QK_init, %function

QK_init:
    MRS     r0,PRIMASK        /* store the state of the PRIMASK in r0       */
 8002ee0:	f3ef 8010 	mrs	r0, PRIMASK
    CPSID   i                 /* disable interrupts (set PRIMASK)           */
 8002ee4:	b672      	cpsid	i

    LDR     r1,=0xE000ED18    /* System Handler Priority Register           */
 8002ee6:	4906      	ldr	r1, [pc, #24]	; (8002f00 <QK_init+0x20>)
    LDR     r2,[r1,#8]        /* load the System 12-15 Priority Register    */
 8002ee8:	688a      	ldr	r2, [r1, #8]
    MOVS    r3,#0xFF
 8002eea:	23ff      	movs	r3, #255	; 0xff
    LSLS    r3,r3,#16
 8002eec:	041b      	lsls	r3, r3, #16
    ORRS    r2,r3             /* set PRI_14 (PendSV) to 0xFF                */
 8002eee:	431a      	orrs	r2, r3
    STR     r2,[r1,#8]        /* write the System 12-15 Priority Register   */
 8002ef0:	608a      	str	r2, [r1, #8]
    LDR     r2,[r1,#4]        /* load the System 8-11 Priority Register     */
 8002ef2:	684a      	ldr	r2, [r1, #4]
    LSLS    r3,r3,#8
 8002ef4:	021b      	lsls	r3, r3, #8
    BICS    r2,r3             /* set PRI_11 (SVCall) to 0x00                */
 8002ef6:	439a      	bics	r2, r3
    STR     r2,[r1,#4]        /* write the System 8-11 Priority Register    */
 8002ef8:	604a      	str	r2, [r1, #4]

    MSR     PRIMASK,r0        /* restore the original PRIMASK               */
 8002efa:	f380 8810 	msr	PRIMASK, r0
    BX      lr                /* return to the caller                       */
 8002efe:	4770      	bx	lr

QK_init:
    MRS     r0,PRIMASK        /* store the state of the PRIMASK in r0       */
    CPSID   i                 /* disable interrupts (set PRIMASK)           */

    LDR     r1,=0xE000ED18    /* System Handler Priority Register           */
 8002f00:	e000ed18 	.word	0xe000ed18

08002f04 <PendSV_Handler>:
    .global PendSV_Handler    /* CMSIS-compliant exception name             */
    .type   PendSV_Handler, %function
    .type   svc_ret, %function /* to ensure that the svc_ret label is THUMB */

PendSV_Handler:
    PUSH    {lr}              /* push the exception lr (EXC_RETURN)         */
 8002f04:	b500      	push	{lr}

    .ifdef  ARM_ARCH_V6M      /* Cortex-M0/M0+/M1 (v6-M, v6S-M)?            */
    CPSID   i                 /* disable interrupts at processor level      */
    .else                     /* Cortex-M3/M4/M4F                           */
    MOVS    r0,#(0xFF >> 2)   /* Keep in synch with QF_BASEPRI in qf_port.h!*/
 8002f06:	203f      	movs	r0, #63	; 0x3f
    MSR     BASEPRI,r0        /* disable interrupts at processor level      */
 8002f08:	f380 8811 	msr	BASEPRI, r0
    .endif

    BL      QK_schedPrio_     /* check if we have preemption                */
 8002f0c:	f7ff fdda 	bl	8002ac4 <QK_schedPrio_>
    CMP     r0,#0             /* is prio == 0 ?                             */
 8002f10:	2800      	cmp	r0, #0
    BNE.N   scheduler         /* if prio != 0, branch to scheduler          */
 8002f12:	d103      	bne.n	8002f1c <scheduler>

    .ifdef  ARM_ARCH_V6M      /* Cortex-M0/M0+/M1 (v6-M, v6S-M)?            */
    CPSIE   i                 /* enable interrupts at processor level       */
    .else                     /* Cortex-M3/M4/M4F                           */
    MSR     BASEPRI,r0        /* enable interrupts (r0 == 0 at this point)  */
 8002f14:	f380 8811 	msr	BASEPRI, r0
    .endif

    POP     {r0}              /* pop the EXC_RETURN into r0 (low register)  */
 8002f18:	bc01      	pop	{r0}
    BX      r0                /* exception-return to the task               */
 8002f1a:	4700      	bx	r0

08002f1c <scheduler>:

scheduler:
    SUB     sp,sp,#4          /* align the stack to 8-byte boundary         */
 8002f1c:	b081      	sub	sp, #4
    MOVS    r3,#1
 8002f1e:	2301      	movs	r3, #1
    LSLS    r3,r3,#24         /* r3:=(1 << 24), set the T bit  (new xpsr)   */
 8002f20:	061b      	lsls	r3, r3, #24
    LDR     r2,=QK_sched_     /* address of the QK scheduler   (new pc)     */
 8002f22:	4a06      	ldr	r2, [pc, #24]	; (8002f3c <svc_ret+0xa>)
    LDR     r1,=svc_ret       /* return address after the call (new lr)     */
 8002f24:	4906      	ldr	r1, [pc, #24]	; (8002f40 <svc_ret+0xe>)
    PUSH    {r1-r3}           /* push xpsr,pc,lr                            */
 8002f26:	b40e      	push	{r1, r2, r3}
    SUB     sp,sp,#(4*4)      /* don't care for r12,r3,r2,r1                */
 8002f28:	b084      	sub	sp, #16
    PUSH    {r0}              /* push the prio argument        (new r0)     */
 8002f2a:	b401      	push	{r0}
    MOVS    r0,#0x6
 8002f2c:	2006      	movs	r0, #6
    MVNS    r0,r0             /* r0 := ~0x6 == 0xFFFFFFF9                   */
 8002f2e:	43c0      	mvns	r0, r0
    BX      r0                /* exception-return to the scheduler          */
 8002f30:	4700      	bx	r0

08002f32 <svc_ret>:

svc_ret:
    .ifdef  ARM_ARCH_V6M      /* Cortex-M0/M0+/M1 (v6-M, v6S-M)?            */
    CPSIE   i                 /* enable interrupts to allow SVCall exception*/
    .else                     /* Cortex-M3/M4/M4F                           */
    MOVS    r0,#0
 8002f32:	2000      	movs	r0, #0
    MSR     BASEPRI,r0        /* enable interrupts to allow SVCall exception*/
 8002f34:	f380 8811 	msr	BASEPRI, r0
    MOVS    r1,#4             /* r1 := 0x04 (FPCA bit)                      */
    BICS    r0,r1             /* r0 := r0 & ~r1                             */
    MSR     CONTROL,r0        /* CONTROL := r0                              */
    .endif

    SVC     #0                /* SV exception returns to the preempted task */
 8002f38:	df00      	svc	0
 8002f3a:	0000      	.short	0x0000

scheduler:
    SUB     sp,sp,#4          /* align the stack to 8-byte boundary         */
    MOVS    r3,#1
    LSLS    r3,r3,#24         /* r3:=(1 << 24), set the T bit  (new xpsr)   */
    LDR     r2,=QK_sched_     /* address of the QK scheduler   (new pc)     */
 8002f3c:	08002a0d 	.word	0x08002a0d
    LDR     r1,=svc_ret       /* return address after the call (new lr)     */
 8002f40:	08002f33 	.word	0x08002f33

08002f44 <SVC_Handler>:
    .section .text.SVC_Handler
    .global SVC_Handler       /* CMSIS-compliant exception name             */
    .type   SVC_Handler, %function

SVC_Handler:
    ADD     sp,sp,#(9*4)      /* remove one 8-register exception frame      */
 8002f44:	b009      	add	sp, #36	; 0x24
                              /* plus the "aligner" from the stack          */
    POP     {r0}              /* pop the original EXC_RETURN into r0        */
 8002f46:	bc01      	pop	{r0}
    BX      r0                /* return to the preempted task               */
 8002f48:	4700      	bx	r0
 8002f4a:	0000      	movs	r0, r0
 8002f4c:	3a450a0d 	.word	0x3a450a0d
 8002f50:	30307830 	.word	0x30307830
 8002f54:	30303030 	.word	0x30303030
 8002f58:	0d0a3030 	.word	0x0d0a3030
 8002f5c:	00000000 	.word	0x00000000
 8002f60:	3a580a0d 	.word	0x3a580a0d
 8002f64:	30307830 	.word	0x30307830
 8002f68:	30303030 	.word	0x30303030
 8002f6c:	0d0a3030 	.word	0x0d0a3030
 8002f70:	00000000 	.word	0x00000000

08002f74 <vtbl.3948>:
 8002f74:	080028e1 080025a1 08001e99 08002251     .(...%......Q"..
 8002f84:	0800281d                                .(..

08002f88 <Q_this_module_>:
 8002f88:	00006b71                                qk..

08002f8c <Q_this_module_>:
 8002f8c:	705f6671 006c6f6f                       qf_pool.

08002f94 <Q_this_module_>:
 8002f94:	745f6671 006b6369                       qf_tick.

08002f9c <Q_this_module_>:
 8002f9c:	5f706d71 74696e69 00000000              qmp_init....

08002fa8 <Q_this_module_>:
 8002fa8:	665f6171 006f6669                       qa_fifo.

08002fb0 <Q_this_module_>:
 8002fb0:	615f6671 00007463                       qf_act..

08002fb8 <Q_this_module_>:
 8002fb8:	6d736871 7369645f 00000000              qhsm_dis....

08002fc4 <Q_this_module_>:
 8002fc4:	675f6671 00000063                       qf_gc...

08002fcc <Q_this_module_>:
 8002fcc:	6c5f6171 006f6669                       qa_lifo.

08002fd4 <QF_div8Lkup>:
	...
 8002fdc:	01010100 01010101 02020201 02020202     ................
 8002fec:	03030302 03030303 04040403 04040404     ................
 8002ffc:	05050504 05050505 06060605 06060606     ................
 800300c:	07070706 07070707 00000007              ............

08003018 <QF_invPwr2Lkup>:
 8003018:	fbfdfeff bfdfeff7 fbfdfe7f bfdfeff7     ................
 8003028:	fbfdfe7f bfdfeff7 fbfdfe7f bfdfeff7     ................
 8003038:	fbfdfe7f bfdfeff7 fbfdfe7f bfdfeff7     ................
 8003048:	fbfdfe7f bfdfeff7 fbfdfe7f bfdfeff7     ................
 8003058:	0000007f                                ....

0800305c <QF_pwr2Lkup>:
 800305c:	04020100 40201008 04020180 40201008     ...... @...... @
 800306c:	04020180 40201008 04020180 40201008     ...... @...... @
 800307c:	04020180 40201008 04020180 40201008     ...... @...... @
 800308c:	04020180 40201008 04020180 40201008     ...... @...... @
 800309c:	00000080                                ....

080030a0 <Q_this_module_>:
 80030a0:	6d736871 696e695f 00000000              qhsm_ini....

080030ac <vtbl.3738>:
 80030ac:	080028e1 080025a1                       .(...%..

080030b4 <Q_this_module_>:
 80030b4:	5f657471 006d7261                       qte_arm.

080030bc <Q_this_module_>:
 80030bc:	5f657471 726f7463 00000000              qte_ctor....

080030c8 <QEP_reservedEvt_>:
 80030c8:	00000000 00000001 00000002 00000003     ................

080030d8 <Q_this_module_>:
 80030d8:	5f706d71 00747570                       qmp_put.

080030e0 <Q_this_module_>:
 80030e0:	675f6171 005f7465 00000043              qa_get_.C...

080030ec <_global_impure_ptr>:
 80030ec:	20000040                                @.. 

080030f0 <_init>:
 80030f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030f2:	bf00      	nop
 80030f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030f6:	bc08      	pop	{r3}
 80030f8:	469e      	mov	lr, r3
 80030fa:	4770      	bx	lr

080030fc <_fini>:
 80030fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030fe:	bf00      	nop
 8003100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003102:	bc08      	pop	{r3}
 8003104:	469e      	mov	lr, r3
 8003106:	4770      	bx	lr

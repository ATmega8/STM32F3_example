
main.elf:     file format elf32-littlearm


Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	; (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4804      	ldr	r0, [pc, #16]	; (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b110      	cbz	r0, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2101      	movs	r1, #1
 8000198:	7021      	strb	r1, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	200000a8 	.word	0x200000a8
 80001a0:	00000000 	.word	0x00000000
 80001a4:	08001a0c 	.word	0x08001a0c

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b06      	ldr	r3, [pc, #24]	; (80001c4 <frame_dummy+0x1c>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4806      	ldr	r0, [pc, #24]	; (80001c8 <frame_dummy+0x20>)
 80001b0:	4906      	ldr	r1, [pc, #24]	; (80001cc <frame_dummy+0x24>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	4806      	ldr	r0, [pc, #24]	; (80001d0 <frame_dummy+0x28>)
 80001b8:	6801      	ldr	r1, [r0, #0]
 80001ba:	b111      	cbz	r1, 80001c2 <frame_dummy+0x1a>
 80001bc:	4a05      	ldr	r2, [pc, #20]	; (80001d4 <frame_dummy+0x2c>)
 80001be:	b102      	cbz	r2, 80001c2 <frame_dummy+0x1a>
 80001c0:	4790      	blx	r2
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08001a0c 	.word	0x08001a0c
 80001cc:	200000ac 	.word	0x200000ac
 80001d0:	200000a4 	.word	0x200000a4
 80001d4:	00000000 	.word	0x00000000

080001d8 <_mainCRTStartup>:
 80001d8:	4b15      	ldr	r3, [pc, #84]	; (8000230 <_mainCRTStartup+0x58>)
 80001da:	2b00      	cmp	r3, #0
 80001dc:	bf08      	it	eq
 80001de:	4b13      	ldreq	r3, [pc, #76]	; (800022c <_mainCRTStartup+0x54>)
 80001e0:	469d      	mov	sp, r3
 80001e2:	f5a3 3a80 	sub.w	sl, r3, #65536	; 0x10000
 80001e6:	2100      	movs	r1, #0
 80001e8:	468b      	mov	fp, r1
 80001ea:	460f      	mov	r7, r1
 80001ec:	4813      	ldr	r0, [pc, #76]	; (800023c <_mainCRTStartup+0x64>)
 80001ee:	4a14      	ldr	r2, [pc, #80]	; (8000240 <_mainCRTStartup+0x68>)
 80001f0:	1a12      	subs	r2, r2, r0
 80001f2:	f001 fbad 	bl	8001950 <memset>
 80001f6:	4b0f      	ldr	r3, [pc, #60]	; (8000234 <_mainCRTStartup+0x5c>)
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	d000      	beq.n	80001fe <_mainCRTStartup+0x26>
 80001fc:	4798      	blx	r3
 80001fe:	4b0e      	ldr	r3, [pc, #56]	; (8000238 <_mainCRTStartup+0x60>)
 8000200:	2b00      	cmp	r3, #0
 8000202:	d000      	beq.n	8000206 <_mainCRTStartup+0x2e>
 8000204:	4798      	blx	r3
 8000206:	2000      	movs	r0, #0
 8000208:	2100      	movs	r1, #0
 800020a:	4604      	mov	r4, r0
 800020c:	460d      	mov	r5, r1
 800020e:	2000      	movs	r0, #0
 8000210:	490c      	ldr	r1, [pc, #48]	; (8000244 <_mainCRTStartup+0x6c>)
 8000212:	2200      	movs	r2, #0
 8000214:	2300      	movs	r3, #0
 8000216:	f001 fb3f 	bl	8001898 <__register_exitproc>
 800021a:	f001 fb73 	bl	8001904 <__libc_init_array>
 800021e:	4620      	mov	r0, r4
 8000220:	4629      	mov	r1, r5
 8000222:	f001 fb9f 	bl	8001964 <main>
 8000226:	f001 fb41 	bl	80018ac <exit>
 800022a:	bf00      	nop
 800022c:	00080000 	.word	0x00080000
	...
 800023c:	200000a8 	.word	0x200000a8
 8000240:	200000cc 	.word	0x200000cc
 8000244:	080018d9 	.word	0x080018d9

08000248 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000248:	4770      	bx	lr
 800024a:	bf00      	nop

0800024c <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800024c:	e7fe      	b.n	800024c <HardFault_Handler>
 800024e:	bf00      	nop

08000250 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000250:	e7fe      	b.n	8000250 <MemManage_Handler>
 8000252:	bf00      	nop

08000254 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000254:	e7fe      	b.n	8000254 <BusFault_Handler>
 8000256:	bf00      	nop

08000258 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000258:	e7fe      	b.n	8000258 <UsageFault_Handler>
 800025a:	bf00      	nop

0800025c <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800025c:	4770      	bx	lr
 800025e:	bf00      	nop

08000260 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000260:	4770      	bx	lr
 8000262:	bf00      	nop

08000264 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000264:	4770      	bx	lr
 8000266:	bf00      	nop

08000268 <USART2_IRQHandler>:
static uint16_t rx_buf = 0;
static uint16_t tx_buf = 0;
static uint16_t tx_temp = 0;
void USART2_IRQHandler(void) 
{
	if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET)
 8000268:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 800026c:	f240 1105 	movw	r1, #261	; 0x105
static uint8_t counter = 0;
static uint16_t rx_buf = 0;
static uint16_t tx_buf = 0;
static uint16_t tx_temp = 0;
void USART2_IRQHandler(void) 
{
 8000270:	b510      	push	{r4, lr}
	if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET)
 8000272:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000276:	f2c0 0105 	movt	r1, #5
 800027a:	f001 f8ff 	bl	800147c <USART_GetITStatus>
 800027e:	b180      	cbz	r0, 80002a2 <USART2_IRQHandler+0x3a>
	{
		if(counter == 0)
 8000280:	4c15      	ldr	r4, [pc, #84]	; (80002d8 <USART2_IRQHandler+0x70>)
 8000282:	7823      	ldrb	r3, [r4, #0]
 8000284:	b173      	cbz	r3, 80002a4 <USART2_IRQHandler+0x3c>
		{
			rx_buf = USART_ReceiveData(USART2);
			counter = 1;
		}
		else if(counter == 1)
 8000286:	2b01      	cmp	r3, #1
 8000288:	d016      	beq.n	80002b8 <USART2_IRQHandler+0x50>
		{
			rx_buf = USART_ReceiveData(USART2);
			SPI_I2S_SendData16(SPI1, rx_buf);
		}
		USART_ClearITPendingBit(USART2, USART_IT_RXNE);
 800028a:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 800028e:	f240 1105 	movw	r1, #261	; 0x105
 8000292:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000296:	f2c0 0105 	movt	r1, #5
	}
}
 800029a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		else if(counter == 1)
		{
			rx_buf = USART_ReceiveData(USART2);
			SPI_I2S_SendData16(SPI1, rx_buf);
		}
		USART_ClearITPendingBit(USART2, USART_IT_RXNE);
 800029e:	f001 b90d 	b.w	80014bc <USART_ClearITPendingBit>
 80002a2:	bd10      	pop	{r4, pc}
{
	if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET)
	{
		if(counter == 0)
		{
			rx_buf = USART_ReceiveData(USART2);
 80002a4:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 80002a8:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80002ac:	f000 fff0 	bl	8001290 <USART_ReceiveData>
 80002b0:	8060      	strh	r0, [r4, #2]
			counter = 1;
 80002b2:	2001      	movs	r0, #1
 80002b4:	7020      	strb	r0, [r4, #0]
 80002b6:	e7e8      	b.n	800028a <USART2_IRQHandler+0x22>
		}
		else if(counter == 1)
		{
			rx_buf = USART_ReceiveData(USART2);
 80002b8:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 80002bc:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80002c0:	f000 ffe6 	bl	8001290 <USART_ReceiveData>
 80002c4:	4602      	mov	r2, r0
			SPI_I2S_SendData16(SPI1, rx_buf);
 80002c6:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 80002ca:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80002ce:	4611      	mov	r1, r2
			rx_buf = USART_ReceiveData(USART2);
			counter = 1;
		}
		else if(counter == 1)
		{
			rx_buf = USART_ReceiveData(USART2);
 80002d0:	8062      	strh	r2, [r4, #2]
			SPI_I2S_SendData16(SPI1, rx_buf);
 80002d2:	f000 fe1b 	bl	8000f0c <SPI_I2S_SendData16>
 80002d6:	e7d8      	b.n	800028a <USART2_IRQHandler+0x22>
 80002d8:	200000c4 	.word	0x200000c4

080002dc <SPI1_IRQHandler>:
	}
}

void SPI1_IRQHandler(void)
{
	if(SPI_I2S_GetITStatus(SPI1, SPI_I2S_IT_TXE) != RESET)
 80002dc:	f44f 5040 	mov.w	r0, #12288	; 0x3000
		USART_ClearITPendingBit(USART2, USART_IT_RXNE);
	}
}

void SPI1_IRQHandler(void)
{
 80002e0:	b538      	push	{r3, r4, r5, lr}
	if(SPI_I2S_GetITStatus(SPI1, SPI_I2S_IT_TXE) != RESET)
 80002e2:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80002e6:	2171      	movs	r1, #113	; 0x71
 80002e8:	f000 fe7a 	bl	8000fe0 <SPI_I2S_GetITStatus>
 80002ec:	b900      	cbnz	r0, 80002f0 <SPI1_IRQHandler+0x14>
 80002ee:	bd38      	pop	{r3, r4, r5, pc}
	{
		tx_temp = USART_ReceiveData(USART2);
 80002f0:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 80002f4:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80002f8:	f000 ffca 	bl	8001290 <USART_ReceiveData>
 80002fc:	4c0f      	ldr	r4, [pc, #60]	; (800033c <SPI1_IRQHandler+0x60>)
		
			if((tx_temp & 0x0100) != 0)
 80002fe:	f400 7380 	and.w	r3, r0, #256	; 0x100
 8000302:	b29a      	uxth	r2, r3

void SPI1_IRQHandler(void)
{
	if(SPI_I2S_GetITStatus(SPI1, SPI_I2S_IT_TXE) != RESET)
	{
		tx_temp = USART_ReceiveData(USART2);
 8000304:	80a0      	strh	r0, [r4, #4]
		
			if((tx_temp & 0x0100) != 0)
			{
				if((tx_buf & 0x00FF) != 0)
 8000306:	88e1      	ldrh	r1, [r4, #6]
{
	if(SPI_I2S_GetITStatus(SPI1, SPI_I2S_IT_TXE) != RESET)
	{
		tx_temp = USART_ReceiveData(USART2);
		
			if((tx_temp & 0x0100) != 0)
 8000308:	b162      	cbz	r2, 8000324 <SPI1_IRQHandler+0x48>
			{
				if((tx_buf & 0x00FF) != 0)
 800030a:	f011 0fff 	tst.w	r1, #255	; 0xff
 800030e:	d0ee      	beq.n	80002ee <SPI1_IRQHandler+0x12>
				{
					tx_buf |= (uint8_t)(tx_temp & 0x0100);
					SPI_I2S_SendData16(SPI1, tx_buf);
 8000310:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 8000314:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8000318:	f000 fdf8 	bl	8000f0c <SPI_I2S_SendData16>
					tx_buf = 0;
 800031c:	2000      	movs	r0, #0
 800031e:	80e0      	strh	r0, [r4, #6]
					tx_temp = 0;
 8000320:	80a0      	strh	r0, [r4, #4]
 8000322:	bd38      	pop	{r3, r4, r5, pc}
				}
			}
			else
			{	
				if((tx_buf & 0x00FF) == 0)
 8000324:	f011 05ff 	ands.w	r5, r1, #255	; 0xff
 8000328:	d1e1      	bne.n	80002ee <SPI1_IRQHandler+0x12>
				{
					tx_buf |= (uint8_t)((tx_temp & 0x0100) << 8);
					SPI_I2S_SendData16(SPI1, tx_buf);
 800032a:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 800032e:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8000332:	f000 fdeb 	bl	8000f0c <SPI_I2S_SendData16>
					tx_buf = 0;
 8000336:	80e5      	strh	r5, [r4, #6]
					tx_temp = 0;
 8000338:	80a5      	strh	r5, [r4, #4]
 800033a:	e7d8      	b.n	80002ee <SPI1_IRQHandler+0x12>
 800033c:	200000c4 	.word	0x200000c4

08000340 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000340:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 8000344:	f2ce 0200 	movt	r2, #57344	; 0xe000
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000348:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800034c:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000350:	f2c4 0302 	movt	r3, #16386	; 0x4002
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000354:	f441 0070 	orr.w	r0, r1, #15728640	; 0xf00000
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000358:	b410      	push	{r4}
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800035a:	f8c2 0088 	str.w	r0, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800035e:	681c      	ldr	r4, [r3, #0]
 8000360:	f044 0201 	orr.w	r2, r4, #1
 8000364:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00C;
 8000366:	6859      	ldr	r1, [r3, #4]
 8000368:	f24c 000c 	movw	r0, #49164	; 0xc00c
 800036c:	f6cf 007f 	movt	r0, #63615	; 0xf87f
 8000370:	4008      	ands	r0, r1
 8000372:	6058      	str	r0, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000374:	681c      	ldr	r4, [r3, #0]
 8000376:	f024 7284 	bic.w	r2, r4, #17301504	; 0x1080000
 800037a:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 800037e:	6019      	str	r1, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000380:	6818      	ldr	r0, [r3, #0]
 8000382:	f420 2480 	bic.w	r4, r0, #262144	; 0x40000
 8000386:	601c      	str	r4, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000388:	685a      	ldr	r2, [r3, #4]
 800038a:	f422 01fe 	bic.w	r1, r2, #8323072	; 0x7f0000
 800038e:	6059      	str	r1, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8000390:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8000392:	f020 040f 	bic.w	r4, r0, #15
 8000396:	62dc      	str	r4, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 8000398:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 800039a:	f64f 42cc 	movw	r2, #64716	; 0xfccc
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
#if defined (PLL_SOURCE_HSI)
  /* At this stage the HSI is already enabled */

  /* Enable Prefetch Buffer and set Flash Latency */
  FLASH->ACR = FLASH_ACR_PRFTBE | FLASH_ACR_LATENCY_1;
 800039e:	f44f 5000 	mov.w	r0, #8192	; 0x2000

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 80003a2:	f6cf 7200 	movt	r2, #65280	; 0xff00
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80003a6:	b083      	sub	sp, #12
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
#if defined (PLL_SOURCE_HSI)
  /* At this stage the HSI is already enabled */

  /* Enable Prefetch Buffer and set Flash Latency */
  FLASH->ACR = FLASH_ACR_PRFTBE | FLASH_ACR_LATENCY_1;
 80003a8:	f2c4 0002 	movt	r0, #16386	; 0x4002

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 80003ac:	4022      	ands	r2, r4
 80003ae:	631a      	str	r2, [r3, #48]	; 0x30
  
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80003b0:	2100      	movs	r1, #0
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
#if defined (PLL_SOURCE_HSI)
  /* At this stage the HSI is already enabled */

  /* Enable Prefetch Buffer and set Flash Latency */
  FLASH->ACR = FLASH_ACR_PRFTBE | FLASH_ACR_LATENCY_1;
 80003b2:	2212      	movs	r2, #18

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
  
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80003b4:	6099      	str	r1, [r3, #8]
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80003b6:	9100      	str	r1, [sp, #0]
 80003b8:	9101      	str	r1, [sp, #4]
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
#if defined (PLL_SOURCE_HSI)
  /* At this stage the HSI is already enabled */

  /* Enable Prefetch Buffer and set Flash Latency */
  FLASH->ACR = FLASH_ACR_PRFTBE | FLASH_ACR_LATENCY_1;
 80003ba:	6002      	str	r2, [r0, #0]
 
  /* HCLK = SYSCLK */
  RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80003bc:	6858      	ldr	r0, [r3, #4]
 80003be:	6058      	str	r0, [r3, #4]
      
  /* PCLK = HCLK */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2 | (uint32_t)RCC_CFGR_PPRE2_DIV1;
 80003c0:	6859      	ldr	r1, [r3, #4]
 80003c2:	f441 6280 	orr.w	r2, r1, #1024	; 0x400
 80003c6:	605a      	str	r2, [r3, #4]

  /* PLL configuration */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 80003c8:	6858      	ldr	r0, [r3, #4]
 80003ca:	f420 117c 	bic.w	r1, r0, #4128768	; 0x3f0000
 80003ce:	6059      	str	r1, [r3, #4]
  RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSI_Div2 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL16);
 80003d0:	685a      	ldr	r2, [r3, #4]
 80003d2:	f442 1060 	orr.w	r0, r2, #3670016	; 0x380000
 80003d6:	6058      	str	r0, [r3, #4]
            
  /* Enable PLL */
  RCC->CR |= RCC_CR_PLLON;
 80003d8:	6819      	ldr	r1, [r3, #0]
 80003da:	f041 7280 	orr.w	r2, r1, #16777216	; 0x1000000
 80003de:	601a      	str	r2, [r3, #0]

  /* Wait till PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80003e0:	6818      	ldr	r0, [r3, #0]
 80003e2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80003e6:	0181      	lsls	r1, r0, #6
 80003e8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80003ec:	d5f8      	bpl.n	80003e0 <SystemInit+0xa0>
  {
  }

  /* Select PLL as system clock source */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80003ee:	6853      	ldr	r3, [r2, #4]
 80003f0:	f023 0103 	bic.w	r1, r3, #3
 80003f4:	6051      	str	r1, [r2, #4]
  RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 80003f6:	6850      	ldr	r0, [r2, #4]
 80003f8:	f040 0302 	orr.w	r3, r0, #2
 80003fc:	6053      	str	r3, [r2, #4]

  /* Wait till PLL is used as system clock source */
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 80003fe:	6851      	ldr	r1, [r2, #4]
 8000400:	f001 000c 	and.w	r0, r1, #12
 8000404:	2808      	cmp	r0, #8
 8000406:	d1fa      	bne.n	80003fe <SystemInit+0xbe>
  SetSysClock();
  
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000408:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 800040c:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000410:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000414:	609a      	str	r2, [r3, #8]
#endif  
}
 8000416:	b003      	add	sp, #12
 8000418:	bc10      	pop	{r4}
 800041a:	4770      	bx	lr

0800041c <SystemCoreClockUpdate>:
void SystemCoreClockUpdate (void)
{
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800041c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000420:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000424:	685a      	ldr	r2, [r3, #4]
 8000426:	f002 000c 	and.w	r0, r2, #12
  
  switch (tmp)
 800042a:	2808      	cmp	r0, #8
 800042c:	d010      	beq.n	8000450 <SystemCoreClockUpdate+0x34>
 800042e:	f44f 5190 	mov.w	r1, #4608	; 0x1200
 8000432:	f2c0 017a 	movt	r1, #122	; 0x7a
      SystemCoreClock = HSI_VALUE;
      break;
  }
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000436:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800043a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800043e:	4812      	ldr	r0, [pc, #72]	; (8000488 <SystemCoreClockUpdate+0x6c>)
 8000440:	6853      	ldr	r3, [r2, #4]
 8000442:	f3c3 1203 	ubfx	r2, r3, #4, #4
 8000446:	5c83      	ldrb	r3, [r0, r2]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 8000448:	fa21 f103 	lsr.w	r1, r1, r3
 800044c:	6101      	str	r1, [r0, #16]
 800044e:	4770      	bx	lr
    case 0x04:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
      break;
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8000450:	685a      	ldr	r2, [r3, #4]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8000452:	6858      	ldr	r0, [r3, #4]
      pllmull = ( pllmull >> 18) + 2;
 8000454:	f3c2 4183 	ubfx	r1, r2, #18, #4
 8000458:	1c8a      	adds	r2, r1, #2
      
      if (pllsource == 0x00)
 800045a:	03c0      	lsls	r0, r0, #15
 800045c:	d406      	bmi.n	800046c <SystemCoreClockUpdate+0x50>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
 800045e:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8000462:	f2c0 033d 	movt	r3, #61	; 0x3d
 8000466:	fb03 f102 	mul.w	r1, r3, r2
 800046a:	e7e4      	b.n	8000436 <SystemCoreClockUpdate+0x1a>
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 800046c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
 800046e:	f44f 5390 	mov.w	r3, #4608	; 0x1200
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 8000472:	f000 010f 	and.w	r1, r0, #15
 8000476:	1c48      	adds	r0, r1, #1
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
 8000478:	f2c0 037a 	movt	r3, #122	; 0x7a
 800047c:	fbb3 f1f0 	udiv	r1, r3, r0
 8000480:	fb02 f101 	mul.w	r1, r2, r1
 8000484:	e7d7      	b.n	8000436 <SystemCoreClockUpdate+0x1a>
 8000486:	bf00      	nop
 8000488:	20000004 	.word	0x20000004

0800048c <i2s_config>:
#include "main.h"

void i2s_config(void)
{
 800048c:	b510      	push	{r4, lr}
	GPIO_InitTypeDef GPIO_InitStructure;
	I2S_InitTypeDef I2S_InitStructure;
	NVIC_InitTypeDef NVIC_InitStructure;

	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 800048e:	2101      	movs	r1, #1
#include "main.h"

void i2s_config(void)
{
 8000490:	b088      	sub	sp, #32
	GPIO_InitTypeDef GPIO_InitStructure;
	I2S_InitTypeDef I2S_InitStructure;
	NVIC_InitTypeDef NVIC_InitStructure;

	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 8000492:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000496:	f000 fb4b 	bl	8000b30 <RCC_AHBPeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE);
 800049a:	2101      	movs	r1, #1
 800049c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80004a0:	f000 fb54 	bl	8000b4c <RCC_APB2PeriphClockCmd>

     /*要检查引脚映射是否一致*/
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource4, GPIO_AF_5);
 80004a4:	2104      	movs	r1, #4
 80004a6:	2205      	movs	r2, #5
 80004a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004ac:	f001 f96c 	bl	8001788 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource5, GPIO_AF_5);
 80004b0:	2105      	movs	r1, #5
 80004b2:	460a      	mov	r2, r1
 80004b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004b8:	f001 f966 	bl	8001788 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource6, GPIO_AF_5);
 80004bc:	2106      	movs	r1, #6
 80004be:	2205      	movs	r2, #5
 80004c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004c4:	f001 f960 	bl	8001788 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource7, GPIO_AF_5);
 80004c8:	2205      	movs	r2, #5
 80004ca:	2107      	movs	r1, #7
 80004cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004d0:	f001 f95a 	bl	8001788 <GPIO_PinAFConfig>

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4 | GPIO_Pin_5 | GPIO_Pin_6 | GPIO_Pin_7;
 80004d4:	23f0      	movs	r3, #240	; 0xf0
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80004d6:	2400      	movs	r4, #0
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource5, GPIO_AF_5);
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource6, GPIO_AF_5);
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource7, GPIO_AF_5);

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4 | GPIO_Pin_5 | GPIO_Pin_6 | GPIO_Pin_7;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 80004d8:	2202      	movs	r2, #2
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 80004da:	a902      	add	r1, sp, #8
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource4, GPIO_AF_5);
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource5, GPIO_AF_5);
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource6, GPIO_AF_5);
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource7, GPIO_AF_5);

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4 | GPIO_Pin_5 | GPIO_Pin_6 | GPIO_Pin_7;
 80004dc:	9302      	str	r3, [sp, #8]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 80004de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource7, GPIO_AF_5);

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4 | GPIO_Pin_5 | GPIO_Pin_6 | GPIO_Pin_7;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80004e2:	2303      	movs	r3, #3
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource5, GPIO_AF_5);
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource6, GPIO_AF_5);
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource7, GPIO_AF_5);

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4 | GPIO_Pin_5 | GPIO_Pin_6 | GPIO_Pin_7;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 80004e4:	f88d 200c 	strb.w	r2, [sp, #12]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80004e8:	f88d 300d 	strb.w	r3, [sp, #13]
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource6, GPIO_AF_5);
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource7, GPIO_AF_5);

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4 | GPIO_Pin_5 | GPIO_Pin_6 | GPIO_Pin_7;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80004ec:	f88d 400e 	strb.w	r4, [sp, #14]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80004f0:	f88d 400f 	strb.w	r4, [sp, #15]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 80004f4:	f001 f854 	bl	80015a0 <GPIO_Init>
	I2S_InitStructure.I2S_CPOL = I2S_CPOL_Low;
	I2S_InitStructure.I2S_AudioFreq = I2S_AudioFreq_32k;
	I2S_InitStructure.I2S_MCLKOutput = I2S_MCLKOutput_Enable;
	
	/* I2S Master Transmitter configuration */
    I2S_InitStructure.I2S_Mode = I2S_Mode_MasterTx;
 80004f8:	a908      	add	r1, sp, #32

	I2S_InitStructure.I2S_Standard = I2S_Standard_Phillips;
	I2S_InitStructure.I2S_DataFormat = I2S_DataFormat_16b;
	I2S_InitStructure.I2S_CPOL = I2S_CPOL_Low;
	I2S_InitStructure.I2S_AudioFreq = I2S_AudioFreq_32k;
	I2S_InitStructure.I2S_MCLKOutput = I2S_MCLKOutput_Enable;
 80004fa:	f44f 7300 	mov.w	r3, #512	; 0x200
	
	/* I2S Master Transmitter configuration */
    I2S_InitStructure.I2S_Mode = I2S_Mode_MasterTx;
	I2S_Init(SPI1, &I2S_InitStructure);	
 80004fe:	f44f 5040 	mov.w	r0, #12288	; 0x3000
	I2S_InitStructure.I2S_CPOL = I2S_CPOL_Low;
	I2S_InitStructure.I2S_AudioFreq = I2S_AudioFreq_32k;
	I2S_InitStructure.I2S_MCLKOutput = I2S_MCLKOutput_Enable;
	
	/* I2S Master Transmitter configuration */
    I2S_InitStructure.I2S_Mode = I2S_Mode_MasterTx;
 8000502:	f821 3d10 	strh.w	r3, [r1, #-16]!
	GPIO_Init(GPIOA, &GPIO_InitStructure);

	I2S_InitStructure.I2S_Standard = I2S_Standard_Phillips;
	I2S_InitStructure.I2S_DataFormat = I2S_DataFormat_16b;
	I2S_InitStructure.I2S_CPOL = I2S_CPOL_Low;
	I2S_InitStructure.I2S_AudioFreq = I2S_AudioFreq_32k;
 8000506:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
	I2S_InitStructure.I2S_MCLKOutput = I2S_MCLKOutput_Enable;
	
	/* I2S Master Transmitter configuration */
    I2S_InitStructure.I2S_Mode = I2S_Mode_MasterTx;
	I2S_Init(SPI1, &I2S_InitStructure);	
 800050a:	f2c4 0001 	movt	r0, #16385	; 0x4001

	I2S_InitStructure.I2S_Standard = I2S_Standard_Phillips;
	I2S_InitStructure.I2S_DataFormat = I2S_DataFormat_16b;
	I2S_InitStructure.I2S_CPOL = I2S_CPOL_Low;
	I2S_InitStructure.I2S_AudioFreq = I2S_AudioFreq_32k;
	I2S_InitStructure.I2S_MCLKOutput = I2S_MCLKOutput_Enable;
 800050e:	f8ad 3016 	strh.w	r3, [sp, #22]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_Init(GPIOA, &GPIO_InitStructure);

	I2S_InitStructure.I2S_Standard = I2S_Standard_Phillips;
 8000512:	f8ad 4012 	strh.w	r4, [sp, #18]
	I2S_InitStructure.I2S_DataFormat = I2S_DataFormat_16b;
 8000516:	f8ad 4014 	strh.w	r4, [sp, #20]
	I2S_InitStructure.I2S_CPOL = I2S_CPOL_Low;
 800051a:	f8ad 401c 	strh.w	r4, [sp, #28]
	I2S_InitStructure.I2S_AudioFreq = I2S_AudioFreq_32k;
 800051e:	9206      	str	r2, [sp, #24]
	I2S_InitStructure.I2S_MCLKOutput = I2S_MCLKOutput_Enable;
	
	/* I2S Master Transmitter configuration */
    I2S_InitStructure.I2S_Mode = I2S_Mode_MasterTx;
	I2S_Init(SPI1, &I2S_InitStructure);	
 8000520:	f000 fc1e 	bl	8000d60 <I2S_Init>

	NVIC_InitStructure.NVIC_IRQChannel = SPI1_IRQn;
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
 8000524:	2101      	movs	r1, #1
	
	/* I2S Master Transmitter configuration */
    I2S_InitStructure.I2S_Mode = I2S_Mode_MasterTx;
	I2S_Init(SPI1, &I2S_InitStructure);	

	NVIC_InitStructure.NVIC_IRQChannel = SPI1_IRQn;
 8000526:	2323      	movs	r3, #35	; 0x23
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);
 8000528:	a801      	add	r0, sp, #4
	
	/* I2S Master Transmitter configuration */
    I2S_InitStructure.I2S_Mode = I2S_Mode_MasterTx;
	I2S_Init(SPI1, &I2S_InitStructure);	

	NVIC_InitStructure.NVIC_IRQChannel = SPI1_IRQn;
 800052a:	f88d 3004 	strb.w	r3, [sp, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
 800052e:	f88d 1005 	strb.w	r1, [sp, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
 8000532:	f88d 1006 	strb.w	r1, [sp, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8000536:	f88d 1007 	strb.w	r1, [sp, #7]
	NVIC_Init(&NVIC_InitStructure);
 800053a:	f001 f947 	bl	80017cc <NVIC_Init>

}
 800053e:	b008      	add	sp, #32
 8000540:	bd10      	pop	{r4, pc}
 8000542:	bf00      	nop

08000544 <Usart2_Config>:
#include "main.h"

Usart2_Config(void)
{
 8000544:	b530      	push	{r4, r5, lr}
	GPIO_InitTypeDef GPIO_InitStructure;
	USART_InitTypeDef USART_InitStructure;
	NVIC_InitTypeDef NVIC_InitStructure;

	/*GPIOA时钟设置在spi.c中*/
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE); 
 8000546:	2101      	movs	r1, #1
#include "main.h"

Usart2_Config(void)
{
 8000548:	b08b      	sub	sp, #44	; 0x2c
	GPIO_InitTypeDef GPIO_InitStructure;
	USART_InitTypeDef USART_InitStructure;
	NVIC_InitTypeDef NVIC_InitStructure;

	/*GPIOA时钟设置在spi.c中*/
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE); 
 800054a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800054e:	f000 fb0b 	bl	8000b68 <RCC_APB1PeriphClockCmd>

  	GPIO_PinAFConfig(GPIOA, GPIO_PinSource2, GPIO_AF_7);    
 8000552:	2102      	movs	r1, #2
 8000554:	2207      	movs	r2, #7
 8000556:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800055a:	f001 f915 	bl	8001788 <GPIO_PinAFConfig>
    GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_7);
 800055e:	2207      	movs	r2, #7
 8000560:	2103      	movs	r1, #3
 8000562:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000566:	f001 f90f 	bl	8001788 <GPIO_PinAFConfig>

	GPIO_InitStructure.GPIO_Pin  	= GPIO_Pin_2 | GPIO_Pin_3;
	GPIO_InitStructure.GPIO_Mode 	= GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_OType   = GPIO_OType_PP;
 800056a:	2400      	movs	r4, #0

  	GPIO_PinAFConfig(GPIOA, GPIO_PinSource2, GPIO_AF_7);    
    GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_7);

	GPIO_InitStructure.GPIO_Pin  	= GPIO_Pin_2 | GPIO_Pin_3;
	GPIO_InitStructure.GPIO_Mode 	= GPIO_Mode_AF;
 800056c:	2302      	movs	r3, #2
	GPIO_InitStructure.GPIO_OType   = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd    = GPIO_PuPd_NOPULL;
	GPIO_InitStructure.GPIO_Speed 	= GPIO_Speed_50MHz;
 800056e:	2203      	movs	r2, #3
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE); 

  	GPIO_PinAFConfig(GPIOA, GPIO_PinSource2, GPIO_AF_7);    
    GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_7);

	GPIO_InitStructure.GPIO_Pin  	= GPIO_Pin_2 | GPIO_Pin_3;
 8000570:	250c      	movs	r5, #12
	GPIO_InitStructure.GPIO_Mode 	= GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_OType   = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd    = GPIO_PuPd_NOPULL;
	GPIO_InitStructure.GPIO_Speed 	= GPIO_Speed_50MHz;
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000572:	a902      	add	r1, sp, #8
 8000574:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000

  	GPIO_PinAFConfig(GPIOA, GPIO_PinSource2, GPIO_AF_7);    
    GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_7);

	GPIO_InitStructure.GPIO_Pin  	= GPIO_Pin_2 | GPIO_Pin_3;
	GPIO_InitStructure.GPIO_Mode 	= GPIO_Mode_AF;
 8000578:	f88d 300c 	strb.w	r3, [sp, #12]
	GPIO_InitStructure.GPIO_OType   = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd    = GPIO_PuPd_NOPULL;
	GPIO_InitStructure.GPIO_Speed 	= GPIO_Speed_50MHz;
 800057c:	f88d 200d 	strb.w	r2, [sp, #13]
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE); 

  	GPIO_PinAFConfig(GPIOA, GPIO_PinSource2, GPIO_AF_7);    
    GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_7);

	GPIO_InitStructure.GPIO_Pin  	= GPIO_Pin_2 | GPIO_Pin_3;
 8000580:	9502      	str	r5, [sp, #8]
	GPIO_InitStructure.GPIO_Mode 	= GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_OType   = GPIO_OType_PP;
 8000582:	f88d 400e 	strb.w	r4, [sp, #14]
	GPIO_InitStructure.GPIO_PuPd    = GPIO_PuPd_NOPULL;
 8000586:	f88d 400f 	strb.w	r4, [sp, #15]
	GPIO_InitStructure.GPIO_Speed 	= GPIO_Speed_50MHz;
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 800058a:	f001 f809 	bl	80015a0 <GPIO_Init>

	USART_InitStructure.USART_BaudRate   = 960000;
 800058e:	f44f 4326 	mov.w	r3, #42496	; 0xa600
	USART_InitStructure.USART_StopBits   = USART_StopBits_1;
	USART_InitStructure.USART_Parity	 = USART_Parity_No;
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
	USART_InitStructure.USART_Mode       = USART_Mode_Rx | USART_Mode_Tx;

	USART_Init(USART2, &USART_InitStructure);
 8000592:	f44f 4088 	mov.w	r0, #17408	; 0x4400
	GPIO_InitStructure.GPIO_OType   = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd    = GPIO_PuPd_NOPULL;
	GPIO_InitStructure.GPIO_Speed 	= GPIO_Speed_50MHz;
	GPIO_Init(GPIOA, &GPIO_InitStructure);

	USART_InitStructure.USART_BaudRate   = 960000;
 8000596:	f2c0 030e 	movt	r3, #14
	USART_InitStructure.USART_StopBits   = USART_StopBits_1;
	USART_InitStructure.USART_Parity	 = USART_Parity_No;
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
	USART_InitStructure.USART_Mode       = USART_Mode_Rx | USART_Mode_Tx;

	USART_Init(USART2, &USART_InitStructure);
 800059a:	a904      	add	r1, sp, #16
	GPIO_InitStructure.GPIO_PuPd    = GPIO_PuPd_NOPULL;
	GPIO_InitStructure.GPIO_Speed 	= GPIO_Speed_50MHz;
	GPIO_Init(GPIOA, &GPIO_InitStructure);

	USART_InitStructure.USART_BaudRate   = 960000;
	USART_InitStructure.USART_WordLength = USART_WordLength_9b;
 800059c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
	USART_InitStructure.USART_StopBits   = USART_StopBits_1;
	USART_InitStructure.USART_Parity	 = USART_Parity_No;
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
	USART_InitStructure.USART_Mode       = USART_Mode_Rx | USART_Mode_Tx;

	USART_Init(USART2, &USART_InitStructure);
 80005a0:	f2c4 0000 	movt	r0, #16384	; 0x4000
	GPIO_InitStructure.GPIO_OType   = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd    = GPIO_PuPd_NOPULL;
	GPIO_InitStructure.GPIO_Speed 	= GPIO_Speed_50MHz;
	GPIO_Init(GPIOA, &GPIO_InitStructure);

	USART_InitStructure.USART_BaudRate   = 960000;
 80005a4:	9304      	str	r3, [sp, #16]
	USART_InitStructure.USART_WordLength = USART_WordLength_9b;
 80005a6:	9205      	str	r2, [sp, #20]
	USART_InitStructure.USART_StopBits   = USART_StopBits_1;
 80005a8:	9406      	str	r4, [sp, #24]
	USART_InitStructure.USART_Parity	 = USART_Parity_No;
 80005aa:	9407      	str	r4, [sp, #28]
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 80005ac:	9409      	str	r4, [sp, #36]	; 0x24
	USART_InitStructure.USART_Mode       = USART_Mode_Rx | USART_Mode_Tx;
 80005ae:	9508      	str	r5, [sp, #32]

	USART_Init(USART2, &USART_InitStructure);
 80005b0:	f000 fd64 	bl	800107c <USART_Init>


	NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
 80005b4:	2101      	movs	r1, #1
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);
 80005b6:	a801      	add	r0, sp, #4
	USART_InitStructure.USART_Mode       = USART_Mode_Rx | USART_Mode_Tx;

	USART_Init(USART2, &USART_InitStructure);


	NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
 80005b8:	2326      	movs	r3, #38	; 0x26
 80005ba:	f88d 3004 	strb.w	r3, [sp, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
 80005be:	f88d 1005 	strb.w	r1, [sp, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
 80005c2:	f88d 1006 	strb.w	r1, [sp, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80005c6:	f88d 1007 	strb.w	r1, [sp, #7]
	NVIC_Init(&NVIC_InitStructure);
 80005ca:	f001 f8ff 	bl	80017cc <NVIC_Init>
}
 80005ce:	b00b      	add	sp, #44	; 0x2c
 80005d0:	bd30      	pop	{r4, r5, pc}
 80005d2:	bf00      	nop

080005d4 <USART_printf>:

	return string;
}

USART_printf(USART_TypeDef* USARTx, uint8_t *Data, ...)
{
 80005d4:	b40e      	push	{r1, r2, r3}
 80005d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005d8:	b086      	sub	sp, #24
 80005da:	ab0b      	add	r3, sp, #44	; 0x2c
 80005dc:	4604      	mov	r4, r0
 80005de:	f853 5b04 	ldr.w	r5, [r3], #4
	int d;
	char buf[16];
	va_list ap;
	va_start(ap, Data);

	while(*Data != 0)
 80005e2:	7829      	ldrb	r1, [r5, #0]
{
	const char *s;
	int d;
	char buf[16];
	va_list ap;
	va_start(ap, Data);
 80005e4:	9301      	str	r3, [sp, #4]
	int 	flag = 0;
	char	*ptr = string;  

	if(radix != 0)
	{
		*ptr = 0;
 80005e6:	2700      	movs	r7, #0
	int d;
	char buf[16];
	va_list ap;
	va_start(ap, Data);

	while(*Data != 0)
 80005e8:	b191      	cbz	r1, 8000610 <USART_printf+0x3c>
	{
		if( *Data == 0x5c)
 80005ea:	295c      	cmp	r1, #92	; 0x5c
 80005ec:	d02f      	beq.n	800064e <USART_printf+0x7a>
				default:
					Data++;
					break;
			}
		}
		else if( *Data == '%')
 80005ee:	2925      	cmp	r1, #37	; 0x25
 80005f0:	d128      	bne.n	8000644 <USART_printf+0x70>
		{
			switch( *++Data)
 80005f2:	7868      	ldrb	r0, [r5, #1]
 80005f4:	2864      	cmp	r0, #100	; 0x64
 80005f6:	d035      	beq.n	8000664 <USART_printf+0x90>
 80005f8:	2873      	cmp	r0, #115	; 0x73
 80005fa:	d00e      	beq.n	800061a <USART_printf+0x46>
					for(s = buf; *s; s++)
					{
						USART_SendData(USARTx, *s);
						while(USART_GetFlagStatus(USARTx, USART_FLAG_TC) == RESET);
					}
					Data++;
 80005fc:	3502      	adds	r5, #2
					break;
			}
		}

		else USART_SendData(USARTx, *Data++);
		while(USART_GetFlagStatus(USARTx, USART_FLAG_TC) == RESET);
 80005fe:	4620      	mov	r0, r4
 8000600:	2140      	movs	r1, #64	; 0x40
 8000602:	f000 ff33 	bl	800146c <USART_GetFlagStatus>
 8000606:	2800      	cmp	r0, #0
 8000608:	d0f9      	beq.n	80005fe <USART_printf+0x2a>
	int d;
	char buf[16];
	va_list ap;
	va_start(ap, Data);

	while(*Data != 0)
 800060a:	7829      	ldrb	r1, [r5, #0]
 800060c:	2900      	cmp	r1, #0
 800060e:	d1ec      	bne.n	80005ea <USART_printf+0x16>
		}

		else USART_SendData(USARTx, *Data++);
		while(USART_GetFlagStatus(USARTx, USART_FLAG_TC) == RESET);
	}
}
 8000610:	b006      	add	sp, #24
 8000612:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8000616:	b003      	add	sp, #12
 8000618:	4770      	bx	lr
		else if( *Data == '%')
		{
			switch( *++Data)
			{
				case 's':
					s = va_arg(ap, const char *);
 800061a:	9a01      	ldr	r2, [sp, #4]
 800061c:	6816      	ldr	r6, [r2, #0]
				
					for(; *s; s++)
 800061e:	7831      	ldrb	r1, [r6, #0]
		else if( *Data == '%')
		{
			switch( *++Data)
			{
				case 's':
					s = va_arg(ap, const char *);
 8000620:	1d13      	adds	r3, r2, #4
 8000622:	9301      	str	r3, [sp, #4]
				
					for(; *s; s++)
 8000624:	2900      	cmp	r1, #0
 8000626:	d0e9      	beq.n	80005fc <USART_printf+0x28>
					{
						USART_SendData(USARTx, *s);
 8000628:	4620      	mov	r0, r4
 800062a:	f000 fe2d 	bl	8001288 <USART_SendData>
						while(USART_GetFlagStatus(USARTx, USART_FLAG_TC) == RESET);
 800062e:	4620      	mov	r0, r4
 8000630:	2140      	movs	r1, #64	; 0x40
 8000632:	f000 ff1b 	bl	800146c <USART_GetFlagStatus>
 8000636:	2800      	cmp	r0, #0
 8000638:	d0f9      	beq.n	800062e <USART_printf+0x5a>
			switch( *++Data)
			{
				case 's':
					s = va_arg(ap, const char *);
				
					for(; *s; s++)
 800063a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800063e:	2900      	cmp	r1, #0
 8000640:	d1f2      	bne.n	8000628 <USART_printf+0x54>
 8000642:	e7db      	b.n	80005fc <USART_printf+0x28>
					Data++;
					break;
			}
		}

		else USART_SendData(USARTx, *Data++);
 8000644:	4620      	mov	r0, r4
 8000646:	3501      	adds	r5, #1
 8000648:	f000 fe1e 	bl	8001288 <USART_SendData>
 800064c:	e7d7      	b.n	80005fe <USART_printf+0x2a>

	while(*Data != 0)
	{
		if( *Data == 0x5c)
		{
			switch( *++Data)
 800064e:	786a      	ldrb	r2, [r5, #1]
 8000650:	2a6e      	cmp	r2, #110	; 0x6e
 8000652:	d00d      	beq.n	8000670 <USART_printf+0x9c>
 8000654:	2a72      	cmp	r2, #114	; 0x72
 8000656:	d1d1      	bne.n	80005fc <USART_printf+0x28>
			{
				case 'r':
					USART_SendData(USARTx, 0x0d);
 8000658:	4620      	mov	r0, r4
 800065a:	210d      	movs	r1, #13
 800065c:	f000 fe14 	bl	8001288 <USART_SendData>
					Data++;
 8000660:	3502      	adds	r5, #2
					break;
 8000662:	e7cc      	b.n	80005fe <USART_printf+0x2a>
					}
					Data++;
					break;

				case 'd':
					d = va_arg(ap, int);
 8000664:	9901      	ldr	r1, [sp, #4]
	int 	flag = 0;
	char	*ptr = string;  

	if(radix != 0)
	{
		*ptr = 0;
 8000666:	f88d 7008 	strb.w	r7, [sp, #8]
					}
					Data++;
					break;

				case 'd':
					d = va_arg(ap, int);
 800066a:	1d08      	adds	r0, r1, #4
 800066c:	9001      	str	r0, [sp, #4]
 800066e:	e7c5      	b.n	80005fc <USART_printf+0x28>
					USART_SendData(USARTx, 0x0d);
					Data++;
					break;

				case 'n':
					USART_SendData(USARTx, 0x0a);
 8000670:	4620      	mov	r0, r4
 8000672:	210a      	movs	r1, #10
 8000674:	f000 fe08 	bl	8001288 <USART_SendData>
					Data++;
 8000678:	3502      	adds	r5, #2
					break;
 800067a:	e7c0      	b.n	80005fe <USART_printf+0x2a>
 800067c:	08001a20 	.word	0x08001a20
 8000680:	20000000 	.word	0x20000000
 8000684:	200000a4 	.word	0x200000a4
 8000688:	200000a8 	.word	0x200000a8
 800068c:	200000cc 	.word	0x200000cc

08000690 <RCC_DeInit>:
  * @retval None
  */
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000690:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000694:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000698:	681a      	ldr	r2, [r3, #0]
 800069a:	f042 0001 	orr.w	r0, r2, #1
 800069e:	6018      	str	r0, [r3, #0]

  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, SDADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0x00FF0000;
 80006a0:	6859      	ldr	r1, [r3, #4]
 80006a2:	f401 027f 	and.w	r2, r1, #16711680	; 0xff0000
 80006a6:	605a      	str	r2, [r3, #4]
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80006a8:	6818      	ldr	r0, [r3, #0]
 80006aa:	f020 7184 	bic.w	r1, r0, #17301504	; 0x1080000
 80006ae:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 80006b2:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80006b4:	6818      	ldr	r0, [r3, #0]
 80006b6:	f420 2180 	bic.w	r1, r0, #262144	; 0x40000
 80006ba:	6019      	str	r1, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80006bc:	685a      	ldr	r2, [r3, #4]
 80006be:	f422 00fe 	bic.w	r0, r2, #8323072	; 0x7f0000
 80006c2:	6058      	str	r0, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 80006c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80006c6:	f021 020f 	bic.w	r2, r1, #15
 80006ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and CECSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0F8C;
 80006cc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80006ce:	f020 21f0 	bic.w	r1, r0, #4026593280	; 0xf000f000
 80006d2:	f021 0273 	bic.w	r2, r1, #115	; 0x73
  
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80006d6:	2000      	movs	r0, #0

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;

  /* Reset USARTSW[1:0], I2CSW and CECSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0F8C;
 80006d8:	631a      	str	r2, [r3, #48]	; 0x30
  
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80006da:	6098      	str	r0, [r3, #8]
 80006dc:	4770      	bx	lr
 80006de:	bf00      	nop

080006e0 <RCC_HSEConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE2_ADDRESS = RCC_HSE_OFF;
 80006e0:	f241 0302 	movw	r3, #4098	; 0x1002
 80006e4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80006e8:	2200      	movs	r2, #0
 80006ea:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE2_ADDRESS = RCC_HSE;
 80006ec:	7018      	strb	r0, [r3, #0]
 80006ee:	4770      	bx	lr

080006f0 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 80006f0:	b082      	sub	sp, #8
  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;

   if (tmp == 0)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 80006f2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
  __IO uint32_t StartUpCounter = 0;
 80006f6:	2300      	movs	r3, #0
 80006f8:	9301      	str	r3, [sp, #4]
  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;

   if (tmp == 0)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 80006fa:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80006fe:	6810      	ldr	r0, [r2, #0]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;

  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8000700:	0383      	lsls	r3, r0, #14
 8000702:	d50c      	bpl.n	800071e <RCC_WaitForHSEStartUp+0x2e>
  
  /* Wait till HSE is ready and if timeout is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
    StartUpCounter++;  
 8000704:	9a01      	ldr	r2, [sp, #4]
 8000706:	1c51      	adds	r1, r2, #1
 8000708:	9101      	str	r1, [sp, #4]
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
 800070a:	9b01      	ldr	r3, [sp, #4]
  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;

   if (tmp == 0)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 800070c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000710:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000714:	6818      	ldr	r0, [r3, #0]
  }
  else
  {
    status = ERROR;
  }  
  return (status);
 8000716:	f3c0 4040 	ubfx	r0, r0, #17, #1
}
 800071a:	b002      	add	sp, #8
 800071c:	4770      	bx	lr
  
  /* Wait till HSE is ready and if timeout is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
    StartUpCounter++;  
 800071e:	9901      	ldr	r1, [sp, #4]
 8000720:	1c4b      	adds	r3, r1, #1
 8000722:	9301      	str	r3, [sp, #4]
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
 8000724:	9801      	ldr	r0, [sp, #4]
 8000726:	f5b0 6fa0 	cmp.w	r0, #1280	; 0x500
 800072a:	d1e8      	bne.n	80006fe <RCC_WaitForHSEStartUp+0xe>
 800072c:	e7ee      	b.n	800070c <RCC_WaitForHSEStartUp+0x1c>
 800072e:	bf00      	nop

08000730 <RCC_AdjustHSICalibrationValue>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_HSI_CALIBRATION_VALUE(HSICalibrationValue));
  
  tmpreg = RCC->CR;
 8000730:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000734:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000738:	681a      	ldr	r2, [r3, #0]
  
  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
 800073a:	f022 01f8 	bic.w	r1, r2, #248	; 0xf8
  
  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 800073e:	ea41 00c0 	orr.w	r0, r1, r0, lsl #3
  
  /* Store the new value */
  RCC->CR = tmpreg;
 8000742:	6018      	str	r0, [r3, #0]
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop

08000748 <RCC_HSICmd>:
void RCC_HSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 8000748:	2300      	movs	r3, #0
 800074a:	f2c4 2342 	movt	r3, #16962	; 0x4242
 800074e:	6018      	str	r0, [r3, #0]
 8000750:	4770      	bx	lr
 8000752:	bf00      	nop

08000754 <RCC_LSEConfig>:
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  RCC->BDCR &= ~(RCC_BDCR_LSEON);
 8000754:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000758:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800075c:	6a1a      	ldr	r2, [r3, #32]
 800075e:	f022 0101 	bic.w	r1, r2, #1
 8000762:	6219      	str	r1, [r3, #32]

  /* Reset LSEBYP bit */
  RCC->BDCR &= ~(RCC_BDCR_LSEBYP);
 8000764:	6a1a      	ldr	r2, [r3, #32]
 8000766:	f022 0104 	bic.w	r1, r2, #4
 800076a:	6219      	str	r1, [r3, #32]

  /* Configure LSE */
  RCC->BDCR |= RCC_LSE;
 800076c:	6a1a      	ldr	r2, [r3, #32]
 800076e:	4310      	orrs	r0, r2
 8000770:	6218      	str	r0, [r3, #32]
 8000772:	4770      	bx	lr

08000774 <RCC_LSEDriveConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_LSE_DRIVE(RCC_LSEDrive));
  
  /* Clear LSEDRV[1:0] bits */
  RCC->BDCR &= ~(RCC_BDCR_LSEDRV);
 8000774:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000778:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800077c:	6a1a      	ldr	r2, [r3, #32]
 800077e:	f022 0118 	bic.w	r1, r2, #24
 8000782:	6219      	str	r1, [r3, #32]

  /* Set the LSE Drive */
  RCC->BDCR |= RCC_LSEDrive;
 8000784:	6a1a      	ldr	r2, [r3, #32]
 8000786:	4310      	orrs	r0, r2
 8000788:	6218      	str	r0, [r3, #32]
 800078a:	4770      	bx	lr

0800078c <RCC_LSICmd>:
void RCC_LSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 800078c:	f44f 6390 	mov.w	r3, #1152	; 0x480
 8000790:	f2c4 2342 	movt	r3, #16962	; 0x4242
 8000794:	6018      	str	r0, [r3, #0]
 8000796:	4770      	bx	lr

08000798 <RCC_PLLConfig>:
  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  /* Clear PLL Source [16] and Multiplier [21:18] bits */
  RCC->CFGR &= ~(RCC_CFGR_PLLMULL | RCC_CFGR_PLLSRC);
 8000798:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800079c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80007a0:	685a      	ldr	r2, [r3, #4]
 80007a2:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80007a6:	605a      	str	r2, [r3, #4]

  /* Set the PLL Source and Multiplier */
  RCC->CFGR |= (uint32_t)(RCC_PLLSource | RCC_PLLMul);
 80007a8:	685a      	ldr	r2, [r3, #4]
 80007aa:	4310      	orrs	r0, r2
 80007ac:	4301      	orrs	r1, r0
 80007ae:	6059      	str	r1, [r3, #4]
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop

080007b4 <RCC_PLLCmd>:
void RCC_PLLCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 80007b4:	2360      	movs	r3, #96	; 0x60
 80007b6:	f2c4 2342 	movt	r3, #16962	; 0x4242
 80007ba:	6018      	str	r0, [r3, #0]
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop

080007c0 <RCC_PREDIV1Config>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_PREDIV1(RCC_PREDIV1_Div));

  tmpreg = RCC->CFGR2;
 80007c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007c4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80007c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  /* Clear PREDIV1[3:0] bits */
  tmpreg &= ~(RCC_CFGR2_PREDIV1);
 80007ca:	f022 010f 	bic.w	r1, r2, #15

  /* Set the PREDIV1 division factor */
  tmpreg |= RCC_PREDIV1_Div;
 80007ce:	4308      	orrs	r0, r1

  /* Store the new value */
  RCC->CFGR2 = tmpreg;
 80007d0:	62d8      	str	r0, [r3, #44]	; 0x2c
 80007d2:	4770      	bx	lr

080007d4 <RCC_ClockSecuritySystemCmd>:
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 80007d4:	234c      	movs	r3, #76	; 0x4c
 80007d6:	f2c4 2342 	movt	r3, #16962	; 0x4242
 80007da:	6018      	str	r0, [r3, #0]
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop

080007e0 <RCC_MCOConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_MCO_SOURCE(RCC_MCOSource));
    
  /* Select MCO clock source and prescaler */
  *(__IO uint8_t *) CFGR_BYTE3_ADDRESS =  RCC_MCOSource; 
 80007e0:	f241 0307 	movw	r3, #4103	; 0x1007
 80007e4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80007e8:	7018      	strb	r0, [r3, #0]
 80007ea:	4770      	bx	lr

080007ec <RCC_SYSCLKConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  
  tmpreg = RCC->CFGR;
 80007ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007f0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80007f4:	685a      	ldr	r2, [r3, #4]
  
  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 80007f6:	f022 0103 	bic.w	r1, r2, #3
  
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 80007fa:	4308      	orrs	r0, r1
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
 80007fc:	6058      	str	r0, [r3, #4]
 80007fe:	4770      	bx	lr

08000800 <RCC_GetSYSCLKSource>:
  *           - 0x04: HSE used as system clock  
  *           - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 8000800:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000804:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000808:	6858      	ldr	r0, [r3, #4]
}
 800080a:	f000 000c 	and.w	r0, r0, #12
 800080e:	4770      	bx	lr

08000810 <RCC_HCLKConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  
  tmpreg = RCC->CFGR;
 8000810:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000814:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000818:	685a      	ldr	r2, [r3, #4]
  
  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
 800081a:	f022 01f0 	bic.w	r1, r2, #240	; 0xf0
  
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 800081e:	4308      	orrs	r0, r1
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000820:	6058      	str	r0, [r3, #4]
 8000822:	4770      	bx	lr

08000824 <RCC_PCLK1Config>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  
  tmpreg = RCC->CFGR;
 8000824:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000828:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800082c:	685a      	ldr	r2, [r3, #4]
  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
 800082e:	f422 61e0 	bic.w	r1, r2, #1792	; 0x700
  
  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 8000832:	4308      	orrs	r0, r1
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000834:	6058      	str	r0, [r3, #4]
 8000836:	4770      	bx	lr

08000838 <RCC_PCLK2Config>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  
  tmpreg = RCC->CFGR;
 8000838:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800083c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000840:	685a      	ldr	r2, [r3, #4]
  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
 8000842:	f422 5160 	bic.w	r1, r2, #14336	; 0x3800
  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 8000846:	ea41 00c0 	orr.w	r0, r1, r0, lsl #3
  /* Store the new value */
  RCC->CFGR = tmpreg;
 800084a:	6058      	str	r0, [r3, #4]
 800084c:	4770      	bx	lr
 800084e:	bf00      	nop

08000850 <RCC_ADCCLKConfig>:
 
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
  
  /* Clear ADCPRE[1:0] bits */
  RCC->CFGR &= ~RCC_CFGR_ADCPRE;
 8000850:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000854:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000858:	685a      	ldr	r2, [r3, #4]
 800085a:	f422 4140 	bic.w	r1, r2, #49152	; 0xc000
 800085e:	6059      	str	r1, [r3, #4]
  
  /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
  RCC->CFGR |= RCC_PCLK2;
 8000860:	685a      	ldr	r2, [r3, #4]
 8000862:	4310      	orrs	r0, r2
 8000864:	6058      	str	r0, [r3, #4]
 8000866:	4770      	bx	lr

08000868 <RCC_SDADCCLKConfig>:
{   
  /* Check the parameters */
  assert_param(IS_RCC_SDADCCLK(RCC_SDADCCLK));
  
  /* Clear ADCPRE[1:0] bits */
  RCC->CFGR &= ~RCC_CFGR_SDADCPRE;
 8000868:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800086c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000870:	685a      	ldr	r2, [r3, #4]
 8000872:	f022 4178 	bic.w	r1, r2, #4160749568	; 0xf8000000
 8000876:	6059      	str	r1, [r3, #4]
  
  /* Set SDADCPRE[4:0] bits according to RCC_PCLK2 value */
  RCC->CFGR |= RCC_SDADCCLK;
 8000878:	685a      	ldr	r2, [r3, #4]
 800087a:	4310      	orrs	r0, r2
 800087c:	6058      	str	r0, [r3, #4]
 800087e:	4770      	bx	lr

08000880 <RCC_CECCLKConfig>:
{ 
  /* Check the parameters */
  assert_param(IS_RCC_CECCLK(RCC_CECCLK));

  /* Clear CECSW bit */
  RCC->CFGR3 &= ~RCC_CFGR3_CECSW;
 8000880:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000884:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000888:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800088a:	f022 0140 	bic.w	r1, r2, #64	; 0x40
 800088e:	6319      	str	r1, [r3, #48]	; 0x30
  /* Set CECSW bits according to RCC_CECCLK value */
  RCC->CFGR3 |= RCC_CECCLK;
 8000890:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000892:	4310      	orrs	r0, r2
 8000894:	6318      	str	r0, [r3, #48]	; 0x30
 8000896:	4770      	bx	lr

08000898 <RCC_I2CCLKConfig>:
  assert_param(IS_RCC_I2CCLK(RCC_I2CCLK));

  tmp = (RCC_I2CCLK >> 28);
  
  /* Clear I2CSW bit */
  if (tmp == 0)
 8000898:	0f03      	lsrs	r3, r0, #28
  {
    RCC->CFGR3 &= ~RCC_CFGR3_I2C1SW;
 800089a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800089e:	f2c4 0302 	movt	r3, #16386	; 0x4002
  else
  {
    RCC->CFGR3 &= ~RCC_CFGR3_I2C2SW;
  }
  /* Set I2CSW bits according to RCC_I2CCLK value */
  RCC->CFGR3 |= RCC_I2CCLK;
 80008a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  tmp = (RCC_I2CCLK >> 28);
  
  /* Clear I2CSW bit */
  if (tmp == 0)
  {
    RCC->CFGR3 &= ~RCC_CFGR3_I2C1SW;
 80008a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  else
  {
    RCC->CFGR3 &= ~RCC_CFGR3_I2C2SW;
  }
  /* Set I2CSW bits according to RCC_I2CCLK value */
  RCC->CFGR3 |= RCC_I2CCLK;
 80008a8:	f2c4 0102 	movt	r1, #16386	; 0x4002
  tmp = (RCC_I2CCLK >> 28);
  
  /* Clear I2CSW bit */
  if (tmp == 0)
  {
    RCC->CFGR3 &= ~RCC_CFGR3_I2C1SW;
 80008ac:	bf0c      	ite	eq
 80008ae:	f022 0210 	biceq.w	r2, r2, #16
  }
  else
  {
    RCC->CFGR3 &= ~RCC_CFGR3_I2C2SW;
 80008b2:	f022 0220 	bicne.w	r2, r2, #32
 80008b6:	631a      	str	r2, [r3, #48]	; 0x30
  }
  /* Set I2CSW bits according to RCC_I2CCLK value */
  RCC->CFGR3 |= RCC_I2CCLK;
 80008b8:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80008ba:	4318      	orrs	r0, r3
 80008bc:	6308      	str	r0, [r1, #48]	; 0x30
 80008be:	4770      	bx	lr

080008c0 <RCC_USARTCLKConfig>:
  uint32_t tmp = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_USARTCLK(RCC_USARTCLK));

  tmp = (RCC_USARTCLK >> 28);
 80008c0:	0f03      	lsrs	r3, r0, #28

  /* Clear USARTSW[1:0] bit */
  switch (tmp)
 80008c2:	2b02      	cmp	r3, #2
 80008c4:	d01d      	beq.n	8000902 <RCC_USARTCLKConfig+0x42>
 80008c6:	2b03      	cmp	r3, #3
 80008c8:	d012      	beq.n	80008f0 <RCC_USARTCLKConfig+0x30>
 80008ca:	2b01      	cmp	r3, #1
 80008cc:	d007      	beq.n	80008de <RCC_USARTCLKConfig+0x1e>
  default:
      break;
  }

  /* Set USARTSW bits according to RCC_USARTCLK value */
  RCC->CFGR3 |= RCC_USARTCLK;
 80008ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008d2:	f2c4 0102 	movt	r1, #16386	; 0x4002
 80008d6:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80008d8:	4310      	orrs	r0, r2
 80008da:	6308      	str	r0, [r1, #48]	; 0x30
 80008dc:	4770      	bx	lr

  /* Clear USARTSW[1:0] bit */
  switch (tmp)
  {
    case 0x01:  /* clear USART1SW */
      RCC->CFGR3 &= ~RCC_CFGR3_USART1SW;
 80008de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008e2:	f2c4 0102 	movt	r1, #16386	; 0x4002
 80008e6:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80008e8:	f022 0303 	bic.w	r3, r2, #3
 80008ec:	630b      	str	r3, [r1, #48]	; 0x30
      break;
 80008ee:	e7ee      	b.n	80008ce <RCC_USARTCLKConfig+0xe>
    case 0x02:  /* clear USART2SW */
      RCC->CFGR3 &= ~RCC_CFGR3_USART2SW;
      break;
    case 0x03:  /* clear USART3SW */
      RCC->CFGR3 &= ~RCC_CFGR3_USART3SW;
 80008f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008f4:	f2c4 0102 	movt	r1, #16386	; 0x4002
 80008f8:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80008fa:	f422 2340 	bic.w	r3, r2, #786432	; 0xc0000
 80008fe:	630b      	str	r3, [r1, #48]	; 0x30
      break;
 8000900:	e7e5      	b.n	80008ce <RCC_USARTCLKConfig+0xe>
  {
    case 0x01:  /* clear USART1SW */
      RCC->CFGR3 &= ~RCC_CFGR3_USART1SW;
      break;
    case 0x02:  /* clear USART2SW */
      RCC->CFGR3 &= ~RCC_CFGR3_USART2SW;
 8000902:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000906:	f2c4 0102 	movt	r1, #16386	; 0x4002
 800090a:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800090c:	f422 3340 	bic.w	r3, r2, #196608	; 0x30000
 8000910:	630b      	str	r3, [r1, #48]	; 0x30
      break;
 8000912:	e7dc      	b.n	80008ce <RCC_USARTCLKConfig+0xe>

08000914 <RCC_USBCLKConfig>:
void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource)
{
  /* Check the parameters */
  assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));

  *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
 8000914:	23d8      	movs	r3, #216	; 0xd8
 8000916:	f2c4 2342 	movt	r3, #16962	; 0x4242
 800091a:	6018      	str	r0, [r3, #0]
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop

08000920 <RCC_GetClocksFreq>:
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000920:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000924:	f2c4 0302 	movt	r3, #16386	; 0x4002
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000928:	b470      	push	{r4, r5, r6}
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800092a:	685a      	ldr	r2, [r3, #4]
 800092c:	f002 010c 	and.w	r1, r2, #12
  
  switch (tmp)
 8000930:	2904      	cmp	r1, #4
 8000932:	d002      	beq.n	800093a <RCC_GetClocksFreq+0x1a>
 8000934:	2908      	cmp	r1, #8
 8000936:	f000 80b5 	beq.w	8000aa4 <RCC_GetClocksFreq+0x184>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 800093a:	f44f 5190 	mov.w	r1, #4608	; 0x1200
 800093e:	f2c0 017a 	movt	r1, #122	; 0x7a
 8000942:	6001      	str	r1, [r0, #0]
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
      break;
  }
  /* Compute HCLK, PCLK clocks frequencies -----------------------------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000944:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000948:	f2c4 0302 	movt	r3, #16386	; 0x4002
  tmp = tmp >> 4;
  presc = APBAHBPrescTable[tmp]; 
 800094c:	4a6d      	ldr	r2, [pc, #436]	; (8000b04 <RCC_GetClocksFreq+0x1e4>)
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
      break;
  }
  /* Compute HCLK, PCLK clocks frequencies -----------------------------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 800094e:	685d      	ldr	r5, [r3, #4]
  tmp = tmp >> 4;
 8000950:	f3c5 1403 	ubfx	r4, r5, #4, #4
  presc = APBAHBPrescTable[tmp]; 
 8000954:	5d16      	ldrb	r6, [r2, r4]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000956:	fa21 f406 	lsr.w	r4, r1, r6
 800095a:	6044      	str	r4, [r0, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 800095c:	685d      	ldr	r5, [r3, #4]
  tmp = tmp >> 8;
 800095e:	f3c5 2602 	ubfx	r6, r5, #8, #3
  presc = APBAHBPrescTable[tmp];
 8000962:	5d95      	ldrb	r5, [r2, r6]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000964:	fa24 f505 	lsr.w	r5, r4, r5
 8000968:	6085      	str	r5, [r0, #8]
  
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 800096a:	685e      	ldr	r6, [r3, #4]
  tmp = tmp >> 11;
 800096c:	f3c6 26c2 	ubfx	r6, r6, #11, #3
  presc = APBAHBPrescTable[tmp];
 8000970:	5d96      	ldrb	r6, [r2, r6]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000972:	fa24 f406 	lsr.w	r4, r4, r6
 8000976:	60c4      	str	r4, [r0, #12]
  
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_ADCPRE;
 8000978:	685e      	ldr	r6, [r3, #4]
  tmp = tmp >> 14;
 800097a:	f3c6 3681 	ubfx	r6, r6, #14, #2
  presc = ADCPrescTable[tmp];
 800097e:	1996      	adds	r6, r2, r6
 8000980:	7c36      	ldrb	r6, [r6, #16]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 8000982:	fbb4 f6f6 	udiv	r6, r4, r6
 8000986:	6106      	str	r6, [r0, #16]
  
  /* Get SDADCCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_SDADCPRE;
 8000988:	685e      	ldr	r6, [r3, #4]
  tmp = (tmp >> 27) & 0x0F;
 800098a:	f3c6 66c3 	ubfx	r6, r6, #27, #4
  presc = SDADCPrescTable[tmp];
 800098e:	1992      	adds	r2, r2, r6
 8000990:	7d12      	ldrb	r2, [r2, #20]
  /* ADCCLK clock frequency */
  RCC_Clocks->SDADCCLK_Frequency = RCC_Clocks->SYSCLK_Frequency / presc;
 8000992:	fbb1 f2f2 	udiv	r2, r1, r2
 8000996:	6142      	str	r2, [r0, #20]
  
  /* CECCLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_CECSW) != RCC_CFGR3_CECSW)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	065a      	lsls	r2, r3, #25
    /* CECC Clock is LSE Osc. */
    RCC_Clocks->CECCLK_Frequency = LSE_VALUE;
  }
  
  /* I2C1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
 800099c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  
  /* CECCLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_CECSW) != RCC_CFGR3_CECSW)
  {
    /* CEC Clock is HSI/244 */
    RCC_Clocks->CECCLK_Frequency = HSI_VALUE / 244;
 80009a0:	bf54      	ite	pl
 80009a2:	f248 0212 	movwpl	r2, #32786	; 0x8012
  }
  else
  {
    /* CECC Clock is LSE Osc. */
    RCC_Clocks->CECCLK_Frequency = LSE_VALUE;
 80009a6:	f44f 4200 	movmi.w	r2, #32768	; 0x8000
  }
  
  /* I2C1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
 80009aa:	f2c4 0302 	movt	r3, #16386	; 0x4002
    RCC_Clocks->CECCLK_Frequency = HSI_VALUE / 244;
  }
  else
  {
    /* CECC Clock is LSE Osc. */
    RCC_Clocks->CECCLK_Frequency = LSE_VALUE;
 80009ae:	6182      	str	r2, [r0, #24]
  }
  
  /* I2C1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	06da      	lsls	r2, r3, #27
  {
    /* I2C1 Clock is HSI Osc. */
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
 80009b4:	bf58      	it	pl
 80009b6:	f44f 5390 	movpl.w	r3, #4608	; 0x1200
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
  }

  /* I2C2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C2SW) != RCC_CFGR3_I2C2SW)
 80009ba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009be:	f2c4 0202 	movt	r2, #16386	; 0x4002
  
  /* I2C1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
  {
    /* I2C1 Clock is HSI Osc. */
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
 80009c2:	bf5a      	itte	pl
 80009c4:	f2c0 037a 	movtpl	r3, #122	; 0x7a
 80009c8:	61c3      	strpl	r3, [r0, #28]
  }
  else
  {
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80009ca:	61c1      	strmi	r1, [r0, #28]
  }

  /* I2C2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C2SW) != RCC_CFGR3_I2C2SW)
 80009cc:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80009ce:	069a      	lsls	r2, r3, #26
  {
    /* I2C2 Clock is HSI Osc. */
    RCC_Clocks->I2C2CLK_Frequency = HSI_VALUE;
 80009d0:	bf58      	it	pl
 80009d2:	f44f 5290 	movpl.w	r2, #4608	; 0x1200
    /* I2C2 Clock is System Clock */
    RCC_Clocks->I2C2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
  }

  /* USART1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 80009d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000

  /* I2C2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C2SW) != RCC_CFGR3_I2C2SW)
  {
    /* I2C2 Clock is HSI Osc. */
    RCC_Clocks->I2C2CLK_Frequency = HSI_VALUE;
 80009da:	bf58      	it	pl
 80009dc:	f2c0 027a 	movtpl	r2, #122	; 0x7a
    /* I2C2 Clock is System Clock */
    RCC_Clocks->I2C2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
  }

  /* USART1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 80009e0:	f2c4 0302 	movt	r3, #16386	; 0x4002

  /* I2C2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C2SW) != RCC_CFGR3_I2C2SW)
  {
    /* I2C2 Clock is HSI Osc. */
    RCC_Clocks->I2C2CLK_Frequency = HSI_VALUE;
 80009e4:	bf54      	ite	pl
 80009e6:	6202      	strpl	r2, [r0, #32]
  }
  else
  {
    /* I2C2 Clock is System Clock */
    RCC_Clocks->I2C2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80009e8:	6201      	strmi	r1, [r0, #32]
  }

  /* USART1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 80009ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80009ec:	0792      	lsls	r2, r2, #30
 80009ee:	d12a      	bne.n	8000a46 <RCC_GetClocksFreq+0x126>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 80009f0:	6244      	str	r4, [r0, #36]	; 0x24
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART1CLK_Frequency = HSI_VALUE;
  }

  /* USART2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == 0x0)
 80009f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009f6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80009fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80009fc:	f412 3f40 	tst.w	r2, #196608	; 0x30000
 8000a00:	d136      	bne.n	8000a70 <RCC_GetClocksFreq+0x150>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000a02:	6285      	str	r5, [r0, #40]	; 0x28
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART2CLK_Frequency = HSI_VALUE;
  }    

  /* USART3CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == 0x0)
 8000a04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a08:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000a0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a0e:	f412 2f40 	tst.w	r2, #786432	; 0xc0000
 8000a12:	d045      	beq.n	8000aa0 <RCC_GetClocksFreq+0x180>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_0)
 8000a14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a16:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 8000a1a:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 8000a1e:	d062      	beq.n	8000ae6 <RCC_GetClocksFreq+0x1c6>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_1)
 8000a20:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000a22:	f401 2240 	and.w	r2, r1, #786432	; 0xc0000
 8000a26:	f5b2 2f00 	cmp.w	r2, #524288	; 0x80000
 8000a2a:	d066      	beq.n	8000afa <RCC_GetClocksFreq+0x1da>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART3CLK_Frequency = LSE_VALUE;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	f403 2140 	and.w	r1, r3, #786432	; 0xc0000
 8000a32:	f5b1 2f40 	cmp.w	r1, #786432	; 0xc0000
 8000a36:	d104      	bne.n	8000a42 <RCC_GetClocksFreq+0x122>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART3CLK_Frequency = HSI_VALUE;
 8000a38:	f44f 5290 	mov.w	r2, #4608	; 0x1200
 8000a3c:	f2c0 027a 	movt	r2, #122	; 0x7a
 8000a40:	62c2      	str	r2, [r0, #44]	; 0x2c
  }  
}
 8000a42:	bc70      	pop	{r4, r5, r6}
 8000a44:	4770      	bx	lr
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_0)
 8000a46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a48:	f002 0203 	and.w	r2, r2, #3
 8000a4c:	2a01      	cmp	r2, #1
 8000a4e:	d03a      	beq.n	8000ac6 <RCC_GetClocksFreq+0x1a6>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_1)
 8000a50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a52:	f002 0203 	and.w	r2, r2, #3
 8000a56:	2a02      	cmp	r2, #2
 8000a58:	d047      	beq.n	8000aea <RCC_GetClocksFreq+0x1ca>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART1CLK_Frequency = LSE_VALUE;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW)
 8000a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5c:	f003 0203 	and.w	r2, r3, #3
 8000a60:	2a03      	cmp	r2, #3
 8000a62:	d1c6      	bne.n	80009f2 <RCC_GetClocksFreq+0xd2>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART1CLK_Frequency = HSI_VALUE;
 8000a64:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8000a68:	f2c0 037a 	movt	r3, #122	; 0x7a
 8000a6c:	6243      	str	r3, [r0, #36]	; 0x24
 8000a6e:	e7c0      	b.n	80009f2 <RCC_GetClocksFreq+0xd2>
  if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == 0x0)
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_0)
 8000a70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a72:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 8000a76:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8000a7a:	d022      	beq.n	8000ac2 <RCC_GetClocksFreq+0x1a2>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_1)
 8000a7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a7e:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 8000a82:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 8000a86:	d034      	beq.n	8000af2 <RCC_GetClocksFreq+0x1d2>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART2CLK_Frequency = LSE_VALUE;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8000a8e:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
 8000a92:	d1b7      	bne.n	8000a04 <RCC_GetClocksFreq+0xe4>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART2CLK_Frequency = HSI_VALUE;
 8000a94:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8000a98:	f2c0 037a 	movt	r3, #122	; 0x7a
 8000a9c:	6283      	str	r3, [r0, #40]	; 0x28
 8000a9e:	e7b1      	b.n	8000a04 <RCC_GetClocksFreq+0xe4>

  /* USART3CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == 0x0)
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000aa0:	62c5      	str	r5, [r0, #44]	; 0x2c
 8000aa2:	e7ce      	b.n	8000a42 <RCC_GetClocksFreq+0x122>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
      break;
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8000aa4:	685d      	ldr	r5, [r3, #4]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8000aa6:	685c      	ldr	r4, [r3, #4]
      pllmull = ( pllmull >> 18) + 2;
 8000aa8:	f3c5 4683 	ubfx	r6, r5, #18, #4
 8000aac:	1cb2      	adds	r2, r6, #2
      
      if (pllsource == 0x00)
 8000aae:	03e1      	lsls	r1, r4, #15
 8000ab0:	d40b      	bmi.n	8000aca <RCC_GetClocksFreq+0x1aa>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 8000ab2:	f44f 6610 	mov.w	r6, #2304	; 0x900
 8000ab6:	f2c0 063d 	movt	r6, #61	; 0x3d
 8000aba:	fb06 f102 	mul.w	r1, r6, r2
 8000abe:	6001      	str	r1, [r0, #0]
 8000ac0:	e740      	b.n	8000944 <RCC_GetClocksFreq+0x24>
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_0)
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000ac2:	6281      	str	r1, [r0, #40]	; 0x28
 8000ac4:	e79e      	b.n	8000a04 <RCC_GetClocksFreq+0xe4>
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_0)
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000ac6:	6241      	str	r1, [r0, #36]	; 0x24
 8000ac8:	e793      	b.n	80009f2 <RCC_GetClocksFreq+0xd2>
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 8000aca:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull; 
 8000acc:	f44f 5390 	mov.w	r3, #4608	; 0x1200
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 8000ad0:	f001 050f 	and.w	r5, r1, #15
 8000ad4:	1c6c      	adds	r4, r5, #1
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull; 
 8000ad6:	f2c0 037a 	movt	r3, #122	; 0x7a
 8000ada:	fbb3 f1f4 	udiv	r1, r3, r4
 8000ade:	fb02 f101 	mul.w	r1, r2, r1
 8000ae2:	6001      	str	r1, [r0, #0]
 8000ae4:	e72e      	b.n	8000944 <RCC_GetClocksFreq+0x24>
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_0)
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000ae6:	62c1      	str	r1, [r0, #44]	; 0x2c
 8000ae8:	e7ab      	b.n	8000a42 <RCC_GetClocksFreq+0x122>
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_1)
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART1CLK_Frequency = LSE_VALUE;
 8000aea:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000aee:	6242      	str	r2, [r0, #36]	; 0x24
 8000af0:	e77f      	b.n	80009f2 <RCC_GetClocksFreq+0xd2>
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_1)
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART2CLK_Frequency = LSE_VALUE;
 8000af2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000af6:	6282      	str	r2, [r0, #40]	; 0x28
 8000af8:	e784      	b.n	8000a04 <RCC_GetClocksFreq+0xe4>
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_1)
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART3CLK_Frequency = LSE_VALUE;
 8000afa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000afe:	62c3      	str	r3, [r0, #44]	; 0x2c
 8000b00:	e79f      	b.n	8000a42 <RCC_GetClocksFreq+0x122>
 8000b02:	bf00      	nop
 8000b04:	20000018 	.word	0x20000018

08000b08 <RCC_RTCCLKConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
  
  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
 8000b08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b0c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000b10:	6a1a      	ldr	r2, [r3, #32]
 8000b12:	4310      	orrs	r0, r2
 8000b14:	6218      	str	r0, [r3, #32]
 8000b16:	4770      	bx	lr

08000b18 <RCC_RTCCLKCmd>:
void RCC_RTCCLKCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 8000b18:	f240 433c 	movw	r3, #1084	; 0x43c
 8000b1c:	f2c4 2342 	movt	r3, #16962	; 0x4242
 8000b20:	6018      	str	r0, [r3, #0]
 8000b22:	4770      	bx	lr

08000b24 <RCC_BackupResetCmd>:
void RCC_BackupResetCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 8000b24:	f44f 6388 	mov.w	r3, #1088	; 0x440
 8000b28:	f2c4 2342 	movt	r3, #16962	; 0x4242
 8000b2c:	6018      	str	r0, [r3, #0]
 8000b2e:	4770      	bx	lr

08000b30 <RCC_AHBPeriphClockCmd>:
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8000b30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b34:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000b38:	695a      	ldr	r2, [r3, #20]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000b3a:	b919      	cbnz	r1, 8000b44 <RCC_AHBPeriphClockCmd+0x14>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8000b3c:	ea22 0000 	bic.w	r0, r2, r0
 8000b40:	6158      	str	r0, [r3, #20]
 8000b42:	4770      	bx	lr
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8000b44:	4310      	orrs	r0, r2
 8000b46:	6158      	str	r0, [r3, #20]
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop

08000b4c <RCC_APB2PeriphClockCmd>:
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000b4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b50:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000b54:	699a      	ldr	r2, [r3, #24]
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000b56:	b919      	cbnz	r1, 8000b60 <RCC_APB2PeriphClockCmd+0x14>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000b58:	ea22 0000 	bic.w	r0, r2, r0
 8000b5c:	6198      	str	r0, [r3, #24]
 8000b5e:	4770      	bx	lr
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000b60:	4310      	orrs	r0, r2
 8000b62:	6198      	str	r0, [r3, #24]
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <RCC_APB1PeriphClockCmd>:
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000b68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b6c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000b70:	69da      	ldr	r2, [r3, #28]
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000b72:	b919      	cbnz	r1, 8000b7c <RCC_APB1PeriphClockCmd+0x14>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000b74:	ea22 0000 	bic.w	r0, r2, r0
 8000b78:	61d8      	str	r0, [r3, #28]
 8000b7a:	4770      	bx	lr
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000b7c:	4310      	orrs	r0, r2
 8000b7e:	61d8      	str	r0, [r3, #28]
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop

08000b84 <RCC_AHBPeriphResetCmd>:
  assert_param(IS_RCC_AHB_RST_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHBRSTR |= RCC_AHBPeriph;
 8000b84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b88:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000b8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB_RST_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000b8e:	b919      	cbnz	r1, 8000b98 <RCC_AHBPeriphResetCmd+0x14>
  {
    RCC->AHBRSTR |= RCC_AHBPeriph;
  }
  else
  {
    RCC->AHBRSTR &= ~RCC_AHBPeriph;
 8000b90:	ea22 0000 	bic.w	r0, r2, r0
 8000b94:	6298      	str	r0, [r3, #40]	; 0x28
 8000b96:	4770      	bx	lr
  assert_param(IS_RCC_AHB_RST_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHBRSTR |= RCC_AHBPeriph;
 8000b98:	4310      	orrs	r0, r2
 8000b9a:	6298      	str	r0, [r3, #40]	; 0x28
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <RCC_APB2PeriphResetCmd>:
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8000ba0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ba4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000ba8:	68da      	ldr	r2, [r3, #12]
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000baa:	b919      	cbnz	r1, 8000bb4 <RCC_APB2PeriphResetCmd+0x14>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8000bac:	ea22 0000 	bic.w	r0, r2, r0
 8000bb0:	60d8      	str	r0, [r3, #12]
 8000bb2:	4770      	bx	lr
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8000bb4:	4310      	orrs	r0, r2
 8000bb6:	60d8      	str	r0, [r3, #12]
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <RCC_APB1PeriphResetCmd>:
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8000bbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bc0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000bc4:	691a      	ldr	r2, [r3, #16]
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000bc6:	b919      	cbnz	r1, 8000bd0 <RCC_APB1PeriphResetCmd+0x14>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8000bc8:	ea22 0000 	bic.w	r0, r2, r0
 8000bcc:	6118      	str	r0, [r3, #16]
 8000bce:	4770      	bx	lr
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8000bd0:	4310      	orrs	r0, r2
 8000bd2:	6118      	str	r0, [r3, #16]
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <RCC_ITConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Perform Byte access to RCC_CIR[13:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 8000bd8:	f241 0309 	movw	r3, #4105	; 0x1009
 8000bdc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000be0:	781a      	ldrb	r2, [r3, #0]
{
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000be2:	b919      	cbnz	r1, 8000bec <RCC_ITConfig+0x14>
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
  }
  else
  {
    /* Perform Byte access to RCC_CIR[13:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 8000be4:	ea22 0000 	bic.w	r0, r2, r0
 8000be8:	7018      	strb	r0, [r3, #0]
 8000bea:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Perform Byte access to RCC_CIR[13:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 8000bec:	4310      	orrs	r0, r2
 8000bee:	7018      	strb	r0, [r3, #0]
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop

08000bf4 <RCC_GetFlagStatus>:
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;

   if (tmp == 0)               /* The flag to check is in CR register */
 8000bf4:	0943      	lsrs	r3, r0, #5
 8000bf6:	d10b      	bne.n	8000c10 <RCC_GetFlagStatus+0x1c>
  {
    statusreg = RCC->CR;
 8000bf8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000bfc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000c00:	6811      	ldr	r1, [r2, #0]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;

  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8000c02:	f000 001f 	and.w	r0, r0, #31
 8000c06:	fa21 f300 	lsr.w	r3, r1, r0
  {
    bitstatus = RESET;
  }
  /* Return the flag status */
  return bitstatus;
}
 8000c0a:	f003 0001 	and.w	r0, r3, #1
 8000c0e:	4770      	bx	lr
  {
    statusreg = RCC->CR;
  }
  else if (tmp == 1)          /* The flag to check is in BDCR register */
  {
    statusreg = RCC->BDCR;
 8000c10:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c14:	f2c4 0102 	movt	r1, #16386	; 0x4002

   if (tmp == 0)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
  }
  else if (tmp == 1)          /* The flag to check is in BDCR register */
 8000c18:	2b01      	cmp	r3, #1
  {
    statusreg = RCC->BDCR;
 8000c1a:	bf0c      	ite	eq
 8000c1c:	6a09      	ldreq	r1, [r1, #32]
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 8000c1e:	6a49      	ldrne	r1, [r1, #36]	; 0x24
 8000c20:	e7ef      	b.n	8000c02 <RCC_GetFlagStatus+0xe>
 8000c22:	bf00      	nop

08000c24 <RCC_ClearFlag>:
  * @retval None
  */
void RCC_ClearFlag(void)
{
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
 8000c24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c28:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000c2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000c2e:	f042 7080 	orr.w	r0, r2, #16777216	; 0x1000000
 8000c32:	6258      	str	r0, [r3, #36]	; 0x24
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <RCC_GetITStatus>:
  
  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));
  
  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 8000c38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c3c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000c40:	6899      	ldr	r1, [r3, #8]
 8000c42:	4208      	tst	r0, r1
  {
    bitstatus = RESET;
  }
  /* Return the RCC_IT status */
  return  bitstatus;
}
 8000c44:	bf0c      	ite	eq
 8000c46:	2000      	moveq	r0, #0
 8000c48:	2001      	movne	r0, #1
 8000c4a:	4770      	bx	lr

08000c4c <RCC_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));
  
  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 8000c4c:	f241 030a 	movw	r3, #4106	; 0x100a
 8000c50:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000c54:	7018      	strb	r0, [r3, #0]
 8000c56:	4770      	bx	lr

08000c58 <SPI_I2S_DeInit>:
  *         reset values.
  * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
  * @retval None
  */
void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
{
 8000c58:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  if (SPIx == SPI1)
 8000c5a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000c5e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000c62:	4298      	cmp	r0, r3
 8000c64:	d018      	beq.n	8000c98 <SPI_I2S_DeInit+0x40>
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
  }
  else if (SPIx == SPI2)
 8000c66:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 8000c6a:	f2c4 0100 	movt	r1, #16384	; 0x4000
 8000c6e:	4288      	cmp	r0, r1
 8000c70:	d01e      	beq.n	8000cb0 <SPI_I2S_DeInit+0x58>
    /* Release SPI2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
  }
  else
  {
    if (SPIx == SPI3)
 8000c72:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8000c76:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8000c7a:	4290      	cmp	r0, r2
 8000c7c:	d000      	beq.n	8000c80 <SPI_I2S_DeInit+0x28>
 8000c7e:	bd08      	pop	{r3, pc}
    {
      /* Enable SPI3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
 8000c80:	2101      	movs	r1, #1
 8000c82:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000c86:	f7ff ff99 	bl	8000bbc <RCC_APB1PeriphResetCmd>
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 8000c8a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000c8e:	2100      	movs	r1, #0
    }
  }
}
 8000c90:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    if (SPIx == SPI3)
    {
      /* Enable SPI3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 8000c94:	f7ff bf92 	b.w	8000bbc <RCC_APB1PeriphResetCmd>
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  if (SPIx == SPI1)
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
 8000c98:	2101      	movs	r1, #1
 8000c9a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000c9e:	f7ff ff7f 	bl	8000ba0 <RCC_APB2PeriphResetCmd>
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 8000ca2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000ca6:	2100      	movs	r1, #0
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
    }
  }
}
 8000ca8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  if (SPIx == SPI1)
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 8000cac:	f7ff bf78 	b.w	8000ba0 <RCC_APB2PeriphResetCmd>
  }
  else if (SPIx == SPI2)
  {
    /* Enable SPI2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
 8000cb0:	2101      	movs	r1, #1
 8000cb2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000cb6:	f7ff ff81 	bl	8000bbc <RCC_APB1PeriphResetCmd>
    /* Release SPI2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
 8000cba:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000cbe:	2100      	movs	r1, #0
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
    }
  }
}
 8000cc0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else if (SPIx == SPI2)
  {
    /* Enable SPI2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
    /* Release SPI2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
 8000cc4:	f7ff bf7a 	b.w	8000bbc <RCC_APB1PeriphResetCmd>

08000cc8 <SPI_StructInit>:
  */
void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
{
/*--------------- Reset SPI init structure parameters values -----------------*/
  /* Initialize the SPI_Direction member */
  SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8000cc8:	2300      	movs	r3, #0
  /* Initialize the SPI_Mode member */
  SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
  /* Initialize the SPI_DataSize member */
  SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 8000cca:	f44f 62e0 	mov.w	r2, #1792	; 0x700
  /* Initialize the SPI_BaudRatePrescaler member */
  SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
  /* Initialize the SPI_FirstBit member */
  SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
  /* Initialize the SPI_CRCPolynomial member */
  SPI_InitStruct->SPI_CRCPolynomial = 7;
 8000cce:	2107      	movs	r1, #7
  */
void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
{
/*--------------- Reset SPI init structure parameters values -----------------*/
  /* Initialize the SPI_Direction member */
  SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8000cd0:	8003      	strh	r3, [r0, #0]
  /* Initialize the SPI_Mode member */
  SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
 8000cd2:	8043      	strh	r3, [r0, #2]
  /* Initialize the SPI_DataSize member */
  SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 8000cd4:	8082      	strh	r2, [r0, #4]
  /* Initialize the SPI_CPOL member */
  SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
 8000cd6:	80c3      	strh	r3, [r0, #6]
  /* Initialize the SPI_CPHA member */
  SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
 8000cd8:	8103      	strh	r3, [r0, #8]
  /* Initialize the SPI_NSS member */
  SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
 8000cda:	8143      	strh	r3, [r0, #10]
  /* Initialize the SPI_BaudRatePrescaler member */
  SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 8000cdc:	8183      	strh	r3, [r0, #12]
  /* Initialize the SPI_FirstBit member */
  SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
 8000cde:	81c3      	strh	r3, [r0, #14]
  /* Initialize the SPI_CRCPolynomial member */
  SPI_InitStruct->SPI_CRCPolynomial = 7;
 8000ce0:	8201      	strh	r1, [r0, #16]
 8000ce2:	4770      	bx	lr

08000ce4 <SPI_Init>:
  /* Set SSM, SSI bit according to SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_FirstBit |
 8000ce4:	880a      	ldrh	r2, [r1, #0]
 8000ce6:	f8b1 c008 	ldrh.w	ip, [r1, #8]
  /* Write to SPIx CR2 */
  SPIx->CR2 = tmpreg;
  
  /*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8000cea:	8a0b      	ldrh	r3, [r1, #16]
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8000cec:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
  /* Set SSM, SSI bit according to SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_FirstBit |
 8000cf0:	f8b1 900e 	ldrh.w	r9, [r1, #14]
 8000cf4:	f8b1 8006 	ldrh.w	r8, [r1, #6]
 8000cf8:	894f      	ldrh	r7, [r1, #10]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));
  
  /*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8000cfa:	8805      	ldrh	r5, [r0, #0]
  /* Set SSM, SSI bit according to SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_FirstBit |
 8000cfc:	898e      	ldrh	r6, [r1, #12]
  /* Get the SPIx CR2 value */
  tmpreg = SPIx->CR2;
  /* Clear DS[3:0] bits */
  tmpreg &=(uint16_t)~SPI_CR2_DS;
  /* Configure SPIx: Data Size */
  tmpreg |= (uint16_t)(SPI_InitStruct->SPI_DataSize);
 8000cfe:	888c      	ldrh	r4, [r1, #4]
  tmpreg = SPIx->CR1;
  /* Clear MSTR bit */
  tmpreg &= CR1_CLEAR_MASK2;
  /* Configure SPIx: master/slave mode */  
  /* Set MSTR bit according to SPI_Mode */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Mode);  
 8000d00:	8849      	ldrh	r1, [r1, #2]
  /* Set SSM, SSI bit according to SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_FirstBit |
 8000d02:	ea49 0202 	orr.w	r2, r9, r2
 8000d06:	ea42 0208 	orr.w	r2, r2, r8
 8000d0a:	ea42 020c 	orr.w	r2, r2, ip
 8000d0e:	433a      	orrs	r2, r7
  
  /*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 8000d10:	f405 5541 	and.w	r5, r5, #12352	; 0x3040
  /* Set SSM, SSI bit according to SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_FirstBit |
 8000d14:	4332      	orrs	r2, r6
 8000d16:	432a      	orrs	r2, r5
 8000d18:	b292      	uxth	r2, r2
                      SPI_InitStruct->SPI_CPOL | SPI_InitStruct->SPI_CPHA |
                      SPI_InitStruct->SPI_NSS | SPI_InitStruct->SPI_BaudRatePrescaler);  
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 8000d1a:	8002      	strh	r2, [r0, #0]
  /*-------------------------Data Size Configuration -----------------------*/
  /* Get the SPIx CR2 value */
  tmpreg = SPIx->CR2;
 8000d1c:	8882      	ldrh	r2, [r0, #4]
  /* Clear DS[3:0] bits */
  tmpreg &=(uint16_t)~SPI_CR2_DS;
 8000d1e:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8000d22:	0412      	lsls	r2, r2, #16
 8000d24:	0c12      	lsrs	r2, r2, #16
  /* Configure SPIx: Data Size */
  tmpreg |= (uint16_t)(SPI_InitStruct->SPI_DataSize);
 8000d26:	4322      	orrs	r2, r4
  /* Write to SPIx CR2 */
  SPIx->CR2 = tmpreg;
 8000d28:	8082      	strh	r2, [r0, #4]
  
  /*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8000d2a:	8203      	strh	r3, [r0, #16]
  
  /*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8000d2c:	8803      	ldrh	r3, [r0, #0]
  /* Clear MSTR bit */
  tmpreg &= CR1_CLEAR_MASK2;
 8000d2e:	f023 0204 	bic.w	r2, r3, #4
 8000d32:	0413      	lsls	r3, r2, #16
 8000d34:	0c1a      	lsrs	r2, r3, #16
  /* Configure SPIx: master/slave mode */  
  /* Set MSTR bit according to SPI_Mode */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Mode);  
 8000d36:	430a      	orrs	r2, r1
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;  
 8000d38:	8002      	strh	r2, [r0, #0]
  
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 8000d3a:	8b81      	ldrh	r1, [r0, #28]
 8000d3c:	f421 6300 	bic.w	r3, r1, #2048	; 0x800
 8000d40:	041a      	lsls	r2, r3, #16
 8000d42:	0c11      	lsrs	r1, r2, #16
 8000d44:	8381      	strh	r1, [r0, #28]
}
 8000d46:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000d4a:	4770      	bx	lr

08000d4c <I2S_StructInit>:
  */
void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
{
/*--------------- Reset I2S init structure parameters values -----------------*/
  /* Initialize the I2S_Mode member */
  I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
 8000d4c:	2300      	movs	r3, #0

  /* Initialize the I2S_MCLKOutput member */
  I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;

  /* Initialize the I2S_AudioFreq member */
  I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
 8000d4e:	2202      	movs	r2, #2
  */
void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
{
/*--------------- Reset I2S init structure parameters values -----------------*/
  /* Initialize the I2S_Mode member */
  I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
 8000d50:	8003      	strh	r3, [r0, #0]

  /* Initialize the I2S_Standard member */
  I2S_InitStruct->I2S_Standard = I2S_Standard_Phillips;
 8000d52:	8043      	strh	r3, [r0, #2]

  /* Initialize the I2S_DataFormat member */
  I2S_InitStruct->I2S_DataFormat = I2S_DataFormat_16b;
 8000d54:	8083      	strh	r3, [r0, #4]

  /* Initialize the I2S_MCLKOutput member */
  I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
 8000d56:	80c3      	strh	r3, [r0, #6]

  /* Initialize the I2S_AudioFreq member */
  I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
 8000d58:	6082      	str	r2, [r0, #8]

  /* Initialize the I2S_CPOL member */
  I2S_InitStruct->I2S_CPOL = I2S_CPOL_Low;
 8000d5a:	8183      	strh	r3, [r0, #12]
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop

08000d60 <I2S_Init>:
  assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_Mask; 
 8000d60:	8b83      	ldrh	r3, [r0, #28]

  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;

  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 8000d62:	688a      	ldr	r2, [r1, #8]
  *         and the product configuration). But in case the prescaler value is greater 
  *         than 511, the default value (0x02) will be configured instead.
  * @retval None
  */
void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
{
 8000d64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d66:	4605      	mov	r5, r0
  assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_Mask; 
 8000d68:	f423 607b 	bic.w	r0, r3, #4016	; 0xfb0
  *         and the product configuration). But in case the prescaler value is greater 
  *         than 511, the default value (0x02) will be configured instead.
  * @retval None
  */
void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
{
 8000d6c:	460c      	mov	r4, r1
  assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_Mask; 
 8000d6e:	f020 010f 	bic.w	r1, r0, #15
 8000d72:	040e      	lsls	r6, r1, #16
 8000d74:	0c37      	lsrs	r7, r6, #16
  SPIx->I2SPR = 0x0002;
 8000d76:	2302      	movs	r3, #2
  assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_Mask; 
 8000d78:	83af      	strh	r7, [r5, #28]
  SPIx->I2SPR = 0x0002;
 8000d7a:	842b      	strh	r3, [r5, #32]

  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
 8000d7c:	8ba8      	ldrh	r0, [r5, #28]

  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 8000d7e:	429a      	cmp	r2, r3
  *         and the product configuration). But in case the prescaler value is greater 
  *         than 511, the default value (0x02) will be configured instead.
  * @retval None
  */
void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
{
 8000d80:	b08d      	sub	sp, #52	; 0x34
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_Mask; 
  SPIx->I2SPR = 0x0002;

  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
 8000d82:	b286      	uxth	r6, r0

  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 8000d84:	d03a      	beq.n	8000dfc <I2S_Init+0x9c>
  }
  /* If the requested audio frequency is not the default, compute the prescaler */
  else
  {
    /* Check the frame length (For the Prescaler computing) */
    if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
 8000d86:	88a2      	ldrh	r2, [r4, #4]
      /* Packet length is 32 bits */
      packetlength = 2;
    }

    /* I2S Clock source is System clock: Get System Clock frequency */
    RCC_GetClocksFreq(&RCC_Clocks);      
 8000d88:	4668      	mov	r0, sp
  {
    /* Check the frame length (For the Prescaler computing) */
    if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
    {
      /* Packet length is 16 bits */
      packetlength = 1;
 8000d8a:	2a00      	cmp	r2, #0
 8000d8c:	bf14      	ite	ne
 8000d8e:	2702      	movne	r7, #2
 8000d90:	2701      	moveq	r7, #1
      /* Packet length is 32 bits */
      packetlength = 2;
    }

    /* I2S Clock source is System clock: Get System Clock frequency */
    RCC_GetClocksFreq(&RCC_Clocks);      
 8000d92:	f7ff fdc5 	bl	8000920 <RCC_GetClocksFreq>

    /* Get the source clock value: based on System Clock value */
    sourceclock = RCC_Clocks.SYSCLK_Frequency;    

    /* Compute the Real divider depending on the MCLK output state with a floating point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
 8000d96:	88e3      	ldrh	r3, [r4, #6]

    /* I2S Clock source is System clock: Get System Clock frequency */
    RCC_GetClocksFreq(&RCC_Clocks);      

    /* Get the source clock value: based on System Clock value */
    sourceclock = RCC_Clocks.SYSCLK_Frequency;    
 8000d98:	9900      	ldr	r1, [sp, #0]

    /* Compute the Real divider depending on the MCLK output state with a floating point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
 8000d9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000d9e:	d02f      	beq.n	8000e00 <I2S_Init+0xa0>
      tmp = (uint16_t)(((((sourceclock / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint16_t)(((((sourceclock / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 8000da0:	0178      	lsls	r0, r7, #5
 8000da2:	fbb1 f2f0 	udiv	r2, r1, r0
 8000da6:	eb02 0782 	add.w	r7, r2, r2, lsl #2
 8000daa:	68a1      	ldr	r1, [r4, #8]
 8000dac:	0078      	lsls	r0, r7, #1
 8000dae:	fbb0 f2f1 	udiv	r2, r0, r1
 8000db2:	1d57      	adds	r7, r2, #5
 8000db4:	b2b8      	uxth	r0, r7
    }
    
    /* Remove the floating point */
    tmp = tmp / 10;
 8000db6:	f64c 47cd 	movw	r7, #52429	; 0xcccd
 8000dba:	f6cc 47cc 	movt	r7, #52428	; 0xcccc
 8000dbe:	fba7 0100 	umull	r0, r1, r7, r0
 8000dc2:	08ca      	lsrs	r2, r1, #3

    /* Check the parity of the divider */
    i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
 8000dc4:	0857      	lsrs	r7, r2, #1
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2) || (i2sdiv > 0xFF))
 8000dc6:	1eb8      	subs	r0, r7, #2

    /* Check the parity of the divider */
    i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
 8000dc8:	f002 0201 	and.w	r2, r2, #1
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2) || (i2sdiv > 0xFF))
 8000dcc:	28fd      	cmp	r0, #253	; 0xfd
 8000dce:	bf94      	ite	ls
 8000dd0:	ea47 2202 	orrls.w	r2, r7, r2, lsl #8
 8000dd4:	2202      	movhi	r2, #2
  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)(i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));

  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)(SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 8000dd6:	8821      	ldrh	r1, [r4, #0]

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)(i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));

  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)(SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 8000dd8:	f8b4 c002 	ldrh.w	ip, [r4, #2]
 8000ddc:	88a7      	ldrh	r7, [r4, #4]
 8000dde:	89a0      	ldrh	r0, [r4, #12]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 8000de0:	4331      	orrs	r1, r6
 8000de2:	f441 6100 	orr.w	r1, r1, #2048	; 0x800

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)(i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));

  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)(SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 8000de6:	ea41 010c 	orr.w	r1, r1, ip
 8000dea:	4339      	orrs	r1, r7
    i2sdiv = 2;
    i2sodd = 0;
  }

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)(i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 8000dec:	4313      	orrs	r3, r2

  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)(SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 8000dee:	4301      	orrs	r1, r0
    i2sdiv = 2;
    i2sodd = 0;
  }

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)(i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 8000df0:	b29a      	uxth	r2, r3

  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)(SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 8000df2:	b288      	uxth	r0, r1
    i2sdiv = 2;
    i2sodd = 0;
  }

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)(i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 8000df4:	842a      	strh	r2, [r5, #32]
  tmpreg |= (uint16_t)(SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));

  /* Write to SPIx I2SCFGR */
  SPIx->I2SCFGR = tmpreg;
 8000df6:	83a8      	strh	r0, [r5, #28]
}
 8000df8:	b00d      	add	sp, #52	; 0x34
 8000dfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000dfc:	88e3      	ldrh	r3, [r4, #6]
 8000dfe:	e7ea      	b.n	8000dd6 <I2S_Init+0x76>

    /* Compute the Real divider depending on the MCLK output state with a floating point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
    {
      /* MCLK output is enabled */
      tmp = (uint16_t)(((((sourceclock / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 8000e00:	0a09      	lsrs	r1, r1, #8
 8000e02:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8000e06:	68a7      	ldr	r7, [r4, #8]
 8000e08:	0050      	lsls	r0, r2, #1
 8000e0a:	fbb0 f1f7 	udiv	r1, r0, r7
 8000e0e:	1d4a      	adds	r2, r1, #5
 8000e10:	b290      	uxth	r0, r2
 8000e12:	e7d0      	b.n	8000db6 <I2S_Init+0x56>

08000e14 <SPI_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 8000e14:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000e16:	b929      	cbnz	r1, 8000e24 <SPI_Cmd+0x10>
    SPIx->CR1 |= SPI_CR1_SPE;
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 8000e18:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8000e1c:	040a      	lsls	r2, r1, #16
 8000e1e:	0c13      	lsrs	r3, r2, #16
 8000e20:	8003      	strh	r3, [r0, #0]
 8000e22:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 8000e24:	b299      	uxth	r1, r3
 8000e26:	f041 0240 	orr.w	r2, r1, #64	; 0x40
 8000e2a:	8002      	strh	r2, [r0, #0]
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop

08000e30 <SPI_TIModeCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the TI mode for the selected SPI peripheral */
    SPIx->CR2 |= SPI_CR2_FRF;
 8000e30:	8883      	ldrh	r3, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000e32:	b929      	cbnz	r1, 8000e40 <SPI_TIModeCmd+0x10>
    SPIx->CR2 |= SPI_CR2_FRF;
  }
  else
  {
    /* Disable the TI mode for the selected SPI peripheral */
    SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_FRF);
 8000e34:	f023 0110 	bic.w	r1, r3, #16
 8000e38:	040a      	lsls	r2, r1, #16
 8000e3a:	0c13      	lsrs	r3, r2, #16
 8000e3c:	8083      	strh	r3, [r0, #4]
 8000e3e:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the TI mode for the selected SPI peripheral */
    SPIx->CR2 |= SPI_CR2_FRF;
 8000e40:	b299      	uxth	r1, r3
 8000e42:	f041 0210 	orr.w	r2, r1, #16
 8000e46:	8082      	strh	r2, [r0, #4]
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop

08000e4c <I2S_Cmd>:
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI peripheral in I2S mode */
    SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
 8000e4c:	8b83      	ldrh	r3, [r0, #28]
void I2S_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000e4e:	b929      	cbnz	r1, 8000e5c <I2S_Cmd+0x10>
    SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
  }
  else
  {
    /* Disable the selected SPI peripheral in I2S mode */
    SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SE);
 8000e50:	f423 6180 	bic.w	r1, r3, #1024	; 0x400
 8000e54:	040a      	lsls	r2, r1, #16
 8000e56:	0c13      	lsrs	r3, r2, #16
 8000e58:	8383      	strh	r3, [r0, #28]
 8000e5a:	4770      	bx	lr
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI peripheral in I2S mode */
    SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
 8000e5c:	b299      	uxth	r1, r3
 8000e5e:	f441 6280 	orr.w	r2, r1, #1024	; 0x400
 8000e62:	8382      	strh	r2, [r0, #28]
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop

08000e68 <SPI_DataSizeConfig>:
  
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DATA_SIZE(SPI_DataSize));
  /* Read the CR2 register */
  tmpreg = SPIx->CR2;
 8000e68:	8883      	ldrh	r3, [r0, #4]
  /* Clear DS[3:0] bits */
  tmpreg &= (uint16_t)~SPI_CR2_DS;
 8000e6a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8000e6e:	0413      	lsls	r3, r2, #16
 8000e70:	0c1a      	lsrs	r2, r3, #16
  /* Set new DS[3:0] bits value */
  tmpreg |= SPI_DataSize;
 8000e72:	4311      	orrs	r1, r2
  SPIx->CR2 = tmpreg;
 8000e74:	8081      	strh	r1, [r0, #4]
 8000e76:	4770      	bx	lr

08000e78 <SPI_RxFIFOThresholdConfig>:
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_RX_FIFO_THRESHOLD(SPI_RxFIFOThreshold));

  /* Clear FRXTH bit */
  SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_FRXTH);
 8000e78:	8883      	ldrh	r3, [r0, #4]
 8000e7a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000e7e:	0413      	lsls	r3, r2, #16
 8000e80:	0c1a      	lsrs	r2, r3, #16
 8000e82:	8082      	strh	r2, [r0, #4]

  /* Set new FRXTH bit value */
  SPIx->CR2 |= SPI_RxFIFOThreshold;
 8000e84:	8883      	ldrh	r3, [r0, #4]
 8000e86:	b29a      	uxth	r2, r3
 8000e88:	4311      	orrs	r1, r2
 8000e8a:	8081      	strh	r1, [r0, #4]
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop

08000e90 <SPI_BiDirectionalLineConfig>:
void SPI_BiDirectionalLineConfig(SPI_TypeDef* SPIx, uint16_t SPI_Direction)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DIRECTION(SPI_Direction));
  if (SPI_Direction == SPI_Direction_Tx)
 8000e90:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
  {
    /* Set the Tx only mode */
    SPIx->CR1 |= SPI_Direction_Tx;
 8000e94:	8803      	ldrh	r3, [r0, #0]
void SPI_BiDirectionalLineConfig(SPI_TypeDef* SPIx, uint16_t SPI_Direction)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DIRECTION(SPI_Direction));
  if (SPI_Direction == SPI_Direction_Tx)
 8000e96:	d005      	beq.n	8000ea4 <SPI_BiDirectionalLineConfig+0x14>
    SPIx->CR1 |= SPI_Direction_Tx;
  }
  else
  {
    /* Set the Rx only mode */
    SPIx->CR1 &= SPI_Direction_Rx;
 8000e98:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8000e9c:	040a      	lsls	r2, r1, #16
 8000e9e:	0c13      	lsrs	r3, r2, #16
 8000ea0:	8003      	strh	r3, [r0, #0]
 8000ea2:	4770      	bx	lr
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DIRECTION(SPI_Direction));
  if (SPI_Direction == SPI_Direction_Tx)
  {
    /* Set the Tx only mode */
    SPIx->CR1 |= SPI_Direction_Tx;
 8000ea4:	b299      	uxth	r1, r3
 8000ea6:	f441 4280 	orr.w	r2, r1, #16384	; 0x4000
 8000eaa:	8002      	strh	r2, [r0, #0]
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop

08000eb0 <SPI_NSSInternalSoftwareConfig>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));

  if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
 8000eb0:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8000eb4:	4299      	cmp	r1, r3
  {
    /* Set NSS pin internally by software */
    SPIx->CR1 |= SPI_NSSInternalSoft_Set;
 8000eb6:	8801      	ldrh	r1, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));

  if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
 8000eb8:	d004      	beq.n	8000ec4 <SPI_NSSInternalSoftwareConfig+0x14>
  {
    /* Set NSS pin internally by software */
    SPIx->CR1 |= SPI_NSSInternalSoft_Set;
 8000eba:	b28a      	uxth	r2, r1
 8000ebc:	f442 7380 	orr.w	r3, r2, #256	; 0x100
 8000ec0:	8003      	strh	r3, [r0, #0]
 8000ec2:	4770      	bx	lr
  }
  else
  {
    /* Reset NSS pin internally by software */
    SPIx->CR1 &= SPI_NSSInternalSoft_Reset;
 8000ec4:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8000ec8:	0413      	lsls	r3, r2, #16
 8000eca:	0c19      	lsrs	r1, r3, #16
 8000ecc:	8001      	strh	r1, [r0, #0]
 8000ece:	4770      	bx	lr

08000ed0 <SPI_SSOutputCmd>:
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI SS output */
    SPIx->CR2 |= SPI_CR2_SSOE;
 8000ed0:	8883      	ldrh	r3, [r0, #4]
void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000ed2:	b929      	cbnz	r1, 8000ee0 <SPI_SSOutputCmd+0x10>
    SPIx->CR2 |= SPI_CR2_SSOE;
  }
  else
  {
    /* Disable the selected SPI SS output */
    SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_SSOE);
 8000ed4:	f023 0104 	bic.w	r1, r3, #4
 8000ed8:	040a      	lsls	r2, r1, #16
 8000eda:	0c13      	lsrs	r3, r2, #16
 8000edc:	8083      	strh	r3, [r0, #4]
 8000ede:	4770      	bx	lr
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI SS output */
    SPIx->CR2 |= SPI_CR2_SSOE;
 8000ee0:	b299      	uxth	r1, r3
 8000ee2:	f041 0204 	orr.w	r2, r1, #4
 8000ee6:	8082      	strh	r2, [r0, #4]
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop

08000eec <SPI_NSSPulseModeCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the NSS pulse management mode */
    SPIx->CR2 |= SPI_CR2_NSSP;
 8000eec:	8883      	ldrh	r3, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000eee:	b929      	cbnz	r1, 8000efc <SPI_NSSPulseModeCmd+0x10>
    SPIx->CR2 |= SPI_CR2_NSSP;
  }
  else
  {
    /* Disable the NSS pulse management mode */
    SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_NSSP);    
 8000ef0:	f023 0108 	bic.w	r1, r3, #8
 8000ef4:	040a      	lsls	r2, r1, #16
 8000ef6:	0c13      	lsrs	r3, r2, #16
 8000ef8:	8083      	strh	r3, [r0, #4]
 8000efa:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the NSS pulse management mode */
    SPIx->CR2 |= SPI_CR2_NSSP;
 8000efc:	b299      	uxth	r1, r3
 8000efe:	f041 0208 	orr.w	r2, r1, #8
 8000f02:	8082      	strh	r2, [r0, #4]
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop

08000f08 <SPI_SendData8>:
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  spixbase = (uint32_t)SPIx; 
  spixbase += 0x0C;
  
  *(__IO uint8_t *) spixbase = Data;
 8000f08:	7301      	strb	r1, [r0, #12]
 8000f0a:	4770      	bx	lr

08000f0c <SPI_I2S_SendData16>:
void SPI_I2S_SendData16(SPI_TypeDef* SPIx, uint16_t Data)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  SPIx->DR = (uint16_t)Data;
 8000f0c:	8181      	strh	r1, [r0, #12]
 8000f0e:	4770      	bx	lr

08000f10 <SPI_ReceiveData8>:
  uint32_t spixbase = 0x00;
  
  spixbase = (uint32_t)SPIx; 
  spixbase += 0x0C;
  
  return *(__IO uint8_t *) spixbase;
 8000f10:	7b00      	ldrb	r0, [r0, #12]
}
 8000f12:	4770      	bx	lr

08000f14 <SPI_I2S_ReceiveData16>:
  * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
  * @retval The value of the received data.
  */
uint16_t SPI_I2S_ReceiveData16(SPI_TypeDef* SPIx)
{
  return SPIx->DR;
 8000f14:	8980      	ldrh	r0, [r0, #12]
}
 8000f16:	b280      	uxth	r0, r0
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop

08000f1c <SPI_CRCLengthConfig>:
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_CRC_LENGTH(SPI_CRCLength));

  /* Clear CRCL bit */
  SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_CRCL);
 8000f1c:	8803      	ldrh	r3, [r0, #0]
 8000f1e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8000f22:	0413      	lsls	r3, r2, #16
 8000f24:	0c1a      	lsrs	r2, r3, #16
 8000f26:	8002      	strh	r2, [r0, #0]

  /* Set new CRCL bit value */
  SPIx->CR1 |= SPI_CRCLength;
 8000f28:	8803      	ldrh	r3, [r0, #0]
 8000f2a:	b29a      	uxth	r2, r3
 8000f2c:	4311      	orrs	r1, r2
 8000f2e:	8001      	strh	r1, [r0, #0]
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop

08000f34 <SPI_CalculateCRC>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected SPI CRC calculation */
    SPIx->CR1 |= SPI_CR1_CRCEN;
 8000f34:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000f36:	b929      	cbnz	r1, 8000f44 <SPI_CalculateCRC+0x10>
    SPIx->CR1 |= SPI_CR1_CRCEN;
  }
  else
  {
    /* Disable the selected SPI CRC calculation */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_CRCEN);
 8000f38:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8000f3c:	040a      	lsls	r2, r1, #16
 8000f3e:	0c13      	lsrs	r3, r2, #16
 8000f40:	8003      	strh	r3, [r0, #0]
 8000f42:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected SPI CRC calculation */
    SPIx->CR1 |= SPI_CR1_CRCEN;
 8000f44:	b299      	uxth	r1, r3
 8000f46:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
 8000f4a:	8002      	strh	r2, [r0, #0]
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop

08000f50 <SPI_TransmitCRC>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  /* Enable the selected SPI CRC transmission */
  SPIx->CR1 |= SPI_CR1_CRCNEXT;
 8000f50:	8803      	ldrh	r3, [r0, #0]
 8000f52:	b299      	uxth	r1, r3
 8000f54:	f441 5280 	orr.w	r2, r1, #4096	; 0x1000
 8000f58:	8002      	strh	r2, [r0, #0]
 8000f5a:	4770      	bx	lr

08000f5c <SPI_GetCRC>:
  uint16_t crcreg = 0;
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_CRC(SPI_CRC));

  if (SPI_CRC != SPI_CRC_Rx)
 8000f5c:	2901      	cmp	r1, #1
  {
    /* Get the Tx CRC register */
    crcreg = SPIx->TXCRCR;
 8000f5e:	bf14      	ite	ne
 8000f60:	8b00      	ldrhne	r0, [r0, #24]
  }
  else
  {
    /* Get the Rx CRC register */
    crcreg = SPIx->RXCRCR;
 8000f62:	8a80      	ldrheq	r0, [r0, #20]
 8000f64:	b280      	uxth	r0, r0
  }
  /* Return the selected CRC register */
  return crcreg;
}
 8000f66:	4770      	bx	lr

08000f68 <SPI_GetCRCPolynomial>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  /* Return the CRC polynomial register */
  return SPIx->CRCPR;
 8000f68:	8a00      	ldrh	r0, [r0, #16]
}
 8000f6a:	b280      	uxth	r0, r0
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop

08000f70 <SPI_I2S_DMACmd>:
  assert_param(IS_SPI_I2S_DMA_REQ(SPI_I2S_DMAReq));

  if (NewState != DISABLE)
  {
    /* Enable the selected SPI DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 8000f70:	8883      	ldrh	r3, [r0, #4]
 8000f72:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_DMA_REQ(SPI_I2S_DMAReq));

  if (NewState != DISABLE)
 8000f74:	b91a      	cbnz	r2, 8000f7e <SPI_I2S_DMACmd+0xe>
    SPIx->CR2 |= SPI_I2S_DMAReq;
  }
  else
  {
    /* Disable the selected SPI DMA requests */
    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
 8000f76:	ea23 0101 	bic.w	r1, r3, r1
 8000f7a:	8081      	strh	r1, [r0, #4]
 8000f7c:	4770      	bx	lr
  assert_param(IS_SPI_I2S_DMA_REQ(SPI_I2S_DMAReq));

  if (NewState != DISABLE)
  {
    /* Enable the selected SPI DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 8000f7e:	4319      	orrs	r1, r3
 8000f80:	8081      	strh	r1, [r0, #4]
 8000f82:	4770      	bx	lr

08000f84 <SPI_LastDMATransferCmd>:
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_LAST_DMA_TRANSFER(SPI_LastDMATransfer));

  /* Clear LDMA_TX and LDMA_RX bits */
  SPIx->CR2 &= CR2_LDMA_MASK;
 8000f84:	8883      	ldrh	r3, [r0, #4]
 8000f86:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 8000f8a:	0413      	lsls	r3, r2, #16
 8000f8c:	0c1a      	lsrs	r2, r3, #16
 8000f8e:	8082      	strh	r2, [r0, #4]

  /* Set new LDMA_TX and LDMA_RX bits value */
  SPIx->CR2 |= SPI_LastDMATransfer; 
 8000f90:	8883      	ldrh	r3, [r0, #4]
 8000f92:	b29a      	uxth	r2, r3
 8000f94:	4311      	orrs	r1, r2
 8000f96:	8081      	strh	r1, [r0, #4]
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop

08000f9c <SPI_I2S_ITConfig>:

  /* Get the SPI IT index */
  itpos = SPI_I2S_IT >> 4;

  /* Set the IT mask */
  itmask = (uint16_t)1 << (uint16_t)itpos;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	0909      	lsrs	r1, r1, #4
 8000fa0:	fa03 f101 	lsl.w	r1, r3, r1

  if (NewState != DISABLE)
  {
    /* Enable the selected SPI interrupt */
    SPIx->CR2 |= itmask;
 8000fa4:	8883      	ldrh	r3, [r0, #4]

  /* Get the SPI IT index */
  itpos = SPI_I2S_IT >> 4;

  /* Set the IT mask */
  itmask = (uint16_t)1 << (uint16_t)itpos;
 8000fa6:	b289      	uxth	r1, r1

  if (NewState != DISABLE)
  {
    /* Enable the selected SPI interrupt */
    SPIx->CR2 |= itmask;
 8000fa8:	b29b      	uxth	r3, r3
  itpos = SPI_I2S_IT >> 4;

  /* Set the IT mask */
  itmask = (uint16_t)1 << (uint16_t)itpos;

  if (NewState != DISABLE)
 8000faa:	b91a      	cbnz	r2, 8000fb4 <SPI_I2S_ITConfig+0x18>
    SPIx->CR2 |= itmask;
  }
  else
  {
    /* Disable the selected SPI interrupt */
    SPIx->CR2 &= (uint16_t)~itmask;
 8000fac:	ea23 0201 	bic.w	r2, r3, r1
 8000fb0:	8082      	strh	r2, [r0, #4]
 8000fb2:	4770      	bx	lr
  itmask = (uint16_t)1 << (uint16_t)itpos;

  if (NewState != DISABLE)
  {
    /* Enable the selected SPI interrupt */
    SPIx->CR2 |= itmask;
 8000fb4:	4319      	orrs	r1, r3
 8000fb6:	8081      	strh	r1, [r0, #4]
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop

08000fbc <SPI_GetTransmissionFIFOStatus>:
  *          - SPI_TransmissionFIFOStatus_Full: when FIFO is full.
  */
uint16_t SPI_GetTransmissionFIFOStatus(SPI_TypeDef* SPIx)
{
  /* Get the SPIx Transmission FIFO level bits */
  return (uint16_t)((SPIx->SR & SPI_SR_FTLVL));
 8000fbc:	8900      	ldrh	r0, [r0, #8]
}
 8000fbe:	f400 50c0 	and.w	r0, r0, #6144	; 0x1800
 8000fc2:	4770      	bx	lr

08000fc4 <SPI_GetReceptionFIFOStatus>:
  *          - SPI_ReceptionFIFOStatus_Full: when FIFO is full.
  */
uint16_t SPI_GetReceptionFIFOStatus(SPI_TypeDef* SPIx)
{
  /* Get the SPIx Reception FIFO level bits */
  return (uint16_t)((SPIx->SR & SPI_SR_FRLVL));
 8000fc4:	8900      	ldrh	r0, [r0, #8]
}
 8000fc6:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8000fca:	4770      	bx	lr

08000fcc <SPI_I2S_GetFlagStatus>:
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));

  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8000fcc:	8903      	ldrh	r3, [r0, #8]
 8000fce:	4219      	tst	r1, r3
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
}
 8000fd0:	bf0c      	ite	eq
 8000fd2:	2000      	moveq	r0, #0
 8000fd4:	2001      	movne	r0, #1
 8000fd6:	4770      	bx	lr

08000fd8 <SPI_I2S_ClearFlag>:
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_CLEAR_FLAG(SPI_I2S_FLAG));

  /* Clear the selected SPI CRC Error (CRCERR) flag */
  SPIx->SR = (uint16_t)~SPI_I2S_FLAG;
 8000fd8:	43c9      	mvns	r1, r1
 8000fda:	b28a      	uxth	r2, r1
 8000fdc:	8102      	strh	r2, [r0, #8]
 8000fde:	4770      	bx	lr

08000fe0 <SPI_I2S_GetITStatus>:
  *            @arg I2S_IT_UDR: Underrun interrupt.  
  *            @arg SPI_I2S_IT_FRE: Format Error interrupt.  
  * @retval The new state of SPI_I2S_IT (SET or RESET).
  */
ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
{
 8000fe0:	b410      	push	{r4}

  /* Set the IT mask */
  itmask = 0x01 << itmask;

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;
 8000fe2:	8884      	ldrh	r4, [r0, #4]

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 8000fe4:	8900      	ldrh	r0, [r0, #8]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));

  /* Get the SPI_I2S_IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	f001 030f 	and.w	r3, r1, #15

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 8000fec:	b280      	uxth	r0, r0
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));

  /* Get the SPI_I2S_IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 8000fee:	fa02 f303 	lsl.w	r3, r2, r3

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 8000ff2:	4018      	ands	r0, r3

  /* Set the IT mask */
  itmask = 0x01 << itmask;

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;
 8000ff4:	b2a4      	uxth	r4, r4

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 8000ff6:	d006      	beq.n	8001006 <SPI_I2S_GetITStatus+0x26>

  /* Get the SPI_I2S_IT IT mask */
  itmask = SPI_I2S_IT >> 4;

  /* Set the IT mask */
  itmask = 0x01 << itmask;
 8000ff8:	0909      	lsrs	r1, r1, #4
 8000ffa:	fa02 f201 	lsl.w	r2, r2, r1

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 8000ffe:	4214      	tst	r4, r2
  {
    /* SPI_I2S_IT is set */
    bitstatus = SET;
 8001000:	bf0c      	ite	eq
 8001002:	2000      	moveq	r0, #0
 8001004:	2001      	movne	r0, #1
    /* SPI_I2S_IT is reset */
    bitstatus = RESET;
  }
  /* Return the SPI_I2S_IT status */
  return bitstatus;
}
 8001006:	bc10      	pop	{r4}
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop

0800100c <USART_DeInit>:
  * @brief  Deinitializes the USARTx peripheral registers to their default reset values.
  * @param  USARTx: where x can be 1 or 2 or 3 to select the USART peripheral.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
 800100c:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  if (USARTx == USART1)
 800100e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001012:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001016:	4298      	cmp	r0, r3
 8001018:	d018      	beq.n	800104c <USART_DeInit+0x40>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
  }
  else if (USARTx == USART2)
 800101a:	f44f 4188 	mov.w	r1, #17408	; 0x4400
 800101e:	f2c4 0100 	movt	r1, #16384	; 0x4000
 8001022:	4288      	cmp	r0, r1
 8001024:	d01e      	beq.n	8001064 <USART_DeInit+0x58>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);    
  }
  else 
  {
    if  (USARTx == USART3)
 8001026:	f44f 4290 	mov.w	r2, #18432	; 0x4800
 800102a:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800102e:	4290      	cmp	r0, r2
 8001030:	d000      	beq.n	8001034 <USART_DeInit+0x28>
 8001032:	bd08      	pop	{r3, pc}
    {
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
 8001034:	2101      	movs	r1, #1
 8001036:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800103a:	f7ff fdbf 	bl	8000bbc <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 800103e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001042:	2100      	movs	r1, #0
    }
  }  
}
 8001044:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else 
  {
    if  (USARTx == USART3)
    {
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 8001048:	f7ff bdb8 	b.w	8000bbc <RCC_APB1PeriphResetCmd>
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  if (USARTx == USART1)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 800104c:	2101      	movs	r1, #1
 800104e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001052:	f7ff fda5 	bl	8000ba0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 8001056:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800105a:	2100      	movs	r1, #0
    {
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
    }
  }  
}
 800105c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  if (USARTx == USART1)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 8001060:	f7ff bd9e 	b.w	8000ba0 <RCC_APB2PeriphResetCmd>
  }
  else if (USARTx == USART2)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 8001064:	2101      	movs	r1, #1
 8001066:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800106a:	f7ff fda7 	bl	8000bbc <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);    
 800106e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001072:	2100      	movs	r1, #0
    {
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
    }
  }  
}
 8001074:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
  }
  else if (USARTx == USART2)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);    
 8001078:	f7ff bda0 	b.w	8000bbc <RCC_APB1PeriphResetCmd>

0800107c <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
  *         that contains the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 800107c:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_USART_PARITY(USART_InitStruct->USART_Parity));
  assert_param(IS_USART_MODE(USART_InitStruct->USART_Mode));
  assert_param(IS_USART_HARDWARE_FLOW_CONTROL(USART_InitStruct->USART_HardwareFlowControl));
  
  /* Disable USART */
  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
 800107e:	6807      	ldr	r7, [r0, #0]
  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8001080:	688e      	ldr	r6, [r1, #8]
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
  *         that contains the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8001082:	4604      	mov	r4, r0
 8001084:	460d      	mov	r5, r1
  assert_param(IS_USART_PARITY(USART_InitStruct->USART_Parity));
  assert_param(IS_USART_MODE(USART_InitStruct->USART_Mode));
  assert_param(IS_USART_HARDWARE_FLOW_CONTROL(USART_InitStruct->USART_HardwareFlowControl));
  
  /* Disable USART */
  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
 8001086:	f027 0701 	bic.w	r7, r7, #1

  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800108a:	68c8      	ldr	r0, [r1, #12]
 800108c:	692a      	ldr	r2, [r5, #16]
 800108e:	6849      	ldr	r1, [r1, #4]
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);

  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8001090:	696b      	ldr	r3, [r5, #20]
  assert_param(IS_USART_PARITY(USART_InitStruct->USART_Parity));
  assert_param(IS_USART_MODE(USART_InitStruct->USART_Mode));
  assert_param(IS_USART_HARDWARE_FLOW_CONTROL(USART_InitStruct->USART_HardwareFlowControl));
  
  /* Disable USART */
  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
 8001092:	6027      	str	r7, [r4, #0]
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8001094:	6867      	ldr	r7, [r4, #4]
  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8001096:	f427 5740 	bic.w	r7, r7, #12288	; 0x3000

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 800109a:	433e      	orrs	r6, r7
  
  /* Write to USART CR2 */
  USARTx->CR2 = tmpreg;
 800109c:	6066      	str	r6, [r4, #4]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 800109e:	6826      	ldr	r6, [r4, #0]

  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80010a0:	4308      	orrs	r0, r1
  USARTx->CR2 = tmpreg;

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 80010a2:	f426 51b0 	bic.w	r1, r6, #5632	; 0x1600
 80010a6:	f021 060c 	bic.w	r6, r1, #12

  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80010aa:	4302      	orrs	r2, r0
 80010ac:	4332      	orrs	r2, r6
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = tmpreg;
 80010ae:	6022      	str	r2, [r4, #0]

  /*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 80010b0:	68a0      	ldr	r0, [r4, #8]
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 80010b2:	f420 7140 	bic.w	r1, r0, #768	; 0x300
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
  *         that contains the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 80010b6:	b08d      	sub	sp, #52	; 0x34
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);

  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 80010b8:	430b      	orrs	r3, r1

  /* Write to USART CR3 */
  USARTx->CR3 = tmpreg;
 80010ba:	60a3      	str	r3, [r4, #8]

  /*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 80010bc:	4668      	mov	r0, sp
 80010be:	f7ff fc2f 	bl	8000920 <RCC_GetClocksFreq>
  
  if (USARTx == USART1)
 80010c2:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80010c6:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80010ca:	4294      	cmp	r4, r2
 80010cc:	d027      	beq.n	800111e <USART_Init+0xa2>
  {
    apbclock = RCC_ClocksStatus.USART1CLK_Frequency;
  }
  else if (USARTx == USART2)
 80010ce:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 80010d2:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80010d6:	4284      	cmp	r4, r0
  {
    apbclock = RCC_ClocksStatus.USART2CLK_Frequency;
 80010d8:	bf0c      	ite	eq
 80010da:	990a      	ldreq	r1, [sp, #40]	; 0x28
  }
  else 
  {
    apbclock = RCC_ClocksStatus.USART3CLK_Frequency;
 80010dc:	990b      	ldrne	r1, [sp, #44]	; 0x2c
  }  
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80010de:	6823      	ldr	r3, [r4, #0]
  {
    /* (divider * 10) computing in case Oversampling mode is 8 Samples */
    divider = (uint32_t)((2 * apbclock) / (USART_InitStruct->USART_BaudRate));
 80010e0:	682a      	ldr	r2, [r5, #0]
  {
    apbclock = RCC_ClocksStatus.USART3CLK_Frequency;
  }  
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80010e2:	0418      	lsls	r0, r3, #16
 80010e4:	d516      	bpl.n	8001114 <USART_Init+0x98>
  {
    /* (divider * 10) computing in case Oversampling mode is 8 Samples */
    divider = (uint32_t)((2 * apbclock) / (USART_InitStruct->USART_BaudRate));
 80010e6:	0048      	lsls	r0, r1, #1
 80010e8:	fbb0 f3f2 	udiv	r3, r0, r2
    tmpreg  = (uint32_t)((2 * apbclock) % (USART_InitStruct->USART_BaudRate));
 80010ec:	fb02 0113 	mls	r1, r2, r3, r0
    divider = (uint32_t)((apbclock) / (USART_InitStruct->USART_BaudRate));
    tmpreg  = (uint32_t)((apbclock) % (USART_InitStruct->USART_BaudRate));
  }
  
  /* round the divider : if fractional part i greater than 0.5 increment divider */
  if (tmpreg >=  (USART_InitStruct->USART_BaudRate) / 2)
 80010f0:	ebb1 0f52 	cmp.w	r1, r2, lsr #1
  {
    divider++;
  } 
  
  /* Implement the divider in case Oversampling mode is 8 Samples */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80010f4:	6822      	ldr	r2, [r4, #0]
  }
  
  /* round the divider : if fractional part i greater than 0.5 increment divider */
  if (tmpreg >=  (USART_InitStruct->USART_BaudRate) / 2)
  {
    divider++;
 80010f6:	bf28      	it	cs
 80010f8:	3301      	addcs	r3, #1
  } 
  
  /* Implement the divider in case Oversampling mode is 8 Samples */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80010fa:	0412      	lsls	r2, r2, #16
 80010fc:	d506      	bpl.n	800110c <USART_Init+0x90>
  {
    /* get the LSB of divider and shift it to the right by 1 bit */
    tmpreg = (divider & (uint16_t)0x000F) >> 1;
    
    /* update the divider value */
    divider = (divider & (uint16_t)0xFFF0) | tmpreg;
 80010fe:	f64f 70f0 	movw	r0, #65520	; 0xfff0
  
  /* Implement the divider in case Oversampling mode is 8 Samples */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
  {
    /* get the LSB of divider and shift it to the right by 1 bit */
    tmpreg = (divider & (uint16_t)0x000F) >> 1;
 8001102:	f3c3 0142 	ubfx	r1, r3, #1, #3
    
    /* update the divider value */
    divider = (divider & (uint16_t)0xFFF0) | tmpreg;
 8001106:	4018      	ands	r0, r3
 8001108:	ea41 0300 	orr.w	r3, r1, r0
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)divider;
 800110c:	b29a      	uxth	r2, r3
 800110e:	81a2      	strh	r2, [r4, #12]
}
 8001110:	b00d      	add	sp, #52	; 0x34
 8001112:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpreg  = (uint32_t)((2 * apbclock) % (USART_InitStruct->USART_BaudRate));
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* (divider * 10) computing in case Oversampling mode is 16 Samples */
    divider = (uint32_t)((apbclock) / (USART_InitStruct->USART_BaudRate));
 8001114:	fbb1 f3f2 	udiv	r3, r1, r2
    tmpreg  = (uint32_t)((apbclock) % (USART_InitStruct->USART_BaudRate));
 8001118:	fb02 1113 	mls	r1, r2, r3, r1
 800111c:	e7e8      	b.n	80010f0 <USART_Init+0x74>
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
  
  if (USARTx == USART1)
  {
    apbclock = RCC_ClocksStatus.USART1CLK_Frequency;
 800111e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8001120:	e7dd      	b.n	80010de <USART_Init+0x62>
 8001122:	bf00      	nop

08001124 <USART_StructInit>:
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 8001124:	2300      	movs	r3, #0
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 8001126:	f44f 5216 	mov.w	r2, #9600	; 0x2580
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 800112a:	e880 000c 	stmia.w	r0, {r2, r3}
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
  USART_InitStruct->USART_Parity = USART_Parity_No ;
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 800112e:	220c      	movs	r2, #12
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
 8001130:	6083      	str	r3, [r0, #8]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
 8001132:	60c3      	str	r3, [r0, #12]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8001134:	6102      	str	r2, [r0, #16]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 8001136:	6143      	str	r3, [r0, #20]
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop

0800113c <USART_ClockInit>:
  *         structure that contains the configuration information for the specified 
  *         USART peripheral.  
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 800113c:	b430      	push	{r4, r5}
  /* Configure the USART Clock, CPOL, CPHA, LastBit and SSM ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)(USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 800113e:	e891 0028 	ldmia.w	r1, {r3, r5}
 8001142:	688c      	ldr	r4, [r1, #8]
  assert_param(IS_USART_CLOCK(USART_ClockInitStruct->USART_Clock));
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8001144:	6842      	ldr	r2, [r0, #4]
  /* Configure the USART Clock, CPOL, CPHA, LastBit and SSM ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)(USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 8001146:	68c9      	ldr	r1, [r1, #12]
 8001148:	432b      	orrs	r3, r5
 800114a:	4323      	orrs	r3, r4
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
  /* Clear CLKEN, CPOL, CPHA, LBCL and SSM bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 800114c:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
  /* Configure the USART Clock, CPOL, CPHA, LastBit and SSM ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)(USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 8001150:	430b      	orrs	r3, r1
 8001152:	4313      	orrs	r3, r2
                       USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit);
  /* Write to USART CR2 */
  USARTx->CR2 = tmpreg;
 8001154:	6043      	str	r3, [r0, #4]
}
 8001156:	bc30      	pop	{r4, r5}
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop

0800115c <USART_ClockStructInit>:
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 800115c:	2300      	movs	r3, #0
 800115e:	6003      	str	r3, [r0, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 8001160:	6043      	str	r3, [r0, #4]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 8001162:	6083      	str	r3, [r0, #8]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 8001164:	60c3      	str	r3, [r0, #12]
 8001166:	4770      	bx	lr

08001168 <USART_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8001168:	6803      	ldr	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800116a:	b919      	cbnz	r1, 8001174 <USART_Cmd+0xc>
    USARTx->CR1 |= USART_CR1_UE;
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
 800116c:	f023 0101 	bic.w	r1, r3, #1
 8001170:	6001      	str	r1, [r0, #0]
 8001172:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8001174:	f043 0201 	orr.w	r2, r3, #1
 8001178:	6002      	str	r2, [r0, #0]
 800117a:	4770      	bx	lr

0800117c <USART_DirectionModeCmd>:

  if (NewState != DISABLE)
  {
    /* Enable the USART's transfer interface by setting the TE and/or RE bits 
       in the USART CR1 register */
    USARTx->CR1 |= USART_DirectionMode;
 800117c:	6803      	ldr	r3, [r0, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_MODE(USART_DirectionMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 800117e:	b91a      	cbnz	r2, 8001188 <USART_DirectionModeCmd+0xc>
  }
  else
  {
    /* Disable the USART's transfer interface by clearing the TE and/or RE bits
       in the USART CR3 register */
    USARTx->CR1 &= (uint32_t)~USART_DirectionMode;
 8001180:	ea23 0101 	bic.w	r1, r3, r1
 8001184:	6001      	str	r1, [r0, #0]
 8001186:	4770      	bx	lr

  if (NewState != DISABLE)
  {
    /* Enable the USART's transfer interface by setting the TE and/or RE bits 
       in the USART CR1 register */
    USARTx->CR1 |= USART_DirectionMode;
 8001188:	4319      	orrs	r1, r3
 800118a:	6001      	str	r1, [r0, #0]
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop

08001190 <USART_OverSampling8Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
 8001190:	6803      	ldr	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001192:	b919      	cbnz	r1, 800119c <USART_OverSampling8Cmd+0xc>
    USARTx->CR1 |= USART_CR1_OVER8;
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_OVER8);
 8001194:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8001198:	6001      	str	r1, [r0, #0]
 800119a:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
 800119c:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80011a0:	6002      	str	r2, [r0, #0]
 80011a2:	4770      	bx	lr

080011a4 <USART_OneBitMethodCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
 80011a4:	6883      	ldr	r3, [r0, #8]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80011a6:	b919      	cbnz	r1, 80011b0 <USART_OneBitMethodCmd+0xc>
    USARTx->CR3 |= USART_CR3_ONEBIT;
  }
  else
  {
    /* Disable the one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_ONEBIT);
 80011a8:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 80011ac:	6081      	str	r1, [r0, #8]
 80011ae:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
 80011b0:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80011b4:	6082      	str	r2, [r0, #8]
 80011b6:	4770      	bx	lr

080011b8 <USART_MSBFirstCmd>:
  
  if (NewState != DISABLE)
  {
    /* Enable the most significant bit first transmitted/received following the 
       start bit by setting the MSBFIRST bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_MSBFIRST;
 80011b8:	6843      	ldr	r3, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80011ba:	b919      	cbnz	r1, 80011c4 <USART_MSBFirstCmd+0xc>
  }
  else
  {
    /* Disable the most significant bit first transmitted/received following the 
       start bit by clearing the MSBFIRST bit in the CR2 register */
    USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_MSBFIRST);
 80011bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80011c0:	6041      	str	r1, [r0, #4]
 80011c2:	4770      	bx	lr
  
  if (NewState != DISABLE)
  {
    /* Enable the most significant bit first transmitted/received following the 
       start bit by setting the MSBFIRST bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_MSBFIRST;
 80011c4:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80011c8:	6042      	str	r2, [r0, #4]
 80011ca:	4770      	bx	lr

080011cc <USART_DataInvCmd>:

  if (NewState != DISABLE)
  {
    /* Enable the binary data inversion feature by setting the DATAINV bit in 
       the CR2 register */
    USARTx->CR2 |= USART_CR2_DATAINV;
 80011cc:	6843      	ldr	r3, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80011ce:	b919      	cbnz	r1, 80011d8 <USART_DataInvCmd+0xc>
  }
  else
  {
    /* Disable the binary data inversion feature by clearing the DATAINV bit in 
       the CR2 register */
    USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_DATAINV);
 80011d0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80011d4:	6041      	str	r1, [r0, #4]
 80011d6:	4770      	bx	lr

  if (NewState != DISABLE)
  {
    /* Enable the binary data inversion feature by setting the DATAINV bit in 
       the CR2 register */
    USARTx->CR2 |= USART_CR2_DATAINV;
 80011d8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80011dc:	6042      	str	r2, [r0, #4]
 80011de:	4770      	bx	lr

080011e0 <USART_InvPinCmd>:

  if (NewState != DISABLE)
  {
    /* Enable the active level inversion for selected pins by setting the TXINV 
       and/or RXINV bits in the USART CR2 register */
    USARTx->CR2 |= USART_InvPin;
 80011e0:	6843      	ldr	r3, [r0, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_INVERSTION_PIN(USART_InvPin));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 80011e2:	b91a      	cbnz	r2, 80011ec <USART_InvPinCmd+0xc>
  }
  else
  {
    /* Disable the active level inversion for selected requests by clearing the 
       TXINV and/or RXINV bits in the USART CR2 register */
    USARTx->CR2 &= (uint32_t)~USART_InvPin;
 80011e4:	ea23 0101 	bic.w	r1, r3, r1
 80011e8:	6041      	str	r1, [r0, #4]
 80011ea:	4770      	bx	lr

  if (NewState != DISABLE)
  {
    /* Enable the active level inversion for selected pins by setting the TXINV 
       and/or RXINV bits in the USART CR2 register */
    USARTx->CR2 |= USART_InvPin;
 80011ec:	4319      	orrs	r1, r3
 80011ee:	6041      	str	r1, [r0, #4]
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop

080011f4 <USART_SWAPPinCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the SWAP feature by setting the SWAP bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_SWAP;
 80011f4:	6843      	ldr	r3, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80011f6:	b919      	cbnz	r1, 8001200 <USART_SWAPPinCmd+0xc>
    USARTx->CR2 |= USART_CR2_SWAP;
  }
  else
  {
    /* Disable the SWAP feature by clearing the SWAP bit in the CR2 register */
    USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_SWAP);
 80011f8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80011fc:	6041      	str	r1, [r0, #4]
 80011fe:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the SWAP feature by setting the SWAP bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_SWAP;
 8001200:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8001204:	6042      	str	r2, [r0, #4]
 8001206:	4770      	bx	lr

08001208 <USART_ReceiverTimeOutCmd>:

  if (NewState != DISABLE)
  {
    /* Enable the receiver time out feature by setting the RTOEN bit in the CR2 
       register */
    USARTx->CR2 |= USART_CR2_RTOEN;
 8001208:	6843      	ldr	r3, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800120a:	b919      	cbnz	r1, 8001214 <USART_ReceiverTimeOutCmd+0xc>
  }
  else
  {
    /* Disable the receiver time out feature by clearing the RTOEN bit in the CR2 
       register */
    USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_RTOEN);
 800120c:	f423 0100 	bic.w	r1, r3, #8388608	; 0x800000
 8001210:	6041      	str	r1, [r0, #4]
 8001212:	4770      	bx	lr

  if (NewState != DISABLE)
  {
    /* Enable the receiver time out feature by setting the RTOEN bit in the CR2 
       register */
    USARTx->CR2 |= USART_CR2_RTOEN;
 8001214:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001218:	6042      	str	r2, [r0, #4]
 800121a:	4770      	bx	lr

0800121c <USART_SetReceiverTimeOut>:
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_TIMEOUT(USART_ReceiverTimeOut));

  /* Clear the receiver Time Out value by clearing the RTO[23:0] bits in the RTOR
     register  */
  USARTx->RTOR &= (uint32_t)~((uint32_t)USART_RTOR_RTO);
 800121c:	6943      	ldr	r3, [r0, #20]
 800121e:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8001222:	6142      	str	r2, [r0, #20]
  /* Set the receiver Time Out value by setting the RTO[23:0] bits in the RTOR
     register  */
  USARTx->RTOR |= USART_ReceiverTimeOut;
 8001224:	6943      	ldr	r3, [r0, #20]
 8001226:	4319      	orrs	r1, r3
 8001228:	6141      	str	r1, [r0, #20]
 800122a:	4770      	bx	lr

0800122c <USART_SetPrescaler>:
{ 
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART prescaler */
  USARTx->GTPR &= USART_GTPR_GT;
 800122c:	8a03      	ldrh	r3, [r0, #16]
 800122e:	f403 427f 	and.w	r2, r3, #65280	; 0xff00
 8001232:	8202      	strh	r2, [r0, #16]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
 8001234:	8a03      	ldrh	r3, [r0, #16]
 8001236:	b29a      	uxth	r2, r3
 8001238:	4311      	orrs	r1, r2
 800123a:	8201      	strh	r1, [r0, #16]
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop

08001240 <USART_STOPModeCmd>:
  
  if (NewState != DISABLE)
  {
    /* Enable the selected USART in STOP mode by setting the UESM bit in the CR1
       register */
    USARTx->CR1 |= USART_CR1_UESM;
 8001240:	6803      	ldr	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001242:	b919      	cbnz	r1, 800124c <USART_STOPModeCmd+0xc>
  }
  else
  {
    /* Disable the selected USART in STOP mode by clearing the UE bit in the CR1
       register */
    USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UESM);
 8001244:	f023 0102 	bic.w	r1, r3, #2
 8001248:	6001      	str	r1, [r0, #0]
 800124a:	4770      	bx	lr
  
  if (NewState != DISABLE)
  {
    /* Enable the selected USART in STOP mode by setting the UESM bit in the CR1
       register */
    USARTx->CR1 |= USART_CR1_UESM;
 800124c:	f043 0202 	orr.w	r2, r3, #2
 8001250:	6002      	str	r2, [r0, #0]
 8001252:	4770      	bx	lr

08001254 <USART_StopModeWakeUpSourceConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_STOPMODE_WAKEUPSOURCE(USART_WakeUpSource));

  USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_WUS);
 8001254:	6883      	ldr	r3, [r0, #8]
 8001256:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800125a:	6082      	str	r2, [r0, #8]
  USARTx->CR3 |= USART_WakeUpSource;
 800125c:	6883      	ldr	r3, [r0, #8]
 800125e:	4319      	orrs	r1, r3
 8001260:	6081      	str	r1, [r0, #8]
 8001262:	4770      	bx	lr

08001264 <USART_AutoBaudRateCmd>:

  if (NewState != DISABLE)
  {
    /* Enable the auto baud rate feature by setting the ABREN bit in the CR2 
       register */
    USARTx->CR2 |= USART_CR2_ABREN;
 8001264:	6843      	ldr	r3, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001266:	b919      	cbnz	r1, 8001270 <USART_AutoBaudRateCmd+0xc>
  }
  else
  {
    /* Disable the auto baud rate feature by clearing the ABREN bit in the CR2 
       register */
    USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_ABREN);
 8001268:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800126c:	6041      	str	r1, [r0, #4]
 800126e:	4770      	bx	lr

  if (NewState != DISABLE)
  {
    /* Enable the auto baud rate feature by setting the ABREN bit in the CR2 
       register */
    USARTx->CR2 |= USART_CR2_ABREN;
 8001270:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001274:	6042      	str	r2, [r0, #4]
 8001276:	4770      	bx	lr

08001278 <USART_AutoBaudRateConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_AUTOBAUDRATE_MODE(USART_AutoBaudRate));

  USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_ABRMODE);
 8001278:	6843      	ldr	r3, [r0, #4]
 800127a:	f423 02c0 	bic.w	r2, r3, #6291456	; 0x600000
 800127e:	6042      	str	r2, [r0, #4]
  USARTx->CR2 |= USART_AutoBaudRate;
 8001280:	6843      	ldr	r3, [r0, #4]
 8001282:	4319      	orrs	r1, r3
 8001284:	6041      	str	r1, [r0, #4]
 8001286:	4770      	bx	lr

08001288 <USART_SendData>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->TDR = (Data & (uint16_t)0x01FF);
 8001288:	05c9      	lsls	r1, r1, #23
 800128a:	0dca      	lsrs	r2, r1, #23
 800128c:	8502      	strh	r2, [r0, #40]	; 0x28
 800128e:	4770      	bx	lr

08001290 <USART_ReceiveData>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->RDR & (uint16_t)0x01FF);
 8001290:	8c80      	ldrh	r0, [r0, #36]	; 0x24
}
 8001292:	05c1      	lsls	r1, r0, #23
 8001294:	0dc8      	lsrs	r0, r1, #23
 8001296:	4770      	bx	lr

08001298 <USART_SetAddress>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART address */
  USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_ADD);
 8001298:	6843      	ldr	r3, [r0, #4]
 800129a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800129e:	6042      	str	r2, [r0, #4]
  /* Set the USART address node */
  USARTx->CR2 |=((uint32_t)USART_Address << (uint32_t)0x18);
 80012a0:	6843      	ldr	r3, [r0, #4]
 80012a2:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
 80012a6:	6041      	str	r1, [r0, #4]
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop

080012ac <USART_MuteModeCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
  {
    /* Enable the USART mute mode by setting the MME bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_MME;
 80012ac:	6803      	ldr	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
 80012ae:	b919      	cbnz	r1, 80012b8 <USART_MuteModeCmd+0xc>
    USARTx->CR1 |= USART_CR1_MME;
  }
  else
  {
    /* Disable the USART mute mode by clearing the MME bit in the CR1 register */
    USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_MME);
 80012b0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80012b4:	6001      	str	r1, [r0, #0]
 80012b6:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
  {
    /* Enable the USART mute mode by setting the MME bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_MME;
 80012b8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80012bc:	6002      	str	r2, [r0, #0]
 80012be:	4770      	bx	lr

080012c0 <USART_MuteModeWakeUpConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_MUTEMODE_WAKEUP(USART_WakeUp));

  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_WAKE);
 80012c0:	6803      	ldr	r3, [r0, #0]
 80012c2:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80012c6:	6002      	str	r2, [r0, #0]
  USARTx->CR1 |= USART_WakeUp;
 80012c8:	6803      	ldr	r3, [r0, #0]
 80012ca:	4319      	orrs	r1, r3
 80012cc:	6001      	str	r1, [r0, #0]
 80012ce:	4770      	bx	lr

080012d0 <USART_AddressDetectionConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS_DETECTION(USART_AddressLength));

  USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_ADDM7);
 80012d0:	6843      	ldr	r3, [r0, #4]
 80012d2:	f023 0210 	bic.w	r2, r3, #16
 80012d6:	6042      	str	r2, [r0, #4]
  USARTx->CR2 |= USART_AddressLength;
 80012d8:	6843      	ldr	r3, [r0, #4]
 80012da:	4319      	orrs	r1, r3
 80012dc:	6041      	str	r1, [r0, #4]
 80012de:	4770      	bx	lr

080012e0 <USART_LINBreakDetectLengthConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));

  USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_LBDL);
 80012e0:	6843      	ldr	r3, [r0, #4]
 80012e2:	f023 0220 	bic.w	r2, r3, #32
 80012e6:	6042      	str	r2, [r0, #4]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
 80012e8:	6843      	ldr	r3, [r0, #4]
 80012ea:	4319      	orrs	r1, r3
 80012ec:	6041      	str	r1, [r0, #4]
 80012ee:	4770      	bx	lr

080012f0 <USART_LINCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
 80012f0:	6843      	ldr	r3, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80012f2:	b919      	cbnz	r1, 80012fc <USART_LINCmd+0xc>
    USARTx->CR2 |= USART_CR2_LINEN;
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_LINEN);
 80012f4:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80012f8:	6041      	str	r1, [r0, #4]
 80012fa:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
 80012fc:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001300:	6042      	str	r2, [r0, #4]
 8001302:	4770      	bx	lr

08001304 <USART_HalfDuplexCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
 8001304:	6883      	ldr	r3, [r0, #8]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001306:	b919      	cbnz	r1, 8001310 <USART_HalfDuplexCmd+0xc>
    USARTx->CR3 |= USART_CR3_HDSEL;
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_HDSEL);
 8001308:	f023 0108 	bic.w	r1, r3, #8
 800130c:	6081      	str	r1, [r0, #8]
 800130e:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
 8001310:	f043 0208 	orr.w	r2, r3, #8
 8001314:	6082      	str	r2, [r0, #8]
 8001316:	4770      	bx	lr

08001318 <USART_SetGuardTime>:
{    
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Clear the USART Guard time */
  USARTx->GTPR &= USART_GTPR_PSC;
 8001318:	8a03      	ldrh	r3, [r0, #16]
 800131a:	b2da      	uxtb	r2, r3
 800131c:	8202      	strh	r2, [r0, #16]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 800131e:	8a03      	ldrh	r3, [r0, #16]
 8001320:	b29a      	uxth	r2, r3
 8001322:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
 8001326:	8201      	strh	r1, [r0, #16]
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop

0800132c <USART_SmartCardCmd>:
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
 800132c:	6883      	ldr	r3, [r0, #8]
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800132e:	b919      	cbnz	r1, 8001338 <USART_SmartCardCmd+0xc>
    USARTx->CR3 |= USART_CR3_SCEN;
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_SCEN);
 8001330:	f023 0120 	bic.w	r1, r3, #32
 8001334:	6081      	str	r1, [r0, #8]
 8001336:	4770      	bx	lr
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
 8001338:	f043 0220 	orr.w	r2, r3, #32
 800133c:	6082      	str	r2, [r0, #8]
 800133e:	4770      	bx	lr

08001340 <USART_SmartCardNACKCmd>:
  assert_param(IS_USART_ALL_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
 8001340:	6883      	ldr	r3, [r0, #8]
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001342:	b919      	cbnz	r1, 800134c <USART_SmartCardNACKCmd+0xc>
    USARTx->CR3 |= USART_CR3_NACK;
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_NACK);
 8001344:	f023 0110 	bic.w	r1, r3, #16
 8001348:	6081      	str	r1, [r0, #8]
 800134a:	4770      	bx	lr
  assert_param(IS_USART_ALL_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
 800134c:	f043 0210 	orr.w	r2, r3, #16
 8001350:	6082      	str	r2, [r0, #8]
 8001352:	4770      	bx	lr

08001354 <USART_SetAutoRetryCount>:
{    
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_AUTO_RETRY_COUNTER(USART_AutoCount));
  /* Clear the USART auto retry count */
  USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_SCARCNT);
 8001354:	6883      	ldr	r3, [r0, #8]
 8001356:	f423 2260 	bic.w	r2, r3, #917504	; 0xe0000
 800135a:	6082      	str	r2, [r0, #8]
  /* Set the USART auto retry count*/
  USARTx->CR3 |= (uint32_t)((uint32_t)USART_AutoCount << 0x11);
 800135c:	6883      	ldr	r3, [r0, #8]
 800135e:	ea43 4141 	orr.w	r1, r3, r1, lsl #17
 8001362:	6081      	str	r1, [r0, #8]
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop

08001368 <USART_SetBlockLength>:
{    
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Clear the Smart card block length */
  USARTx->RTOR &= (uint32_t)~((uint32_t)USART_RTOR_BLEN);
 8001368:	6943      	ldr	r3, [r0, #20]
 800136a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800136e:	6142      	str	r2, [r0, #20]
  /* Set the Smart Card block length */
  USARTx->RTOR |= (uint32_t)((uint32_t)USART_BlockLength << 0x18);
 8001370:	6943      	ldr	r3, [r0, #20]
 8001372:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
 8001376:	6141      	str	r1, [r0, #20]
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop

0800137c <USART_IrDAConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));

  USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_IRLP);
 800137c:	6883      	ldr	r3, [r0, #8]
 800137e:	f023 0204 	bic.w	r2, r3, #4
 8001382:	6082      	str	r2, [r0, #8]
  USARTx->CR3 |= USART_IrDAMode;
 8001384:	6883      	ldr	r3, [r0, #8]
 8001386:	4319      	orrs	r1, r3
 8001388:	6081      	str	r1, [r0, #8]
 800138a:	4770      	bx	lr

0800138c <USART_IrDACmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
 800138c:	6883      	ldr	r3, [r0, #8]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800138e:	b919      	cbnz	r1, 8001398 <USART_IrDACmd+0xc>
    USARTx->CR3 |= USART_CR3_IREN;
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_IREN);
 8001390:	f023 0102 	bic.w	r1, r3, #2
 8001394:	6081      	str	r1, [r0, #8]
 8001396:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
 8001398:	f043 0202 	orr.w	r2, r3, #2
 800139c:	6082      	str	r2, [r0, #8]
 800139e:	4770      	bx	lr

080013a0 <USART_DECmd>:
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the DE functionality by setting the DEM bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_DEM;
 80013a0:	6883      	ldr	r3, [r0, #8]
void USART_DECmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80013a2:	b919      	cbnz	r1, 80013ac <USART_DECmd+0xc>
    USARTx->CR3 |= USART_CR3_DEM;
  }
  else
  {
    /* Disable the DE functionality by clearing the DEM bit in the CR3 register */
    USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DEM);
 80013a4:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80013a8:	6081      	str	r1, [r0, #8]
 80013aa:	4770      	bx	lr
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the DE functionality by setting the DEM bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_DEM;
 80013ac:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80013b0:	6082      	str	r2, [r0, #8]
 80013b2:	4770      	bx	lr

080013b4 <USART_DEPolarityConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DE_POLARITY(USART_DEPolarity));

  USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DEP);
 80013b4:	6883      	ldr	r3, [r0, #8]
 80013b6:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80013ba:	6082      	str	r2, [r0, #8]
  USARTx->CR3 |= USART_DEPolarity;
 80013bc:	6883      	ldr	r3, [r0, #8]
 80013be:	4319      	orrs	r1, r3
 80013c0:	6081      	str	r1, [r0, #8]
 80013c2:	4770      	bx	lr

080013c4 <USART_SetDEAssertionTime>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DE_ASSERTION_DEASSERTION_TIME(USART_DEAssertionTime)); 

  /* Clear the DE assertion time */
  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_DEAT);
 80013c4:	6803      	ldr	r3, [r0, #0]
 80013c6:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 80013ca:	6002      	str	r2, [r0, #0]
  /* Set the new value for the DE assertion time */
  USARTx->CR1 |=((uint32_t)USART_DEAssertionTime << (uint32_t)0x15);
 80013cc:	6803      	ldr	r3, [r0, #0]
 80013ce:	ea43 5141 	orr.w	r1, r3, r1, lsl #21
 80013d2:	6001      	str	r1, [r0, #0]
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop

080013d8 <USART_SetDEDeassertionTime>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DE_ASSERTION_DEASSERTION_TIME(USART_DEDeassertionTime)); 

  /* Clear the DE deassertion time */
  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_DEDT);
 80013d8:	6803      	ldr	r3, [r0, #0]
 80013da:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80013de:	6002      	str	r2, [r0, #0]
  /* Set the new value for the DE deassertion time */
  USARTx->CR1 |=((uint32_t)USART_DEDeassertionTime << (uint32_t)0x10);
 80013e0:	6803      	ldr	r3, [r0, #0]
 80013e2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80013e6:	6001      	str	r1, [r0, #0]
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop

080013ec <USART_DMACmd>:

  if (NewState != DISABLE)
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 80013ec:	6883      	ldr	r3, [r0, #8]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 80013ee:	b91a      	cbnz	r2, 80013f8 <USART_DMACmd+0xc>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint32_t)~USART_DMAReq;
 80013f0:	ea23 0101 	bic.w	r1, r3, r1
 80013f4:	6081      	str	r1, [r0, #8]
 80013f6:	4770      	bx	lr

  if (NewState != DISABLE)
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 80013f8:	4319      	orrs	r1, r3
 80013fa:	6081      	str	r1, [r0, #8]
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop

08001400 <USART_DMAReceptionErrorConfig>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAONERROR(USART_DMAOnError)); 
  
  /* Clear the DMA Reception error detection bit */
  USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DDRE);
 8001400:	6883      	ldr	r3, [r0, #8]
 8001402:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8001406:	6082      	str	r2, [r0, #8]
  /* Set the new value for the DMA Reception error detection bit */
  USARTx->CR3 |= USART_DMAOnError;
 8001408:	6883      	ldr	r3, [r0, #8]
 800140a:	4319      	orrs	r1, r3
 800140c:	6081      	str	r1, [r0, #8]
 800140e:	4770      	bx	lr

08001410 <USART_ITConfig>:

  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8001410:	b2cb      	uxtb	r3, r1
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  usartxbase = (uint32_t)USARTx;

  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 8001412:	f3c1 2107 	ubfx	r1, r1, #8, #8
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint32_t USART_IT, FunctionalState NewState)
{
 8001416:	b410      	push	{r4}
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
  itmask = (((uint32_t)0x01) << itpos);
 8001418:	2401      	movs	r4, #1

  if (usartreg == 0x02) /* The IT is in CR2 register */
 800141a:	2902      	cmp	r1, #2
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
  itmask = (((uint32_t)0x01) << itpos);
 800141c:	fa04 f303 	lsl.w	r3, r4, r3

  if (usartreg == 0x02) /* The IT is in CR2 register */
 8001420:	d00d      	beq.n	800143e <USART_ITConfig+0x2e>
  {
    usartxbase += 0x04;
  }
  else if (usartreg == 0x03) /* The IT is in CR3 register */
 8001422:	2903      	cmp	r1, #3
  {
    usartxbase += 0x08;
 8001424:	bf08      	it	eq
 8001426:	3008      	addeq	r0, #8
  }
  else /* The IT is in CR1 register */
  {
  }
  if (NewState != DISABLE)
 8001428:	b92a      	cbnz	r2, 8001436 <USART_ITConfig+0x26>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 800142a:	6802      	ldr	r2, [r0, #0]
 800142c:	ea22 0103 	bic.w	r1, r2, r3
 8001430:	6001      	str	r1, [r0, #0]
  }
}
 8001432:	bc10      	pop	{r4}
 8001434:	4770      	bx	lr
  else /* The IT is in CR1 register */
  {
  }
  if (NewState != DISABLE)
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8001436:	6802      	ldr	r2, [r0, #0]
 8001438:	4313      	orrs	r3, r2
 800143a:	6003      	str	r3, [r0, #0]
 800143c:	e7f9      	b.n	8001432 <USART_ITConfig+0x22>
  itpos = USART_IT & IT_MASK;
  itmask = (((uint32_t)0x01) << itpos);

  if (usartreg == 0x02) /* The IT is in CR2 register */
  {
    usartxbase += 0x04;
 800143e:	3004      	adds	r0, #4
 8001440:	e7f2      	b.n	8001428 <USART_ITConfig+0x18>
 8001442:	bf00      	nop

08001444 <USART_RequestCmd>:

  if (NewState != DISABLE)
  {
    /* Enable the USART ReQuest by setting the dedicated request bit in the RQR
       register.*/
    USARTx->RQR |= USART_Request;
 8001444:	8b03      	ldrh	r3, [r0, #24]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_REQUEST(USART_Request));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 8001446:	b922      	cbnz	r2, 8001452 <USART_RequestCmd+0xe>
  }
  else
  {
    /* Disable the USART ReQuest by clearing the dedicated request bit in the RQR
       register.*/
    USARTx->RQR &= (uint32_t)~USART_Request;
 8001448:	b29a      	uxth	r2, r3
 800144a:	ea22 0101 	bic.w	r1, r2, r1
 800144e:	8301      	strh	r1, [r0, #24]
 8001450:	4770      	bx	lr

  if (NewState != DISABLE)
  {
    /* Enable the USART ReQuest by setting the dedicated request bit in the RQR
       register.*/
    USARTx->RQR |= USART_Request;
 8001452:	4319      	orrs	r1, r3
 8001454:	b28b      	uxth	r3, r1
 8001456:	8303      	strh	r3, [r0, #24]
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop

0800145c <USART_OverrunDetectionConfig>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_OVRDETECTION(USART_OVRDetection));
  
  /* Clear the OVR detection bit */
  USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_OVRDIS);
 800145c:	6883      	ldr	r3, [r0, #8]
 800145e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001462:	6082      	str	r2, [r0, #8]
  /* Set the new value for the OVR detection bit */
  USARTx->CR3 |= USART_OVRDetection;
 8001464:	6883      	ldr	r3, [r0, #8]
 8001466:	4319      	orrs	r1, r3
 8001468:	6081      	str	r1, [r0, #8]
 800146a:	4770      	bx	lr

0800146c <USART_GetFlagStatus>:
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_FLAG(USART_FLAG));
  
  if ((USARTx->ISR & USART_FLAG) != (uint16_t)RESET)
 800146c:	69c3      	ldr	r3, [r0, #28]
 800146e:	4219      	tst	r1, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8001470:	bf0c      	ite	eq
 8001472:	2000      	moveq	r0, #0
 8001474:	2001      	movne	r0, #1
 8001476:	4770      	bx	lr

08001478 <USART_ClearFlag>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CLEAR_FLAG(USART_FLAG));
     
  USARTx->ICR = USART_FLAG;
 8001478:	6201      	str	r1, [r0, #32]
 800147a:	4770      	bx	lr

0800147c <USART_GetITStatus>:
  *            @arg USART_IT_FE:  Framing Error interrupt.
  *            @arg USART_IT_PE:  Parity Error interrupt.
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint32_t USART_IT)
{
 800147c:	b410      	push	{r4}
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_GET_IT(USART_IT)); 
  
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 800147e:	f3c1 2307 	ubfx	r3, r1, #8, #8
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
  itmask = (uint32_t)0x01 << itmask;
 8001482:	2401      	movs	r4, #1
  assert_param(IS_USART_GET_IT(USART_IT)); 
  
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8001484:	b2ca      	uxtb	r2, r1
  itmask = (uint32_t)0x01 << itmask;
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8001486:	42a3      	cmp	r3, r4
  
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
  itmask = (uint32_t)0x01 << itmask;
 8001488:	fa04 f202 	lsl.w	r2, r4, r2
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 800148c:	d012      	beq.n	80014b4 <USART_GetITStatus+0x38>
  {
    itmask &= USARTx->CR1;
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 800148e:	2b02      	cmp	r3, #2
  {
    itmask &= USARTx->CR2;
 8001490:	bf0c      	ite	eq
 8001492:	6843      	ldreq	r3, [r0, #4]
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8001494:	6883      	ldrne	r3, [r0, #8]
 8001496:	4013      	ands	r3, r2
  }
  
  bitpos = USART_IT >> 0x10;
  bitpos = (uint32_t)0x01 << bitpos;
  bitpos &= USARTx->ISR;
 8001498:	69c0      	ldr	r0, [r0, #28]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 800149a:	b14b      	cbz	r3, 80014b0 <USART_GetITStatus+0x34>
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
  }
  
  bitpos = USART_IT >> 0x10;
 800149c:	0c09      	lsrs	r1, r1, #16
  bitpos = (uint32_t)0x01 << bitpos;
 800149e:	2301      	movs	r3, #1
 80014a0:	fa03 f201 	lsl.w	r2, r3, r1
  bitpos &= USARTx->ISR;
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 80014a4:	4202      	tst	r2, r0
  {
    bitstatus = SET;
 80014a6:	bf0c      	ite	eq
 80014a8:	2000      	moveq	r0, #0
 80014aa:	2001      	movne	r0, #1
  {
    bitstatus = RESET;
  }
  
  return bitstatus;  
}
 80014ac:	bc10      	pop	{r4}
 80014ae:	4770      	bx	lr
  {
    bitstatus = SET;
  }
  else
  {
    bitstatus = RESET;
 80014b0:	4618      	mov	r0, r3
 80014b2:	e7fb      	b.n	80014ac <USART_GetITStatus+0x30>
  itmask = USART_IT & IT_MASK;
  itmask = (uint32_t)0x01 << itmask;
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
  {
    itmask &= USARTx->CR1;
 80014b4:	6803      	ldr	r3, [r0, #0]
 80014b6:	4013      	ands	r3, r2
 80014b8:	e7ee      	b.n	8001498 <USART_GetITStatus+0x1c>
 80014ba:	bf00      	nop

080014bc <USART_ClearITPendingBit>:
  uint32_t bitpos = 0, itmask = 0;
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CLEAR_IT(USART_IT)); 
  
  bitpos = USART_IT >> 0x10;
 80014bc:	0c09      	lsrs	r1, r1, #16
  itmask = ((uint32_t)0x01 << (uint32_t)bitpos);
 80014be:	2301      	movs	r3, #1
 80014c0:	fa03 f201 	lsl.w	r2, r3, r1
  USARTx->ICR = (uint32_t)itmask;
 80014c4:	6202      	str	r2, [r0, #32]
 80014c6:	4770      	bx	lr

080014c8 <GPIO_DeInit>:
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if(GPIOx == GPIOA)
 80014c8:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
  *         values.
  * @param  GPIOx: where x can be (A, B, C, D, E or F) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 80014cc:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if(GPIOx == GPIOA)
 80014ce:	d02a      	beq.n	8001526 <GPIO_DeInit+0x5e>
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOA, ENABLE);
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOA, DISABLE);
  }
  else if(GPIOx == GPIOB)
 80014d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014d4:	f6c4 0300 	movt	r3, #18432	; 0x4800
 80014d8:	4298      	cmp	r0, r3
 80014da:	d030      	beq.n	800153e <GPIO_DeInit+0x76>
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOB, ENABLE);
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOB, DISABLE);
  }
  else if(GPIOx == GPIOC)
 80014dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014e0:	f6c4 0100 	movt	r1, #18432	; 0x4800
 80014e4:	4288      	cmp	r0, r1
 80014e6:	d036      	beq.n	8001556 <GPIO_DeInit+0x8e>
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOC, ENABLE);
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOC, DISABLE);
  }
  else if(GPIOx == GPIOD)
 80014e8:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 80014ec:	f6c4 0200 	movt	r2, #18432	; 0x4800
 80014f0:	4290      	cmp	r0, r2
 80014f2:	d03c      	beq.n	800156e <GPIO_DeInit+0xa6>
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOD, ENABLE);
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOD, DISABLE);
  }
  else if(GPIOx == GPIOE)
 80014f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014f8:	f6c4 0300 	movt	r3, #18432	; 0x4800
 80014fc:	4298      	cmp	r0, r3
 80014fe:	d042      	beq.n	8001586 <GPIO_DeInit+0xbe>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOE, ENABLE);
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOE, DISABLE);
  }
  else
  {
    if(GPIOx == GPIOF)
 8001500:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
 8001504:	f6c4 0100 	movt	r1, #18432	; 0x4800
 8001508:	4288      	cmp	r0, r1
 800150a:	d000      	beq.n	800150e <GPIO_DeInit+0x46>
 800150c:	bd08      	pop	{r3, pc}
    {
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, ENABLE);
 800150e:	2101      	movs	r1, #1
 8001510:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001514:	f7ff fb36 	bl	8000b84 <RCC_AHBPeriphResetCmd>
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, DISABLE);
 8001518:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800151c:	2100      	movs	r1, #0
    }
  }
}
 800151e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  {
    if(GPIOx == GPIOF)
    {
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, ENABLE);
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, DISABLE);
 8001522:	f7ff bb2f 	b.w	8000b84 <RCC_AHBPeriphResetCmd>
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if(GPIOx == GPIOA)
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 8001526:	2101      	movs	r1, #1
 8001528:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800152c:	f7ff fb2a 	bl	8000b84 <RCC_AHBPeriphResetCmd>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOA, DISABLE);
 8001530:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001534:	2100      	movs	r1, #0
    {
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, ENABLE);
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, DISABLE);
    }
  }
}
 8001536:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if(GPIOx == GPIOA)
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOA, ENABLE);
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOA, DISABLE);
 800153a:	f7ff bb23 	b.w	8000b84 <RCC_AHBPeriphResetCmd>
  }
  else if(GPIOx == GPIOB)
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOB, ENABLE);
 800153e:	2101      	movs	r1, #1
 8001540:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001544:	f7ff fb1e 	bl	8000b84 <RCC_AHBPeriphResetCmd>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOB, DISABLE);
 8001548:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800154c:	2100      	movs	r1, #0
    {
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, ENABLE);
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, DISABLE);
    }
  }
}
 800154e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOA, DISABLE);
  }
  else if(GPIOx == GPIOB)
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOB, ENABLE);
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOB, DISABLE);
 8001552:	f7ff bb17 	b.w	8000b84 <RCC_AHBPeriphResetCmd>
  }
  else if(GPIOx == GPIOC)
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOC, ENABLE);
 8001556:	2101      	movs	r1, #1
 8001558:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800155c:	f7ff fb12 	bl	8000b84 <RCC_AHBPeriphResetCmd>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOC, DISABLE);
 8001560:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001564:	2100      	movs	r1, #0
    {
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, ENABLE);
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, DISABLE);
    }
  }
}
 8001566:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOB, DISABLE);
  }
  else if(GPIOx == GPIOC)
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOC, ENABLE);
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOC, DISABLE);
 800156a:	f7ff bb0b 	b.w	8000b84 <RCC_AHBPeriphResetCmd>
  }
  else if(GPIOx == GPIOD)
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOD, ENABLE);
 800156e:	2101      	movs	r1, #1
 8001570:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001574:	f7ff fb06 	bl	8000b84 <RCC_AHBPeriphResetCmd>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOD, DISABLE);
 8001578:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800157c:	2100      	movs	r1, #0
    {
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, ENABLE);
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, DISABLE);
    }
  }
}
 800157e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOC, DISABLE);
  }
  else if(GPIOx == GPIOD)
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOD, ENABLE);
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOD, DISABLE);
 8001582:	f7ff baff 	b.w	8000b84 <RCC_AHBPeriphResetCmd>
  }
  else if(GPIOx == GPIOE)
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOE, ENABLE);
 8001586:	2101      	movs	r1, #1
 8001588:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800158c:	f7ff fafa 	bl	8000b84 <RCC_AHBPeriphResetCmd>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOE, DISABLE);
 8001590:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001594:	2100      	movs	r1, #0
    {
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, ENABLE);
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, DISABLE);
    }
  }
}
 8001596:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOD, DISABLE);
  }
  else if(GPIOx == GPIOE)
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOE, ENABLE);
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOE, DISABLE);
 800159a:	f7ff baf3 	b.w	8000b84 <RCC_AHBPeriphResetCmd>
 800159e:	bf00      	nop

080015a0 <GPIO_Init>:
  *         GPIO_Pin_0 -> GPIO_Pin_2, GPIO_Pin_4, GPIO_Pin_6, GPIO_Pin_9 and GPIO_Pin_10 
  *         for GPIOF.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80015a0:	2200      	movs	r2, #0
 80015a2:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80015a6:	4613      	mov	r3, r2
 80015a8:	680d      	ldr	r5, [r1, #0]
  {
    pos = ((uint32_t)0x01) << pinpos;
 80015aa:	2601      	movs	r6, #1
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80015ac:	f04f 0c03 	mov.w	ip, #3
 80015b0:	e00b      	b.n	80015ca <GPIO_Init+0x2a>
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80015b2:	3301      	adds	r3, #1
  {
    pos = ((uint32_t)0x01) << pinpos;
 80015b4:	fa06 f403 	lsl.w	r4, r6, r3

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80015b8:	ea04 0705 	and.w	r7, r4, r5
 80015bc:	3202      	adds	r2, #2

    if (currentpin == pos)
 80015be:	42a7      	cmp	r7, r4
 80015c0:	d031      	beq.n	8001626 <GPIO_Init+0x86>
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80015c2:	3301      	adds	r3, #1
 80015c4:	3202      	adds	r2, #2
 80015c6:	2b10      	cmp	r3, #16
 80015c8:	d051      	beq.n	800166e <GPIO_Init+0xce>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80015ca:	fa06 f403 	lsl.w	r4, r6, r3

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80015ce:	ea04 0705 	and.w	r7, r4, r5

    if (currentpin == pos)
 80015d2:	42a7      	cmp	r7, r4
 80015d4:	d1ed      	bne.n	80015b2 <GPIO_Init+0x12>
    {
      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80015d6:	790c      	ldrb	r4, [r1, #4]
 80015d8:	f104 38ff 	add.w	r8, r4, #4294967295
 80015dc:	f1b8 0f01 	cmp.w	r8, #1
 80015e0:	d948      	bls.n	8001674 <GPIO_Init+0xd4>
 80015e2:	fa0c f702 	lsl.w	r7, ip, r2
 80015e6:	ea6f 0807 	mvn.w	r8, r7
        /* Output mode configuration */
        GPIOx->OTYPER &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos));
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80015ea:	6807      	ldr	r7, [r0, #0]

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80015ec:	f891 9007 	ldrb.w	r9, [r1, #7]
        /* Output mode configuration */
        GPIOx->OTYPER &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos));
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80015f0:	ea08 0707 	and.w	r7, r8, r7
 80015f4:	6007      	str	r7, [r0, #0]

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80015f6:	6807      	ldr	r7, [r0, #0]
 80015f8:	fa04 f402 	lsl.w	r4, r4, r2
 80015fc:	433c      	orrs	r4, r7
 80015fe:	6004      	str	r4, [r0, #0]

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8001600:	68c4      	ldr	r4, [r0, #12]
 8001602:	fa0c f702 	lsl.w	r7, ip, r2
 8001606:	ea24 0407 	bic.w	r4, r4, r7
 800160a:	60c4      	str	r4, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 800160c:	68c7      	ldr	r7, [r0, #12]
 800160e:	fa09 f402 	lsl.w	r4, r9, r2
 8001612:	433c      	orrs	r4, r7
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8001614:	3301      	adds	r3, #1

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8001616:	60c4      	str	r4, [r0, #12]

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
  {
    pos = ((uint32_t)0x01) << pinpos;
 8001618:	fa06 f403 	lsl.w	r4, r6, r3

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800161c:	ea04 0705 	and.w	r7, r4, r5
 8001620:	3202      	adds	r2, #2

    if (currentpin == pos)
 8001622:	42a7      	cmp	r7, r4
 8001624:	d1cd      	bne.n	80015c2 <GPIO_Init+0x22>
    {
      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8001626:	790c      	ldrb	r4, [r1, #4]
 8001628:	f104 38ff 	add.w	r8, r4, #4294967295
 800162c:	f1b8 0f01 	cmp.w	r8, #1
 8001630:	d946      	bls.n	80016c0 <GPIO_Init+0x120>
 8001632:	fa0c f702 	lsl.w	r7, ip, r2
 8001636:	ea6f 0807 	mvn.w	r8, r7
        /* Output mode configuration */
        GPIOx->OTYPER &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos));
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 800163a:	6807      	ldr	r7, [r0, #0]

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 800163c:	f891 9007 	ldrb.w	r9, [r1, #7]
        /* Output mode configuration */
        GPIOx->OTYPER &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos));
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8001640:	ea08 0707 	and.w	r7, r8, r7
 8001644:	6007      	str	r7, [r0, #0]

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8001646:	6807      	ldr	r7, [r0, #0]
 8001648:	fa04 f402 	lsl.w	r4, r4, r2
 800164c:	433c      	orrs	r4, r7
 800164e:	6004      	str	r4, [r0, #0]

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8001650:	68c4      	ldr	r4, [r0, #12]
 8001652:	fa0c f702 	lsl.w	r7, ip, r2
 8001656:	ea24 0407 	bic.w	r4, r4, r7
 800165a:	60c4      	str	r4, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 800165c:	68c7      	ldr	r7, [r0, #12]
 800165e:	fa09 f402 	lsl.w	r4, r9, r2
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8001662:	3301      	adds	r3, #1

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8001664:	433c      	orrs	r4, r7
 8001666:	3202      	adds	r2, #2
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8001668:	2b10      	cmp	r3, #16

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 800166a:	60c4      	str	r4, [r0, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800166c:	d1ad      	bne.n	80015ca <GPIO_Init+0x2a>
      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 800166e:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001672:	4770      	bx	lr
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8001674:	f8d0 b008 	ldr.w	fp, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8001678:	f891 9005 	ldrb.w	r9, [r1, #5]
        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos));
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800167c:	f891 a006 	ldrb.w	sl, [r1, #6]
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8001680:	fa0c f802 	lsl.w	r8, ip, r2
 8001684:	ea6f 0808 	mvn.w	r8, r8
 8001688:	ea08 0b0b 	and.w	fp, r8, fp
 800168c:	f8c0 b008 	str.w	fp, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8001690:	f8d0 b008 	ldr.w	fp, [r0, #8]
 8001694:	fa09 f902 	lsl.w	r9, r9, r2
 8001698:	ea49 090b 	orr.w	r9, r9, fp
 800169c:	f8c0 9008 	str.w	r9, [r0, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos));
 80016a0:	f8b0 9004 	ldrh.w	r9, [r0, #4]
 80016a4:	fa1f f989 	uxth.w	r9, r9
 80016a8:	ea29 0707 	bic.w	r7, r9, r7
 80016ac:	8087      	strh	r7, [r0, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80016ae:	f8b0 9004 	ldrh.w	r9, [r0, #4]
 80016b2:	fa0a f703 	lsl.w	r7, sl, r3
 80016b6:	ea47 0709 	orr.w	r7, r7, r9
 80016ba:	b2bf      	uxth	r7, r7
 80016bc:	8087      	strh	r7, [r0, #4]
 80016be:	e794      	b.n	80015ea <GPIO_Init+0x4a>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80016c0:	f8d0 b008 	ldr.w	fp, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80016c4:	f891 9005 	ldrb.w	r9, [r1, #5]
        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos));
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80016c8:	f891 a006 	ldrb.w	sl, [r1, #6]
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80016cc:	fa0c f802 	lsl.w	r8, ip, r2
 80016d0:	ea6f 0808 	mvn.w	r8, r8
 80016d4:	ea08 0b0b 	and.w	fp, r8, fp
 80016d8:	f8c0 b008 	str.w	fp, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80016dc:	f8d0 b008 	ldr.w	fp, [r0, #8]
 80016e0:	fa09 f902 	lsl.w	r9, r9, r2
 80016e4:	ea49 090b 	orr.w	r9, r9, fp
 80016e8:	f8c0 9008 	str.w	r9, [r0, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos));
 80016ec:	f8b0 9004 	ldrh.w	r9, [r0, #4]
 80016f0:	fa1f f989 	uxth.w	r9, r9
 80016f4:	ea29 0707 	bic.w	r7, r9, r7
 80016f8:	8087      	strh	r7, [r0, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80016fa:	f8b0 9004 	ldrh.w	r9, [r0, #4]
 80016fe:	fa0a f703 	lsl.w	r7, sl, r3
 8001702:	ea47 0709 	orr.w	r7, r7, r9
 8001706:	b2bf      	uxth	r7, r7
 8001708:	8087      	strh	r7, [r0, #4]
 800170a:	e796      	b.n	800163a <GPIO_Init+0x9a>

0800170c <GPIO_StructInit>:
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 800170c:	2300      	movs	r3, #0
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 800170e:	f64f 72ff 	movw	r2, #65535	; 0xffff
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_Level_2;
 8001712:	2102      	movs	r1, #2
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8001714:	6002      	str	r2, [r0, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 8001716:	7103      	strb	r3, [r0, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_Level_2;
 8001718:	7141      	strb	r1, [r0, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 800171a:	7183      	strb	r3, [r0, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 800171c:	71c3      	strb	r3, [r0, #7]
 800171e:	4770      	bx	lr

08001720 <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001720:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0x00010000;
 8001722:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001726:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_GPIO_LIST_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
 8001728:	9a01      	ldr	r2, [sp, #4]
 800172a:	ea41 0302 	orr.w	r3, r1, r2
 800172e:	9301      	str	r3, [sp, #4]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8001730:	9a01      	ldr	r2, [sp, #4]
 8001732:	61c2      	str	r2, [r0, #28]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 8001734:	61c1      	str	r1, [r0, #28]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8001736:	9901      	ldr	r1, [sp, #4]
 8001738:	61c1      	str	r1, [r0, #28]
  /* Read LCKK bit */
  tmp = GPIOx->LCKR;
 800173a:	69c3      	ldr	r3, [r0, #28]
 800173c:	9301      	str	r3, [sp, #4]
  /* Read LCKK bit */
  tmp = GPIOx->LCKR;
 800173e:	69c0      	ldr	r0, [r0, #28]
 8001740:	9001      	str	r0, [sp, #4]
}
 8001742:	b002      	add	sp, #8
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop

08001748 <GPIO_ReadInputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8001748:	8a03      	ldrh	r3, [r0, #16]
 800174a:	4219      	tst	r1, r3
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
}
 800174c:	bf0c      	ite	eq
 800174e:	2000      	moveq	r0, #0
 8001750:	2001      	movne	r0, #1
 8001752:	4770      	bx	lr

08001754 <GPIO_ReadInputData>:
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
 8001754:	8a00      	ldrh	r0, [r0, #16]
}
 8001756:	b280      	uxth	r0, r0
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop

0800175c <GPIO_ReadOutputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
 800175c:	8a83      	ldrh	r3, [r0, #20]
 800175e:	4219      	tst	r1, r3
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
}
 8001760:	bf0c      	ite	eq
 8001762:	2000      	moveq	r0, #0
 8001764:	2001      	movne	r0, #1
 8001766:	4770      	bx	lr

08001768 <GPIO_ReadOutputData>:
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
 8001768:	8a80      	ldrh	r0, [r0, #20]
}
 800176a:	b280      	uxth	r0, r0
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop

08001770 <GPIO_SetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRR = GPIO_Pin;
 8001770:	6181      	str	r1, [r0, #24]
 8001772:	4770      	bx	lr

08001774 <GPIO_ResetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BRR = GPIO_Pin;
 8001774:	8501      	strh	r1, [r0, #40]	; 0x28
 8001776:	4770      	bx	lr

08001778 <GPIO_WriteBit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 8001778:	b90a      	cbnz	r2, 800177e <GPIO_WriteBit+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
 800177a:	8501      	strh	r1, [r0, #40]	; 0x28
 800177c:	4770      	bx	lr
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
  {
    GPIOx->BSRR = GPIO_Pin;
 800177e:	6181      	str	r1, [r0, #24]
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop

08001784 <GPIO_Write>:
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
 8001784:	8281      	strh	r1, [r0, #20]
 8001786:	4770      	bx	lr

08001788 <GPIO_PinAFConfig>:
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));

  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 8001788:	08cb      	lsrs	r3, r1, #3
 800178a:	3308      	adds	r3, #8
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));

  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 800178c:	f001 0107 	and.w	r1, r1, #7
  *         for the detailed mapping of the system and peripherals'alternate 
  *         function I/O pins.
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8001790:	b430      	push	{r4, r5}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));

  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 8001792:	0089      	lsls	r1, r1, #2
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 8001794:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
 8001798:	240f      	movs	r4, #15
 800179a:	fa04 f401 	lsl.w	r4, r4, r1
 800179e:	ea25 0404 	bic.w	r4, r5, r4
 80017a2:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80017a6:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));

  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 80017aa:	fa02 f201 	lsl.w	r2, r2, r1
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80017ae:	4314      	orrs	r4, r2
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 80017b0:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
}
 80017b4:	bc30      	pop	{r4, r5}
 80017b6:	4770      	bx	lr

080017b8 <NVIC_PriorityGroupConfig>:
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 80017b8:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 80017bc:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 80017c0:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80017c4:	f440 3100 	orr.w	r1, r0, #131072	; 0x20000
 80017c8:	60d9      	str	r1, [r3, #12]
 80017ca:	4770      	bx	lr

080017cc <NVIC_Init>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80017cc:	78c3      	ldrb	r3, [r0, #3]
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80017ce:	b470      	push	{r4, r5, r6}
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80017d0:	b97b      	cbnz	r3, 80017f2 <NVIC_Init+0x26>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80017d2:	7802      	ldrb	r2, [r0, #0]
 80017d4:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 80017d8:	0951      	lsrs	r1, r2, #5
 80017da:	f2ce 0300 	movt	r3, #57344	; 0xe000
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80017de:	f002 021f 	and.w	r2, r2, #31
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80017e2:	3120      	adds	r1, #32
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80017e4:	2001      	movs	r0, #1
 80017e6:	fa00 f202 	lsl.w	r2, r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80017ea:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 80017ee:	bc70      	pop	{r4, r5, r6}
 80017f0:	4770      	bx	lr
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80017f2:	f44f 446d 	mov.w	r4, #60672	; 0xed00
 80017f6:	f2ce 0400 	movt	r4, #57344	; 0xe000
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80017fa:	7845      	ldrb	r5, [r0, #1]
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80017fc:	68e6      	ldr	r6, [r4, #12]
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 80017fe:	7884      	ldrb	r4, [r0, #2]
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = (uint8_t)tmppriority;
 8001800:	7803      	ldrb	r3, [r0, #0]
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8001802:	43f1      	mvns	r1, r6
 8001804:	f3c1 2202 	ubfx	r2, r1, #8, #3
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;
 8001808:	260f      	movs	r6, #15
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    tmppre = (0x4 - tmppriority);
 800180a:	f1c2 0104 	rsb	r1, r2, #4
    tmpsub = tmpsub >> tmppriority;
 800180e:	fa26 f202 	lsr.w	r2, r6, r2

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8001812:	fa05 f101 	lsl.w	r1, r5, r1
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8001816:	4022      	ands	r2, r4
 8001818:	430a      	orrs	r2, r1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = (uint8_t)tmppriority;
 800181a:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 800181e:	f503 4161 	add.w	r1, r3, #57600	; 0xe100
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
    tmppriority = tmppriority << 0x04;
 8001822:	0112      	lsls	r2, r2, #4
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = (uint8_t)tmppriority;
 8001824:	b2d3      	uxtb	r3, r2
 8001826:	f881 3300 	strb.w	r3, [r1, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800182a:	7800      	ldrb	r0, [r0, #0]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = (uint8_t)tmppriority;
 800182c:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8001830:	0941      	lsrs	r1, r0, #5
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8001832:	f000 021f 	and.w	r2, r0, #31

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = (uint8_t)tmppriority;
 8001836:	f2ce 0300 	movt	r3, #57344	; 0xe000
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800183a:	2001      	movs	r0, #1
 800183c:	fa00 f202 	lsl.w	r2, r0, r2
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = (uint8_t)tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8001840:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8001844:	e7d3      	b.n	80017ee <NVIC_Init+0x22>
 8001846:	bf00      	nop

08001848 <NVIC_SetVectorTable>:
{ 
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
 8001848:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
 800184c:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8001850:	f021 027f 	bic.w	r2, r1, #127	; 0x7f
 8001854:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8001858:	4310      	orrs	r0, r2
 800185a:	6098      	str	r0, [r3, #8]
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop

08001860 <NVIC_SystemLPConfig>:
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
  {
    SCB->SCR |= LowPowerMode;
 8001860:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8001864:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8001868:	691a      	ldr	r2, [r3, #16]
{
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
 800186a:	b919      	cbnz	r1, 8001874 <NVIC_SystemLPConfig+0x14>
  {
    SCB->SCR |= LowPowerMode;
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
 800186c:	ea22 0000 	bic.w	r0, r2, r0
 8001870:	6118      	str	r0, [r3, #16]
 8001872:	4770      	bx	lr
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
  {
    SCB->SCR |= LowPowerMode;
 8001874:	4310      	orrs	r0, r2
 8001876:	6118      	str	r0, [r3, #16]
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop

0800187c <SysTick_CLKSourceConfig>:
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 800187c:	f24e 0310 	movw	r3, #57360	; 0xe010
 8001880:	f2ce 0300 	movt	r3, #57344	; 0xe000
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 8001884:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	bf0c      	ite	eq
 800188a:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 800188e:	f022 0204 	bicne.w	r2, r2, #4
 8001892:	601a      	str	r2, [r3, #0]
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop

08001898 <__register_exitproc>:
 8001898:	b510      	push	{r4, lr}
 800189a:	4c03      	ldr	r4, [pc, #12]	; (80018a8 <__register_exitproc+0x10>)
 800189c:	b114      	cbz	r4, 80018a4 <__register_exitproc+0xc>
 800189e:	f3af 8000 	nop.w
 80018a2:	bd10      	pop	{r4, pc}
 80018a4:	4620      	mov	r0, r4
 80018a6:	bd10      	pop	{r4, pc}
 80018a8:	00000000 	.word	0x00000000

080018ac <exit>:
 80018ac:	b508      	push	{r3, lr}
 80018ae:	4b08      	ldr	r3, [pc, #32]	; (80018d0 <exit+0x24>)
 80018b0:	4604      	mov	r4, r0
 80018b2:	b11b      	cbz	r3, 80018bc <exit+0x10>
 80018b4:	2100      	movs	r1, #0
 80018b6:	f3af 8000 	nop.w
 80018ba:	e001      	b.n	80018c0 <exit+0x14>
 80018bc:	f000 f80c 	bl	80018d8 <__libc_fini_array>
 80018c0:	4804      	ldr	r0, [pc, #16]	; (80018d4 <exit+0x28>)
 80018c2:	6800      	ldr	r0, [r0, #0]
 80018c4:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80018c6:	b101      	cbz	r1, 80018ca <exit+0x1e>
 80018c8:	4788      	blx	r1
 80018ca:	4620      	mov	r0, r4
 80018cc:	f000 f848 	bl	8001960 <_exit>
 80018d0:	00000000 	.word	0x00000000
 80018d4:	080019f0 	.word	0x080019f0

080018d8 <__libc_fini_array>:
 80018d8:	b570      	push	{r4, r5, r6, lr}
 80018da:	4b08      	ldr	r3, [pc, #32]	; (80018fc <__libc_fini_array+0x24>)
 80018dc:	4c08      	ldr	r4, [pc, #32]	; (8001900 <__libc_fini_array+0x28>)
 80018de:	1ae0      	subs	r0, r4, r3
 80018e0:	1084      	asrs	r4, r0, #2
 80018e2:	eb03 0684 	add.w	r6, r3, r4, lsl #2
 80018e6:	2500      	movs	r5, #0
 80018e8:	3d04      	subs	r5, #4
 80018ea:	b11c      	cbz	r4, 80018f4 <__libc_fini_array+0x1c>
 80018ec:	5972      	ldr	r2, [r6, r5]
 80018ee:	4790      	blx	r2
 80018f0:	3c01      	subs	r4, #1
 80018f2:	e7f9      	b.n	80018e8 <__libc_fini_array+0x10>
 80018f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80018f8:	f000 b882 	b.w	8001a00 <_fini>
 80018fc:	08001a1c 	.word	0x08001a1c
 8001900:	08001a20 	.word	0x08001a20

08001904 <__libc_init_array>:
 8001904:	b538      	push	{r3, r4, r5, lr}
 8001906:	4d0e      	ldr	r5, [pc, #56]	; (8001940 <__libc_init_array+0x3c>)
 8001908:	4b0e      	ldr	r3, [pc, #56]	; (8001944 <__libc_init_array+0x40>)
 800190a:	1ae8      	subs	r0, r5, r3
 800190c:	1085      	asrs	r5, r0, #2
 800190e:	2400      	movs	r4, #0
 8001910:	42ac      	cmp	r4, r5
 8001912:	d005      	beq.n	8001920 <__libc_init_array+0x1c>
 8001914:	490b      	ldr	r1, [pc, #44]	; (8001944 <__libc_init_array+0x40>)
 8001916:	f851 2024 	ldr.w	r2, [r1, r4, lsl #2]
 800191a:	4790      	blx	r2
 800191c:	3401      	adds	r4, #1
 800191e:	e7f7      	b.n	8001910 <__libc_init_array+0xc>
 8001920:	f000 f868 	bl	80019f4 <_init>
 8001924:	4908      	ldr	r1, [pc, #32]	; (8001948 <__libc_init_array+0x44>)
 8001926:	4a09      	ldr	r2, [pc, #36]	; (800194c <__libc_init_array+0x48>)
 8001928:	1a54      	subs	r4, r2, r1
 800192a:	10a5      	asrs	r5, r4, #2
 800192c:	2400      	movs	r4, #0
 800192e:	42ac      	cmp	r4, r5
 8001930:	d005      	beq.n	800193e <__libc_init_array+0x3a>
 8001932:	4b05      	ldr	r3, [pc, #20]	; (8001948 <__libc_init_array+0x44>)
 8001934:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8001938:	4780      	blx	r0
 800193a:	3401      	adds	r4, #1
 800193c:	e7f7      	b.n	800192e <__libc_init_array+0x2a>
 800193e:	bd38      	pop	{r3, r4, r5, pc}
 8001940:	08001a18 	.word	0x08001a18
 8001944:	08001a18 	.word	0x08001a18
 8001948:	08001a18 	.word	0x08001a18
 800194c:	08001a1c 	.word	0x08001a1c

08001950 <memset>:
 8001950:	1882      	adds	r2, r0, r2
 8001952:	4603      	mov	r3, r0
 8001954:	4293      	cmp	r3, r2
 8001956:	d002      	beq.n	800195e <memset+0xe>
 8001958:	f803 1b01 	strb.w	r1, [r3], #1
 800195c:	e7fa      	b.n	8001954 <memset+0x4>
 800195e:	4770      	bx	lr

08001960 <_exit>:
 8001960:	e7fe      	b.n	8001960 <_exit>
 8001962:	bf00      	nop

08001964 <main>:
#include "main.h"

int main(void)
{
 8001964:	b508      	push	{r3, lr}
	uint32_t t_data = 0x123456;
	uint16_t r_data = 0x1234;
	static uint8_t counter = 0;

	i2s_config();	
 8001966:	f7fe fd91 	bl	800048c <i2s_config>
	Usart2_Config();
 800196a:	f7fe fdeb 	bl	8000544 <Usart2_Config>
	I2S_Cmd(SPI1, ENABLE);	
 800196e:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 8001972:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8001976:	2101      	movs	r1, #1
 8001978:	f7ff fa68 	bl	8000e4c <I2S_Cmd>
	USART_Cmd(USART2, ENABLE);
 800197c:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 8001980:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8001984:	2101      	movs	r1, #1
 8001986:	f7ff fbef 	bl	8001168 <USART_Cmd>
	SPI_I2S_ITConfig(SPI1, SPI_I2S_IT_TXE, ENABLE);
 800198a:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 800198e:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8001992:	2171      	movs	r1, #113	; 0x71
 8001994:	2201      	movs	r2, #1
 8001996:	f7ff fb01 	bl	8000f9c <SPI_I2S_ITConfig>
 800199a:	e7fe      	b.n	800199a <main+0x36>

0800199c <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800199c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800199e:	f000 b804 	b.w	80019aa <LoopCopyDataInit>

080019a2 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80019a2:	4b0c      	ldr	r3, [pc, #48]	; (80019d4 <LoopFillZerobss+0x12>)
  ldr  r3, [r3, r1]
 80019a4:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80019a6:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80019a8:	3104      	adds	r1, #4

080019aa <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80019aa:	480b      	ldr	r0, [pc, #44]	; (80019d8 <LoopFillZerobss+0x16>)
  ldr  r3, =_edata
 80019ac:	4b0b      	ldr	r3, [pc, #44]	; (80019dc <LoopFillZerobss+0x1a>)
  adds  r2, r0, r1
 80019ae:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80019b0:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80019b2:	f4ff aff6 	bcc.w	80019a2 <CopyDataInit>
  ldr  r2, =_sbss
 80019b6:	4a0a      	ldr	r2, [pc, #40]	; (80019e0 <LoopFillZerobss+0x1e>)
  b  LoopFillZerobss
 80019b8:	f000 b803 	b.w	80019c2 <LoopFillZerobss>

080019bc <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80019bc:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80019be:	f842 3b04 	str.w	r3, [r2], #4

080019c2 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80019c2:	4b08      	ldr	r3, [pc, #32]	; (80019e4 <LoopFillZerobss+0x22>)
  cmp  r2, r3
 80019c4:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80019c6:	f4ff aff9 	bcc.w	80019bc <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80019ca:	f7fe fcb9 	bl	8000340 <SystemInit>
/* Call the application's entry point.*/
  bl  main
 80019ce:	f7ff ffc9 	bl	8001964 <main>
  bx  lr    
 80019d2:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 80019d4:	08001a20 	.word	0x08001a20
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80019d8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80019dc:	200000a4 	.word	0x200000a4
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 80019e0:	200000a8 	.word	0x200000a8
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80019e4:	200000cc 	.word	0x200000cc

080019e8 <ADC1_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019e8:	f7ff bffe 	b.w	80019e8 <ADC1_IRQHandler>
 80019ec:	00000043 	.word	0x00000043

080019f0 <_global_impure_ptr>:
 80019f0:	2000003c                                <.. 

080019f4 <_init>:
 80019f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019f6:	bf00      	nop
 80019f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019fa:	bc08      	pop	{r3}
 80019fc:	469e      	mov	lr, r3
 80019fe:	4770      	bx	lr

08001a00 <_fini>:
 8001a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a02:	bf00      	nop
 8001a04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a06:	bc08      	pop	{r3}
 8001a08:	469e      	mov	lr, r3
 8001a0a:	4770      	bx	lr
